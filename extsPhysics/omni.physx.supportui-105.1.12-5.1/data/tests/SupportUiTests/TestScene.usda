#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (-387.4712708929077, 400.5319029924593, 201.22976602085248)
                double3 target = (-203.5275578692618, 269.4617760255477, 143.24066014169802)
            }
            dictionary Right = {
                double3 position = (-50000, 0, -1.1102230246251565e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (-4.329780281177466e-12, 50000, 1.1102230246251565e-11)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:dynamicDiffuseGI:probeCounts" = (6, 6, 6)
            float3 "rtx:dynamicDiffuseGI:probeGridOrigin" = (-210, -250, -10)
            float3 "rtx:dynamicDiffuseGI:volumeSize" = (600, 440, 300)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (0, 1, 0)
            float3 "rtx:lightspeed:material:overrideAlbedo" = (0.5, 0.5, 0.5)
            float3 "rtx:lightspeed:material:overrideEmissiveColor" = (0.5, 0.5, 0.5)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    def Xform "Xform"
    {
        double3 xformOp:rotateXYZ = (-95.20738220214844, -0, 0)
        double3 xformOp:scale = (1, 1.000000238418579, 1.000000238418579)
        double3 xformOp:translate = (-1.42109e-14, 139.879, 276.038)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "Cube" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxCookedDataAPI:convexDecomposition"]
            kind = "component"
        )
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 0, 4, 5, 1, 1, 5, 6, 3, 2, 3, 6, 7, 0, 2, 7, 4, 4, 7, 6, 5]
            normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "faceVarying"
            )
            vector3f physics:angularVelocity = (0, 0, 0)
            token physics:approximation = "convexDecomposition"
            vector3f physics:velocity = (0, -65.4, 0)
            uchar[] physxCookedData:convexDecomposition:buffer = [7, 1, 134, 11, 30, 89, 70, 121, 68, 165, 205, 168, 48, 164, 77, 69, 77, 1, 0, 0, 0, 228, 1, 0, 0, 78, 88, 83, 1, 67, 86, 88, 77, 14, 0, 0, 0, 0, 0, 0, 0, 73, 67, 69, 1, 67, 76, 72, 76, 9, 0, 0, 0, 8, 0, 0, 0, 12, 128, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 72, 194, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 72, 194, 4, 0, 4, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 194, 8, 0, 4, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 194, 12, 0, 4, 2, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 72, 194, 16, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 72, 194, 20, 0, 4, 0, 0, 1, 2, 3, 4, 2, 1, 5, 4, 6, 3, 2, 7, 5, 1, 0, 7, 0, 3, 6, 7, 6, 4, 5, 0, 3, 0, 1, 0, 2, 0, 4, 1, 2, 1, 3, 1, 5, 2, 5, 2, 4, 3, 5, 3, 4, 4, 5, 0, 3, 4, 0, 1, 3, 0, 1, 2, 0, 2, 4, 1, 2, 5, 1, 3, 5, 2, 4, 5, 3, 4, 5, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 2, 0, 1, 0, 5, 0, 5, 0, 4, 0, 4, 0, 6, 0, 6, 0, 3, 0, 7, 0, 5, 0, 0, 0, 7, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 36, 116, 73, 161, 174, 198, 78, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 161, 174, 198, 78, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 161, 174, 198, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66]
            point3f[] points = [(-50, -50, -50), (50, -50, -50), (-50, -50, 50), (50, -50, 50), (-50, 50, -50), (50, 50, -50), (50, 50, 50), (-50, 50, 50)]
            float2[] primvars:st = [(1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            quatf xformOp:orient = (1, -3.9424766e-8, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (99.44799804687501, 411.8173262603165, -10.657769952917775)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def PhysicsScene "_PhysicsScene"
    {
        vector3f physics:gravityDirection = (0, -1, 0)
        float physics:gravityMagnitude = 981
    }

    def Mesh "_GroundPlane" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCookedDataAPI:triangleMesh"]
        customData = {
            string physXPlacementModeMarkup = "mesh_simplification"
        }
    )
    {
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 2, 3, 1]
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            interpolation = "faceVarying"
        )
        uchar[] physxCookedData:buffer = [6, 94, 90, 118, 109, 194, 116, 32, 100, 199, 93, 57, 18, 55, 11, 79, 208, 78, 88, 83, 1, 67, 86, 88, 77, 13, 0, 0, 0, 0, 0, 0, 0, 73, 67, 69, 1, 67, 76, 72, 76, 9, 0, 0, 0, 8, 0, 0, 0, 12, 128, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 0, 0, 72, 194, 206, 204, 76, 61, 0, 0, 72, 194, 0, 0, 72, 194, 206, 204, 76, 189, 0, 0, 72, 194, 0, 0, 72, 194, 206, 204, 76, 189, 0, 0, 72, 66, 0, 0, 72, 194, 206, 204, 76, 61, 0, 0, 72, 66, 0, 0, 72, 66, 206, 204, 76, 189, 0, 0, 72, 66, 0, 0, 72, 66, 206, 204, 76, 61, 0, 0, 72, 66, 0, 0, 72, 66, 206, 204, 76, 189, 0, 0, 72, 194, 0, 0, 72, 66, 206, 204, 76, 61, 0, 0, 72, 194, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 194, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 72, 194, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 206, 204, 76, 189, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 72, 194, 12, 0, 4, 2, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 206, 204, 76, 189, 16, 0, 4, 1, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 194, 20, 0, 4, 0, 0, 1, 2, 3, 4, 5, 3, 2, 4, 2, 1, 6, 7, 6, 1, 0, 7, 0, 3, 5, 7, 5, 4, 6, 0, 3, 0, 2, 0, 1, 0, 4, 1, 5, 1, 4, 1, 2, 2, 3, 2, 5, 3, 5, 3, 4, 4, 5, 0, 3, 4, 0, 2, 3, 0, 1, 2, 0, 1, 4, 1, 2, 5, 1, 4, 5, 2, 3, 5, 3, 4, 5, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 5, 0, 5, 0, 3, 0, 2, 0, 4, 0, 1, 0, 6, 0, 6, 0, 4, 0, 7, 0, 6, 0, 0, 0, 7, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 72, 194, 206, 204, 76, 189, 0, 0, 72, 194, 0, 0, 72, 66, 206, 204, 76, 61, 0, 0, 72, 66, 2, 0, 122, 68, 100, 115, 75, 73, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 87, 115, 203, 73, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 100, 115, 75, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 206, 204, 76, 61, 0, 0, 72, 66, 206, 204, 76, 61, 206, 204, 76, 61]
        uchar[] physxCookedData:triangleMesh:buffer = [7, 151, 49, 179, 133, 112, 172, 180, 173, 238, 246, 16, 70, 73, 129, 198, 167, 78, 88, 83, 1, 77, 69, 83, 72, 16, 0, 0, 0, 1, 0, 0, 0, 182, 1, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 0, 0, 0, 0, 72, 66, 0, 2, 3, 0, 3, 1, 1, 0, 0, 0, 0, 1, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 66, 86, 52, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 107, 141, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 55, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 0, 0, 0, 0, 72, 66, 2, 0, 0, 0, 24, 48, 0, 2, 3, 0, 3, 1, 255, 255, 255, 255, 255, 255, 255, 255, 1, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 128, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 66, 86, 51, 50, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 107, 141, 66, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 255, 255, 255, 255, 5, 0, 0, 0, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 72, 66, 0, 0, 0, 0, 0, 0, 72, 66, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
        uniform token physxCookedData:type = "convexMesh"
        point3f[] points = [(-50, 0, -50), (50, 0, -50), (-50, 0, 50), (50, 0, 50)]
        float2[] primvars:st = [(1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (50, 1, 50)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def SphereLight "_SphereLight"
    {
        float intensity = 30000
        float radius = 150
        float3 xformOp:rotateXYZ = (-95.207405, -0, 0)
        float3 xformOp:scale = (1, 1.0000004, 1.0000004)
        double3 xformOp:translate = (650, 1285.13, 171.663)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Mesh "Cylinder" (
        kind = "component"
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 32, 33, 1, 1, 33, 34, 2, 2, 34, 35, 3, 3, 35, 36, 4, 4, 36, 37, 5, 5, 37, 38, 6, 6, 38, 39, 7, 7, 39, 40, 8, 8, 40, 41, 9, 9, 41, 42, 10, 10, 42, 43, 11, 11, 43, 44, 12, 12, 44, 45, 13, 13, 45, 46, 14, 14, 46, 47, 15, 15, 47, 48, 16, 16, 48, 49, 17, 17, 49, 50, 18, 18, 50, 51, 19, 19, 51, 52, 20, 20, 52, 53, 21, 21, 53, 54, 22, 22, 54, 55, 23, 23, 55, 56, 24, 24, 56, 57, 25, 25, 57, 58, 26, 26, 58, 59, 27, 27, 59, 60, 28, 28, 60, 61, 29, 29, 61, 62, 30, 30, 62, 63, 31, 31, 63, 32, 0, 64, 65, 66, 64, 66, 67, 64, 67, 68, 64, 68, 69, 64, 69, 70, 64, 70, 71, 64, 71, 72, 64, 72, 73, 64, 73, 74, 64, 74, 75, 64, 75, 76, 64, 76, 77, 64, 77, 78, 64, 78, 79, 64, 79, 80, 64, 80, 81, 64, 81, 82, 64, 82, 83, 64, 83, 84, 64, 84, 85, 64, 85, 86, 64, 86, 87, 64, 87, 88, 64, 88, 89, 64, 89, 90, 64, 90, 91, 64, 91, 92, 64, 92, 93, 64, 93, 94, 64, 94, 95, 64, 95, 96, 64, 96, 65, 97, 99, 98, 97, 100, 99, 97, 101, 100, 97, 102, 101, 97, 103, 102, 97, 104, 103, 97, 105, 104, 97, 106, 105, 97, 107, 106, 97, 108, 107, 97, 109, 108, 97, 110, 109, 97, 111, 110, 97, 112, 111, 97, 113, 112, 97, 114, 113, 97, 115, 114, 97, 116, 115, 97, 117, 116, 97, 118, 117, 97, 119, 118, 97, 120, 119, 97, 121, 120, 97, 122, 121, 97, 123, 122, 97, 124, 123, 97, 125, 124, 97, 126, 125, 97, 127, 126, 97, 128, 127, 97, 129, 128, 97, 98, 129]
        normal3f[] normals = [(50, 0, 0), (50, 0, 0), (49.039265, 0, 9.754516), (49.039265, 0, 9.754516), (49.039265, 0, 9.754516), (49.039265, 0, 9.754516), (46.193977, 0, 19.134172), (46.193977, 0, 19.134172), (46.193977, 0, 19.134172), (46.193977, 0, 19.134172), (41.573483, 0, 27.778511), (41.573483, 0, 27.778511), (41.573483, 0, 27.778511), (41.573483, 0, 27.778511), (35.35534, 0, 35.35534), (35.35534, 0, 35.35534), (35.35534, 0, 35.35534), (35.35534, 0, 35.35534), (27.778511, 0, 41.573483), (27.778511, 0, 41.573483), (27.778511, 0, 41.573483), (27.778511, 0, 41.573483), (19.134172, 0, 46.193977), (19.134172, 0, 46.193977), (19.134172, 0, 46.193977), (19.134172, 0, 46.193977), (9.754516, 0, 49.039265), (9.754516, 0, 49.039265), (9.754516, 0, 49.039265), (9.754516, 0, 49.039265), (3.0616169e-15, 0, 50), (3.0616169e-15, 0, 50), (3.0616169e-15, 0, 50), (3.0616169e-15, 0, 50), (-9.754516, 0, 49.039265), (-9.754516, 0, 49.039265), (-9.754516, 0, 49.039265), (-9.754516, 0, 49.039265), (-19.134172, 0, 46.193977), (-19.134172, 0, 46.193977), (-19.134172, 0, 46.193977), (-19.134172, 0, 46.193977), (-27.778511, 0, 41.573483), (-27.778511, 0, 41.573483), (-27.778511, 0, 41.573483), (-27.778511, 0, 41.573483), (-35.35534, 0, 35.35534), (-35.35534, 0, 35.35534), (-35.35534, 0, 35.35534), (-35.35534, 0, 35.35534), (-41.573483, 0, 27.778511), (-41.573483, 0, 27.778511), (-41.573483, 0, 27.778511), (-41.573483, 0, 27.778511), (-46.193977, 0, 19.134172), (-46.193977, 0, 19.134172), (-46.193977, 0, 19.134172), (-46.193977, 0, 19.134172), (-49.039265, 0, 9.754516), (-49.039265, 0, 9.754516), (-49.039265, 0, 9.754516), (-49.039265, 0, 9.754516), (-50, 0, 6.1232338e-15), (-50, 0, 6.1232338e-15), (-50, 0, 6.1232338e-15), (-50, 0, 6.1232338e-15), (-49.039265, 0, -9.754516), (-49.039265, 0, -9.754516), (-49.039265, 0, -9.754516), (-49.039265, 0, -9.754516), (-46.193977, 0, -19.134172), (-46.193977, 0, -19.134172), (-46.193977, 0, -19.134172), (-46.193977, 0, -19.134172), (-41.573483, 0, -27.778511), (-41.573483, 0, -27.778511), (-41.573483, 0, -27.778511), (-41.573483, 0, -27.778511), (-35.35534, 0, -35.35534), (-35.35534, 0, -35.35534), (-35.35534, 0, -35.35534), (-35.35534, 0, -35.35534), (-27.778511, 0, -41.573483), (-27.778511, 0, -41.573483), (-27.778511, 0, -41.573483), (-27.778511, 0, -41.573483), (-19.134172, 0, -46.193977), (-19.134172, 0, -46.193977), (-19.134172, 0, -46.193977), (-19.134172, 0, -46.193977), (-9.754516, 0, -49.039265), (-9.754516, 0, -49.039265), (-9.754516, 0, -49.039265), (-9.754516, 0, -49.039265), (-9.184851e-15, 0, -50), (-9.184851e-15, 0, -50), (-9.184851e-15, 0, -50), (-9.184851e-15, 0, -50), (9.754516, 0, -49.039265), (9.754516, 0, -49.039265), (9.754516, 0, -49.039265), (9.754516, 0, -49.039265), (19.134172, 0, -46.193977), (19.134172, 0, -46.193977), (19.134172, 0, -46.193977), (19.134172, 0, -46.193977), (27.778511, 0, -41.573483), (27.778511, 0, -41.573483), (27.778511, 0, -41.573483), (27.778511, 0, -41.573483), (35.35534, 0, -35.35534), (35.35534, 0, -35.35534), (35.35534, 0, -35.35534), (35.35534, 0, -35.35534), (41.573483, 0, -27.778511), (41.573483, 0, -27.778511), (41.573483, 0, -27.778511), (41.573483, 0, -27.778511), (46.193977, 0, -19.134172), (46.193977, 0, -19.134172), (46.193977, 0, -19.134172), (46.193977, 0, -19.134172), (49.039265, 0, -9.754516), (49.039265, 0, -9.754516), (49.039265, 0, -9.754516), (49.039265, 0, -9.754516), (50, 0, 0), (50, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(50, -50, 0), (49.039265, -50, 9.754516), (46.193977, -50, 19.134172), (41.573483, -50, 27.778511), (35.35534, -50, 35.35534), (27.778511, -50, 41.573483), (19.134172, -50, 46.193977), (9.754516, -50, 49.039265), (3.0616169e-15, -50, 50), (-9.754516, -50, 49.039265), (-19.134172, -50, 46.193977), (-27.778511, -50, 41.573483), (-35.35534, -50, 35.35534), (-41.573483, -50, 27.778511), (-46.193977, -50, 19.134172), (-49.039265, -50, 9.754516), (-50, -50, 6.1232338e-15), (-49.039265, -50, -9.754516), (-46.193977, -50, -19.134172), (-41.573483, -50, -27.778511), (-35.35534, -50, -35.35534), (-27.778511, -50, -41.573483), (-19.134172, -50, -46.193977), (-9.754516, -50, -49.039265), (-9.184851e-15, -50, -50), (9.754516, -50, -49.039265), (19.134172, -50, -46.193977), (27.778511, -50, -41.573483), (35.35534, -50, -35.35534), (41.573483, -50, -27.778511), (46.193977, -50, -19.134172), (49.039265, -50, -9.754516), (50, 50, 0), (49.039265, 50, 9.754516), (46.193977, 50, 19.134172), (41.573483, 50, 27.778511), (35.35534, 50, 35.35534), (27.778511, 50, 41.573483), (19.134172, 50, 46.193977), (9.754516, 50, 49.039265), (3.0616169e-15, 50, 50), (-9.754516, 50, 49.039265), (-19.134172, 50, 46.193977), (-27.778511, 50, 41.573483), (-35.35534, 50, 35.35534), (-41.573483, 50, 27.778511), (-46.193977, 50, 19.134172), (-49.039265, 50, 9.754516), (-50, 50, 6.1232338e-15), (-49.039265, 50, -9.754516), (-46.193977, 50, -19.134172), (-41.573483, 50, -27.778511), (-35.35534, 50, -35.35534), (-27.778511, 50, -41.573483), (-19.134172, 50, -46.193977), (-9.754516, 50, -49.039265), (-9.184851e-15, 50, -50), (9.754516, 50, -49.039265), (19.134172, 50, -46.193977), (27.778511, 50, -41.573483), (35.35534, 50, -35.35534), (41.573483, 50, -27.778511), (46.193977, 50, -19.134172), (49.039265, 50, -9.754516), (0, -50, 0), (50, -50, 0), (49.039265, -50, 9.754516), (46.193977, -50, 19.134172), (41.573483, -50, 27.778511), (35.35534, -50, 35.35534), (27.778511, -50, 41.573483), (19.134172, -50, 46.193977), (9.754516, -50, 49.039265), (3.0616169e-15, -50, 50), (-9.754516, -50, 49.039265), (-19.134172, -50, 46.193977), (-27.778511, -50, 41.573483), (-35.35534, -50, 35.35534), (-41.573483, -50, 27.778511), (-46.193977, -50, 19.134172), (-49.039265, -50, 9.754516), (-50, -50, 6.1232338e-15), (-49.039265, -50, -9.754516), (-46.193977, -50, -19.134172), (-41.573483, -50, -27.778511), (-35.35534, -50, -35.35534), (-27.778511, -50, -41.573483), (-19.134172, -50, -46.193977), (-9.754516, -50, -49.039265), (-9.184851e-15, -50, -50), (9.754516, -50, -49.039265), (19.134172, -50, -46.193977), (27.778511, -50, -41.573483), (35.35534, -50, -35.35534), (41.573483, -50, -27.778511), (46.193977, -50, -19.134172), (49.039265, -50, -9.754516), (0, 50, 0), (50, 50, 0), (49.039265, 50, 9.754516), (46.193977, 50, 19.134172), (41.573483, 50, 27.778511), (35.35534, 50, 35.35534), (27.778511, 50, 41.573483), (19.134172, 50, 46.193977), (9.754516, 50, 49.039265), (3.0616169e-15, 50, 50), (-9.754516, 50, 49.039265), (-19.134172, 50, 46.193977), (-27.778511, 50, 41.573483), (-35.35534, 50, 35.35534), (-41.573483, 50, 27.778511), (-46.193977, 50, 19.134172), (-49.039265, 50, 9.754516), (-50, 50, 6.1232338e-15), (-49.039265, 50, -9.754516), (-46.193977, 50, -19.134172), (-41.573483, 50, -27.778511), (-35.35534, 50, -35.35534), (-27.778511, 50, -41.573483), (-19.134172, 50, -46.193977), (-9.754516, 50, -49.039265), (-9.184851e-15, 50, -50), (9.754516, 50, -49.039265), (19.134172, 50, -46.193977), (27.778511, 50, -41.573483), (35.35534, 50, -35.35534), (41.573483, 50, -27.778511), (46.193977, 50, -19.134172), (49.039265, 50, -9.754516)]
        float2[] primvars:st = [(1, 0), (1, 1), (0.96875, 1), (0.96875, 0), (0.96875, 0), (0.96875, 1), (0.9375, 1), (0.9375, 0), (0.9375, 0), (0.9375, 1), (0.90625, 1), (0.90625, 0), (0.90625, 0), (0.90625, 1), (0.875, 1), (0.875, 0), (0.875, 0), (0.875, 1), (0.84375, 1), (0.84375, 0), (0.84375, 0), (0.84375, 1), (0.8125, 1), (0.8125, 0), (0.8125, 0), (0.8125, 1), (0.78125, 1), (0.78125, 0), (0.78125, 0), (0.78125, 1), (0.75, 1), (0.75, 0), (0.75, 0), (0.75, 1), (0.71875, 1), (0.71875, 0), (0.71875, 0), (0.71875, 1), (0.6875, 1), (0.6875, 0), (0.6875, 0), (0.6875, 1), (0.65625, 1), (0.65625, 0), (0.65625, 0), (0.65625, 1), (0.625, 1), (0.625, 0), (0.625, 0), (0.625, 1), (0.59375, 1), (0.59375, 0), (0.59375, 0), (0.59375, 1), (0.5625, 1), (0.5625, 0), (0.5625, 0), (0.5625, 1), (0.53125, 1), (0.53125, 0), (0.53125, 0), (0.53125, 1), (0.5, 1), (0.5, 0), (0.5, 0), (0.5, 1), (0.46875, 1), (0.46875, 0), (0.46875, 0), (0.46875, 1), (0.4375, 1), (0.4375, 0), (0.4375, 0), (0.4375, 1), (0.40625, 1), (0.40625, 0), (0.40625, 0), (0.40625, 1), (0.375, 1), (0.375, 0), (0.375, 0), (0.375, 1), (0.34375, 1), (0.34375, 0), (0.34375, 0), (0.34375, 1), (0.3125, 1), (0.3125, 0), (0.3125, 0), (0.3125, 1), (0.28125, 1), (0.28125, 0), (0.28125, 0), (0.28125, 1), (0.25, 1), (0.25, 0), (0.25, 0), (0.25, 1), (0.21875, 1), (0.21875, 0), (0.21875, 0), (0.21875, 1), (0.1875, 1), (0.1875, 0), (0.1875, 0), (0.1875, 1), (0.15625, 1), (0.15625, 0), (0.15625, 0), (0.15625, 1), (0.125, 1), (0.125, 0), (0.125, 0), (0.125, 1), (0.09375, 1), (0.09375, 0), (0.09375, 0), (0.09375, 1), (0.0625, 1), (0.0625, 0), (0.0625, 0), (0.0625, 1), (0.03125, 1), (0.03125, 0), (0.03125, 0), (0.03125, 1), (0, 1), (0, 0), (0.5, 0.5), (1, 0.5), (0.9903926, 0.59754515), (0.5, 0.5), (0.9903926, 0.59754515), (0.96193975, 0.6913417), (0.5, 0.5), (0.96193975, 0.6913417), (0.9157348, 0.7777851), (0.5, 0.5), (0.9157348, 0.7777851), (0.8535534, 0.8535534), (0.5, 0.5), (0.8535534, 0.8535534), (0.7777851, 0.9157348), (0.5, 0.5), (0.7777851, 0.9157348), (0.6913417, 0.96193975), (0.5, 0.5), (0.6913417, 0.96193975), (0.59754515, 0.9903926), (0.5, 0.5), (0.59754515, 0.9903926), (0.5, 1), (0.5, 0.5), (0.5, 1), (0.40245485, 0.9903926), (0.5, 0.5), (0.40245485, 0.9903926), (0.30865827, 0.96193975), (0.5, 0.5), (0.30865827, 0.96193975), (0.22221488, 0.9157348), (0.5, 0.5), (0.22221488, 0.9157348), (0.14644662, 0.8535534), (0.5, 0.5), (0.14644662, 0.8535534), (0.084265195, 0.7777851), (0.5, 0.5), (0.084265195, 0.7777851), (0.038060233, 0.6913417), (0.5, 0.5), (0.038060233, 0.6913417), (0.00960736, 0.59754515), (0.5, 0.5), (0.00960736, 0.59754515), (0, 0.5), (0.5, 0.5), (0, 0.5), (0.00960736, 0.40245485), (0.5, 0.5), (0.00960736, 0.40245485), (0.038060233, 0.30865827), (0.5, 0.5), (0.038060233, 0.30865827), (0.084265195, 0.22221488), (0.5, 0.5), (0.084265195, 0.22221488), (0.14644662, 0.14644662), (0.5, 0.5), (0.14644662, 0.14644662), (0.22221488, 0.084265195), (0.5, 0.5), (0.22221488, 0.084265195), (0.30865827, 0.038060233), (0.5, 0.5), (0.30865827, 0.038060233), (0.40245485, 0.00960736), (0.5, 0.5), (0.40245485, 0.00960736), (0.5, 0), (0.5, 0.5), (0.5, 0), (0.59754515, 0.00960736), (0.5, 0.5), (0.59754515, 0.00960736), (0.6913417, 0.038060233), (0.5, 0.5), (0.6913417, 0.038060233), (0.7777851, 0.084265195), (0.5, 0.5), (0.7777851, 0.084265195), (0.8535534, 0.14644662), (0.5, 0.5), (0.8535534, 0.14644662), (0.9157348, 0.22221488), (0.5, 0.5), (0.9157348, 0.22221488), (0.96193975, 0.30865827), (0.5, 0.5), (0.96193975, 0.30865827), (0.9903926, 0.40245485), (0.5, 0.5), (0.9903926, 0.40245485), (1, 0.5), (0.5, 0.5), (0.00960736, 0.59754515), (0, 0.5), (0.5, 0.5), (0.038060233, 0.6913417), (0.00960736, 0.59754515), (0.5, 0.5), (0.084265195, 0.7777851), (0.038060233, 0.6913417), (0.5, 0.5), (0.14644662, 0.8535534), (0.084265195, 0.7777851), (0.5, 0.5), (0.22221488, 0.9157348), (0.14644662, 0.8535534), (0.5, 0.5), (0.30865827, 0.96193975), (0.22221488, 0.9157348), (0.5, 0.5), (0.40245485, 0.9903926), (0.30865827, 0.96193975), (0.5, 0.5), (0.5, 1), (0.40245485, 0.9903926), (0.5, 0.5), (0.59754515, 0.9903926), (0.5, 1), (0.5, 0.5), (0.6913417, 0.96193975), (0.59754515, 0.9903926), (0.5, 0.5), (0.7777851, 0.9157348), (0.6913417, 0.96193975), (0.5, 0.5), (0.8535534, 0.8535534), (0.7777851, 0.9157348), (0.5, 0.5), (0.9157348, 0.7777851), (0.8535534, 0.8535534), (0.5, 0.5), (0.96193975, 0.6913417), (0.9157348, 0.7777851), (0.5, 0.5), (0.9903926, 0.59754515), (0.96193975, 0.6913417), (0.5, 0.5), (1, 0.5), (0.9903926, 0.59754515), (0.5, 0.5), (0.9903926, 0.40245485), (1, 0.5), (0.5, 0.5), (0.96193975, 0.30865827), (0.9903926, 0.40245485), (0.5, 0.5), (0.9157348, 0.22221488), (0.96193975, 0.30865827), (0.5, 0.5), (0.8535534, 0.14644662), (0.9157348, 0.22221488), (0.5, 0.5), (0.7777851, 0.084265195), (0.8535534, 0.14644662), (0.5, 0.5), (0.6913417, 0.038060233), (0.7777851, 0.084265195), (0.5, 0.5), (0.59754515, 0.00960736), (0.6913417, 0.038060233), (0.5, 0.5), (0.5, 0), (0.59754515, 0.00960736), (0.5, 0.5), (0.40245485, 0.00960736), (0.5, 0), (0.5, 0.5), (0.30865827, 0.038060233), (0.40245485, 0.00960736), (0.5, 0.5), (0.22221488, 0.084265195), (0.30865827, 0.038060233), (0.5, 0.5), (0.14644662, 0.14644662), (0.22221488, 0.084265195), (0.5, 0.5), (0.084265195, 0.22221488), (0.14644662, 0.14644662), (0.5, 0.5), (0.038060233, 0.30865827), (0.084265195, 0.22221488), (0.5, 0.5), (0.00960736, 0.40245485), (0.038060233, 0.30865827), (0.5, 0.5), (0, 0.5), (0.00960736, 0.40245485)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (457.237, 63.4554, 146.138)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Mesh "Plane" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
    )
    {
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 2, 3, 1]
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            interpolation = "faceVarying"
        )
        bool physics:kinematicEnabled = 0
        bool physics:rigidBodyEnabled = 1
        point3f[] points = [(-50, 0, -50), (50, 0, -50), (-50, 0, 50), (50, 0, 50)]
        float2[] primvars:st = [(1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (192.101, 33.1789, 47.7178)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Mesh "Cube2" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxCookedDataAPI:triangleMesh"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 0, 4, 5, 1, 1, 5, 6, 3, 2, 3, 6, 7, 0, 2, 7, 4, 4, 7, 6, 5]
        normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            interpolation = "faceVarying"
        )
        token physics:approximation = "meshSimplification"
        uchar[] physxCookedData:triangleMesh:buffer = [7, 97, 230, 7, 230, 190, 203, 90, 58, 86, 26, 77, 186, 248, 168, 243, 123, 78, 88, 83, 1, 77, 69, 83, 72, 16, 0, 0, 0, 1, 0, 0, 0, 182, 1, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 1, 5, 6, 1, 6, 2, 0, 4, 5, 0, 5, 1, 0, 1, 2, 0, 2, 3, 3, 2, 6, 3, 6, 7, 0, 3, 7, 0, 7, 4, 4, 7, 6, 4, 6, 5, 11, 0, 0, 0, 4, 5, 2, 3, 0, 1, 6, 7, 8, 9, 10, 11, 3, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 8, 0, 0, 0, 5, 0, 0, 0, 7, 0, 0, 0, 9, 0, 0, 0, 8, 0, 0, 0, 10, 0, 0, 0, 2, 0, 0, 0, 9, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 66, 86, 52, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 55, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 12, 0, 0, 0, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 0, 5, 1, 0, 4, 5, 1, 5, 6, 1, 6, 2, 0, 1, 2, 0, 2, 3, 0, 3, 7, 0, 7, 4, 4, 7, 6, 4, 6, 5, 3, 2, 6, 3, 6, 7, 1, 0, 0, 128, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 128, 0, 0, 0, 0, 2, 0, 0, 128, 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 128, 0, 0, 0, 0, 4, 0, 0, 128, 10, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 11, 0, 0, 0, 7, 0, 0, 128, 0, 0, 0, 0, 6, 0, 0, 128, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 128, 0, 0, 0, 0, 8, 0, 0, 128, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 11, 0, 0, 128, 0, 0, 0, 0, 10, 0, 0, 128, 8, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 66, 86, 51, 50, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 22, 0, 0, 0, 26, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 10, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 11, 0, 0, 0]
        point3f[] points = [(-50, -50, -50), (50, -50, -50), (-50, -50, 50), (50, -50, 50), (-50, 50, -50), (50, 50, -50), (50, 50, 50), (-50, 50, 50)]
        float2[] primvars:st = [(1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 65.379, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Mesh "Cube3" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 0, 4, 5, 1, 1, 5, 6, 3, 2, 3, 6, 7, 0, 2, 7, 4, 4, 7, 6, 5]
        normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-50, -50, -50), (50, -50, -50), (-50, -50, 50), (50, -50, 50), (-50, 50, -50), (50, 50, -50), (50, 50, 50), (-50, 50, 50)]
        float2[] primvars:st = [(1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (125.953, 73.2888, 195.228)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

