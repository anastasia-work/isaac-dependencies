#usda 1.0
(
    customLayerData = {
        dictionary audioSettings = {
            double dopplerLimit = 2
            double dopplerScale = 1
            string enableDistanceDelay = "off"
            string enableDoppler = "off"
            string enableInterauralDelay = "off"
            double nonSpatialTimeScale = 1
            double spatialTimeScale = 1
            double speedOfSound = 340
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (-10.365496475213433, 1.3441847833805254, -0.21458274020706414)
                double3 target = (4.483959590869457, 1.1978262445003454, -1.0496689933123828)
            }
            dictionary Right = {
                double3 position = (-50000, 0, -1.1102230246251565e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (-4.329780281177466e-12, 50000, 1.1102230246251565e-11)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./ogn_contact_bumper.usda"
            dictionary muteness = {
            }
        }
        dictionary physicsSettings = {
        }
        int refinementOverrideImplVersion = 0
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            bool "rtx:ecoMode:enabled" = 1
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            int "rtx:hydra:curves:splits" = 2
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            bool "rtx:post:lensFlares:enabled" = 1
            double "rtx:post:lensFlares:flareScale" = 0.03
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.16923925, 0.3369665, 0.4135021)
            double "rtx:sceneDb:ambientLightIntensity" = 1.0599999763071537
        }
    }
    defaultPrim = "World"
    doc = """Generated from Composed Stage of root layer D:\\dev\\git\\physics\\data\\usd\\assets\\ogn_contact_bumper.usda
"""
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Y"
)

def Xform "World"
{
    rel material:binding (
        bindMaterialAs = "weakerThanDescendants"
    )
    double3 xformOp:rotateXYZ = (0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def Xform "Bumper"
    {
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Xform "BumperRigidBody" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysxContactReportAPI"]
        )
        {
            float physics:density = 0.01
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            vector3f physics:velocity = (0, 0, 0)
            float physxContactReport:threshold = 0
            float physxRigidBody:angularDamping = 50000
            bool physxRigidBody:disableGravity = 0
            int physxRigidBody:lockedPosAxis = 0
            int physxRigidBody:lockedRotAxis = 0
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def Cone "Bumper_top" (
                apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysicsFilteredPairsAPI", "MaterialBindingAPI"]
            )
            {
                uniform token axis = "Y"
                float3[] extent = [(-3.2, -1.75, -3.2), (3.2, 1.75, 3.2)]
                double height = 3.5
                rel material:binding = </World/Bumper/Looks/Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                bool physics:collisionEnabled = 1
                rel physics:filteredPairs
                double radius = 3.2
                custom bool refinementEnableOverride = 1
                custom int refinementLevel = 2
                quatf xformOp:orient = (6.123234e-17, 0, 0, 1)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 3.0000000447034836, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cylinder "Bumper_stem" (
                apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token axis = "Y"
                float3[] extent = [(-1.25, -1.75, -1.25), (1.25, 1.75, 1.25)]
                double height = 3.5
                rel material:binding = </World/Bumper/Looks/ClearcoatWhite> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 1.25
                custom bool refinementEnableOverride = 1
                custom int refinementLevel = 2
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 1.75, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Cylinder "Bumper_top_circle" (
                apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token axis = "Y"
                float3[] extent = [(-2.2, -0.025, -2.2), (2.2, 0.025, 2.2)]
                double height = 0.05
                rel material:binding = </World/Bumper/Looks/ClearcoatWhite> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 2.2
                custom bool refinementEnableOverride = 1
                custom int refinementLevel = 2
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 4.825, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Cylinder "Bumper_top_circle_inner" (
                apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token axis = "Y"
                float3[] extent = [(-1.2, -0.025, -1.2), (1.2, 0.025, 1.2)]
                double height = 0.05
                rel material:binding = </World/Bumper/Looks/ClearcoatRed> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 1.2
                custom bool refinementEnableOverride = 1
                custom int refinementLevel = 2
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 4.875, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Cylinder "Bumper_top_cap" (
                apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token axis = "Y"
                float3[] extent = [(-3.2, -0.025, -3.2), (3.2, 0.025, 3.2)]
                double height = 0.05
                rel material:binding = </World/Bumper/Looks/ClearcoatRed> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 3.2
                custom bool refinementEnableOverride = 1
                custom int refinementLevel = 2
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 4.775, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        def Cone "BumperBase" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            float3[] extent = [(-2.75, -0.3, -2.75), (2.75, 0.3, 2.75)]
            double height = 0.6
            rel material:binding = </World/Bumper/Looks/Metal> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double radius = 2.75
            custom bool refinementEnableOverride = 1
            custom int refinementLevel = 2
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0.3, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Scope "Looks"
        {
            def Material "Metal"
            {
                token outputs:mdl:displacement.connect = </World/Bumper/Looks/Metal/Shader.outputs:out>
                token outputs:mdl:surface.connect = </World/Bumper/Looks/Metal/Shader.outputs:out>
                token outputs:mdl:volume.connect = </World/Bumper/Looks/Metal/Shader.outputs:out>

                def Shader "Shader"
                {
                    reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:geometry_normal_roughness_strength", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:albedo_add = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = -1
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Add"
                        doc = "Adds a constant value to the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_brightness = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Brightness"
                        doc = "Multiplier for the diffuse color "
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.6666667, 0.6666667, 0.6666667) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Color"
                        doc = "This is the albedo base color"
                        hidden = false
                    )
                    color3f inputs:diffuse_tint = (0.6666666, 0.66665995, 0.66665995) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Albedo"
                        displayName = "Color Tint"
                        doc = "When enabled, this color value is multiplied over the final albedo color"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 1 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 0.19999999 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "ClearcoatWhite"
            {
                token outputs:mdl:displacement.connect = </World/Bumper/Looks/ClearcoatWhite/Shader.outputs:out>
                token outputs:mdl:surface.connect = </World/Bumper/Looks/ClearcoatWhite/Shader.outputs:out>
                token outputs:mdl:volume.connect = </World/Bumper/Looks/ClearcoatWhite/Shader.outputs:out>

                def Shader "Shader"
                {
                    reorder properties = ["inputs:diffuse_reflection_color", "inputs:diffuse_tint", "inputs:specular_reflection_roughness", "inputs:metalness", "inputs:specular_level", "inputs:enable_emission", "inputs:emission_color", "inputs:emission_intensity", "inputs:enable_opacity", "inputs:geometry_opacity", "inputs:geometry_opacity_threshold", "inputs:enable_coat", "inputs:coat_weight", "inputs:coat_color", "inputs:coat_transparency", "inputs:coat_roughness", "inputs:coat_ior", "inputs:clearcoat_geometry_normal", "inputs:geometry_normal"]
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBRBase.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBRBase"
                    color3f inputs:coat_color = (0.7633036, 0.7814917, 0.81856537) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Clearcoat"
                        displayName = "Clearcoat Tint"
                        doc = "Clearcoat is tinted and affects the underlying material"
                        hidden = false
                    )
                    float inputs:coat_transparency = 1 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Clearcoat"
                        displayName = "Clearcoat Transparency"
                        doc = "Adjusts the transparency of the coat. Can be turned into a fully opaque coat covering the underlying layer"
                        hidden = false
                    )
                    float inputs:coat_weight = 0.19 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Clearcoat"
                        displayName = "Clearcoat Weight"
                        doc = "Sets the weight for coat layer"
                        hidden = false
                    )
                    color3f inputs:diffuse_tint = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Tint"
                        doc = "When enabled, this color value is multiplied over the final albedo color"
                        hidden = false
                    )
                    bool inputs:enable_coat = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Clearcoat"
                        displayName = "Enable Clearcoat Layer"
                        doc = "Adds a coat layer on top of the material when enabled"
                        hidden = false
                    )
                    float inputs:metalness = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metalness"
                        doc = "Bias towards pure specular reflection"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "ClearcoatRed"
            {
                token outputs:mdl:displacement.connect = </World/Bumper/Looks/ClearcoatRed/Shader.outputs:out>
                token outputs:mdl:surface.connect = </World/Bumper/Looks/ClearcoatRed/Shader.outputs:out>
                token outputs:mdl:volume.connect = </World/Bumper/Looks/ClearcoatRed/Shader.outputs:out>

                def Shader "Shader"
                {
                    reorder properties = ["inputs:diffuse_reflection_color", "inputs:diffuse_tint", "inputs:specular_reflection_roughness", "inputs:metalness", "inputs:specular_level", "inputs:enable_emission", "inputs:emission_color", "inputs:emission_intensity", "inputs:enable_opacity", "inputs:geometry_opacity", "inputs:geometry_opacity_threshold", "inputs:enable_coat", "inputs:coat_weight", "inputs:coat_color", "inputs:coat_transparency", "inputs:coat_roughness", "inputs:coat_ior", "inputs:clearcoat_geometry_normal", "inputs:geometry_normal"]
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBRBase.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBRBase"
                    color3f inputs:coat_color = (0.7633036, 0.7814917, 0.81856537) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Clearcoat"
                        displayName = "Clearcoat Tint"
                        doc = "Clearcoat is tinted and affects the underlying material"
                        hidden = false
                    )
                    float inputs:coat_transparency = 1 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Clearcoat"
                        displayName = "Clearcoat Transparency"
                        doc = "Adjusts the transparency of the coat. Can be turned into a fully opaque coat covering the underlying layer"
                        hidden = false
                    )
                    float inputs:coat_weight = 0.19 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Clearcoat"
                        displayName = "Clearcoat Weight"
                        doc = "Sets the weight for coat layer"
                        hidden = false
                    )
                    color3f inputs:diffuse_tint = (1, 0, 0) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Tint"
                        doc = "When enabled, this color value is multiplied over the final albedo color"
                        hidden = false
                    )
                    bool inputs:enable_coat = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Clearcoat"
                        displayName = "Enable Clearcoat Layer"
                        doc = "Adds a coat layer on top of the material when enabled"
                        hidden = false
                    )
                    float inputs:metalness = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metalness"
                        doc = "Bias towards pure specular reflection"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        def OmniGraph "Bump"
        {
            token evaluationMode = "Automatic"
            token evaluator:type = "execution"
            token fabricCacheBacking = "Shared"
            int2 fileFormatVersion = (1, 6)
            token pipelineStage = "pipelineStageSimulation"

            def OmniGraphNode "branch" (
                apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom bool inputs:condition = 0
                bool inputs:condition.connect = </World/Bumper/Bump/ends_with_01.outputs:isSuffix>
                custom uint inputs:execIn
                uint inputs:execIn.connect = [
                    </World/Bumper/Bump/on_contact_event_for_prims.outputs:execOut>,
                    </World/Bumper/Bump/on_contact_event.outputs:foundExecOut>,
                ]
                token node:type = "omni.graph.action.Branch"
                int node:typeVersion = 1
                custom uint outputs:execFalse (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom uint outputs:execTrue (
                    customData = {
                        bool isExecution = 1
                    }
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (132.02065, 8.042948)
            }

            def OmniGraphNode "ends_with_01" (
                apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom string inputs:suffix = "Pinball"
                custom string inputs:value = ""
                string inputs:value.connect = </World/Bumper/Bump/to_string_01.outputs:converted>
                token node:type = "omni.graph.nodes.EndsWith"
                int node:typeVersion = 1
                custom bool outputs:isSuffix
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (141.08406, 213.97482)
            }

            def OmniGraphNode "branch_01" (
                apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom bool inputs:condition = 0
                bool inputs:condition.connect = </World/Bumper/Bump/ends_with_01.outputs:isSuffix>
                custom uint inputs:execIn
                uint inputs:execIn.connect = [
                    </World/Bumper/Bump/on_contact_event_for_prims_01.outputs:execOut>,
                    </World/Bumper/Bump/on_contact_event.outputs:lostExecOut>,
                ]
                token node:type = "omni.graph.action.Branch"
                int node:typeVersion = 1
                custom uint outputs:execFalse (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom uint outputs:execTrue (
                    customData = {
                        bool isExecution = 1
                    }
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (140.30508, 375.7735)
            }

            def OmniGraphNode "to_string_01" (
                apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom token inputs:value
                token inputs:value.connect = [
                    </World/Bumper/Bump/on_contact_event_for_prims_01.outputs:contactingPrimPath>,
                    </World/Bumper/Bump/on_contact_event.outputs:contactingBody>,
                ]
                token node:type = "omni.graph.nodes.ToString"
                int node:typeVersion = 1
                custom string outputs:converted
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-78.91973, 219.90773)
            }

            def OmniGraphNode "write_prim_attribute_03" (
                apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom uint inputs:execIn
                uint inputs:execIn.connect = </World/Bumper/Bump/branch.outputs:execTrue>
                custom token inputs:name = "drive:linear:physics:targetPosition"
                custom rel inputs:prim = </World/Bumper/PrismaticJoint>
                custom token inputs:primPath
                custom bool inputs:usdWriteBack = 0
                custom bool inputs:usePath = 0
                custom token inputs:value = "-3.3" (
                    customData = {
                        dictionary omni = {
                            dictionary graph = {
                                float attrValue = -3.3
                                string resolvedType = "float"
                            }
                        }
                    }
                )
                token inputs:value.connect = </World/Bumper/Bump/constant_float_01.inputs:value>
                token node:type = "omni.graph.nodes.WritePrimAttribute"
                int node:typeVersion = 1
                custom uint outputs:execOut (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom bool state:correctlySetup
                custom uint64 state:destAttrib
                custom uint64 state:destPath
                custom uint64 state:destPathToken
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (370.0335, 9.285263)
            }

            def OmniGraphNode "write_prim_attribute_04" (
                apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom uint inputs:execIn
                uint inputs:execIn.connect = </World/Bumper/Bump/branch_01.outputs:execTrue>
                custom token inputs:name = "drive:linear:physics:targetPosition"
                custom rel inputs:prim = </World/Bumper/PrismaticJoint>
                custom token inputs:primPath
                custom bool inputs:usdWriteBack = 0
                custom bool inputs:usePath = 0
                custom token inputs:value
                token inputs:value.connect = </World/Bumper/Bump/constant_float.inputs:value>
                token node:type = "omni.graph.nodes.WritePrimAttribute"
                int node:typeVersion = 1
                custom uint outputs:execOut (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom bool state:correctlySetup
                custom uint64 state:destAttrib
                custom uint64 state:destPath
                custom uint64 state:destPathToken
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (383.34998, 379.47418)
            }

            def OmniGraphNode "constant_float" (
                apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom float inputs:value = 0
                token node:type = "omni.graph.nodes.ConstantFloat"
                int node:typeVersion = 1
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (386.97192, 621.88635)
            }

            def OmniGraphNode "constant_float_01" (
                apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom float inputs:value = -3.3
                token node:type = "omni.graph.nodes.ConstantFloat"
                int node:typeVersion = 1
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (392.34848, 248.99358)
            }

            def OmniGraphNode "on_contact_event" (
                apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom token[] inputs:bodyPaths = []
                custom rel inputs:targetBodies = </World/Bumper/BumperRigidBody>
                token node:type = "omni.physx.graph.OnContactEventBasic"
                int node:typeVersion = 1
                custom token outputs:contactingBody
                custom uint outputs:foundExecOut (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom token outputs:inputBody
                custom uint outputs:lostExecOut (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom uint outputs:persistsExecOut (
                    customData = {
                        bool isExecution = 1
                    }
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-326.30093, 159.45023)
            }
        }

        def PhysicsPrismaticJoint "PrismaticJoint" (
            apiSchemas = ["PhysicsDriveAPI:linear"]
        )
        {
            float drive:linear:physics:stiffness = 50000
            float drive:linear:physics:targetPosition = 0
            uniform token drive:linear:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </World/Bumper/BumperBase>
            rel physics:body1 = </World/Bumper/BumperRigidBody/Bumper_top>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            bool physics:jointEnabled = 1
            point3f physics:localPos0 = (0, -0.3, 0)
            point3f physics:localPos1 = (-3.6739406e-16, 3, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (-6.123234e-17, 0, 0, 1)
            float physics:lowerLimit = -inf
            float physics:upperLimit = inf
        }
    }
}

