#usda 1.0
(
    customLayerData = {
        dictionary audioSettings = {
            double dopplerLimit = 2
            double dopplerScale = 1
            string enableDistanceDelay = "off"
            string enableDoppler = "off"
            string enableInterauralDelay = "off"
            double nonSpatialTimeScale = 1
            double spatialTimeScale = 1
            double speedOfSound = 340
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (-63.589012452263496, 82.35504808816016, -7.745825588266808)
                double3 target = (220.99645739630984, -215.44288609981095, -24.601683189500104)
            }
            dictionary Right = {
                double3 position = (-50000, 0, -1.1102230246251565e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (-4.329780281177466e-12, 50000, 1.1102230246251565e-11)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./ogn_contact_main.usda"
            dictionary muteness = {
            }
        }
        dictionary physicsSettings = {
        }
        int refinementOverrideImplVersion = 0
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            bool "rtx:ecoMode:enabled" = 1
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            int "rtx:hydra:curves:splits" = 2
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            bool "rtx:post:lensFlares:enabled" = 1
            double "rtx:post:lensFlares:flareScale" = 0.03
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.16923925, 0.3369665, 0.4135021)
            double "rtx:sceneDb:ambientLightIntensity" = 1.0599999763071537
        }
    }
    defaultPrim = "World"
    doc = """Generated from Composed Stage of root layer D:\\dev\\git\\physics\\data\\usd\\assets\\ogn_contact_main.usda
"""
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Y"
)

def Xform "World"
{
    rel material:binding (
        bindMaterialAs = "weakerThanDescendants"
    )

    def PhysicsScene "PhysicsScene"
    {
        vector3f physics:gravityDirection = (0, -1, 0)
        float physics:gravityMagnitude = 980
    }

    def Scope "Looks"
    {
        def Material "Base"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Base/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Base/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Base/Shader.outputs:out>

            def Shader "Shader"
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:geometry_normal_roughness_strength", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = "This is the albedo base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (0.014100272, 0.1859217, 0.37130803) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.39 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Side"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Side/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Side/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Side/Shader.outputs:out>

            def Shader "Shader"
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:geometry_normal_roughness_strength", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = "This is the albedo base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (0.99999, 0.9999948, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.39 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    def DiskLight "DiskLight" (
        apiSchemas = ["ShapingAPI"]
    )
    {
        color3f color = (1, 0.95780593, 0.7468355)
        float colorTemperature = 6500
        float exposure = 3.6000001
        float intensity = 6000
        bool normalize = 0
        float radius = 1000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        token visibility = "inherited"
        double3 xformOp:rotateXYZ = (-90, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 3000, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Side_01" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding (
            bindMaterialAs = "weakerThanDescendants"
        )
        token visibility = "inherited"
        double3 xformOp:rotateXYZ = (0, -0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 9.094947017729282e-13, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Cube "Edge" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Side> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (35, 12.5, 5)
            double3 xformOp:translate = (0, 1.25, 15)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Cube "Edge_inclined" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Base> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            double3 xformOp:rotateXYZ = (-22.5, 0, 0)
            double3 xformOp:scale = (25, 2.5, 5)
            double3 xformOp:translate = (0, -0.2518094409898588, 10.69097)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Cube "Corner_inclined" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Base> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (-20, 45.00000000000182, 0)
            double3 xformOp:scale = (2.5, 2.5, 6)
            double3 xformOp:translate = (10.05387, -0.2852038348846213, 10.05387)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Cube "Corner" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Side> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (0, 45, 0)
            double3 xformOp:scale = (2.5, 7.5, 2.5)
            double3 xformOp:translate = (12.5, 3.75, 12.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }

    def Cube "Base" (
        apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        rel material:binding = </World/Looks/Base> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:collisionEnabled = 1
        double size = 1
        double3 xformOp:rotateXYZ = (0, -0, 0)
        double3 xformOp:scale = (25, 5, 25)
        double3 xformOp:translate = (0, -2.5, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Side_02" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding (
            bindMaterialAs = "weakerThanDescendants"
        )
        token visibility = "inherited"
        double3 xformOp:rotateXYZ = (0, 90, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 9.094947017729282e-13, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Cube "Edge" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Side> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (35, 12.5, 5)
            double3 xformOp:translate = (0, 1.25, 15)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Cube "Edge_inclined" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Base> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            double3 xformOp:rotateXYZ = (-22.5, 0, 0)
            double3 xformOp:scale = (25, 2.5, 5)
            double3 xformOp:translate = (0, -0.2518094409898588, 10.69097)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Cube "Corner_inclined" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Base> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (-20, 45.00000000000182, 0)
            double3 xformOp:scale = (2.5, 2.5, 6)
            double3 xformOp:translate = (10.05387, -0.2852038348846213, 10.05387)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Cube "Corner" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Side> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (0, 45, 0)
            double3 xformOp:scale = (2.5, 7.5, 2.5)
            double3 xformOp:translate = (12.5, 3.75, 12.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }

    def Xform "Side_03" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding (
            bindMaterialAs = "weakerThanDescendants"
        )
        token visibility = "inherited"
        double3 xformOp:rotateXYZ = (0, 180, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 9.094947017729282e-13, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Cube "Edge" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Side> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (35, 12.5, 5)
            double3 xformOp:translate = (0, 1.25, 15)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Cube "Edge_inclined" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Base> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            double3 xformOp:rotateXYZ = (-22.5, 0, 0)
            double3 xformOp:scale = (25, 2.5, 5)
            double3 xformOp:translate = (0, -0.2518094409898588, 10.69097)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Cube "Corner_inclined" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Base> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (-20, 45.00000000000182, 0)
            double3 xformOp:scale = (2.5, 2.5, 6)
            double3 xformOp:translate = (10.05387, -0.2852038348846213, 10.05387)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Cube "Corner" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Side> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (0, 45, 0)
            double3 xformOp:scale = (2.5, 7.5, 2.5)
            double3 xformOp:translate = (12.5, 3.75, 12.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }

    def Xform "Side_04" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding (
            bindMaterialAs = "weakerThanDescendants"
        )
        token visibility = "inherited"
        double3 xformOp:rotateXYZ = (0, 270, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 9.094947017729282e-13, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Cube "Edge" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Side> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (35, 12.5, 5)
            double3 xformOp:translate = (0, 1.25, 15)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Cube "Edge_inclined" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Base> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            double3 xformOp:rotateXYZ = (-22.5, 0, 0)
            double3 xformOp:scale = (25, 2.5, 5)
            double3 xformOp:translate = (0, -0.2518094409898588, 10.69097)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Cube "Corner_inclined" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Base> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (-20, 45.00000000000182, 0)
            double3 xformOp:scale = (2.5, 2.5, 6)
            double3 xformOp:translate = (10.05387, -0.2852038348846213, 10.05387)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Cube "Corner" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/Side> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            double size = 1
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (0, 45, 0)
            double3 xformOp:scale = (2.5, 7.5, 2.5)
            double3 xformOp:translate = (12.5, 3.75, 12.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }

    def Xform "GroundPlane"
    {
        token visibility = "invisible"
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, -2, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]
            point3f[] points = [(-2500, 0, -2500), (2500, 0, -2500), (2500, 0, 2500), (-2500, 0, 2500)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
        }

        def Plane "CollisionPlane" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Y"
            uniform token purpose = "guide"
        }
    }
}

