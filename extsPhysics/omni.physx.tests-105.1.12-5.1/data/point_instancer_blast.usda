#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (931.7612460934135, 934.3875938371215, 926.0295084800011)
                double3 target = (361.9787416636283, 597.5562292931689, 367.5561165398167)
            }
            dictionary Right = {
                double3 position = (-50000, 0, -1.1102230246251565e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (-4.329780281177466e-12, 50000, 1.1102230246251565e-11)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{

    def Mesh "Cube" (
        active = false
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 0, 4, 5, 1, 1, 5, 6, 3, 2, 3, 6, 7, 0, 2, 7, 4, 4, 7, 6, 5]
        normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            interpolation = "faceVarying"
        )
        uniform token physics:approximation = "convexHull"
        bool physics:collisionEnabled = 1
        bool physics:kinematicEnabled = 0
        bool physics:rigidBodyEnabled = 1
        int physxConvexHullCollision:hullVertexLimit = 32
        float physxConvexHullCollision:minThickness = 0.001
        point3f[] points = [(-50, -50, -50), (50, -50, -50), (-50, -50, 50), (50, -50, 50), (-50, 50, -50), (50, 50, -50), (50, 50, 50), (-50, 50, 50)]
        float2[] primvars:st = [(1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        quatf xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 243.488, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def PhysicsScene "PhysicsScene"
    {
        vector3f physics:gravityDirection = (0, -1, 0)
        float physics:gravityMagnitude = 980
    }

    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]
            point3f[] points = [(-2500, 0, -2500), (2500, 0, -2500), (2500, 0, 2500), (-2500, 0, 2500)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Y"
            uniform token purpose = "guide"
        }
    }

    def Xform "Cube__blastBase" (
        active = true
    )
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        float3 xformOp:rotateXYZ = (0, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Scope "chunks"
        {
            reorder nameChildren = ["c0", "c0_children"]
            def Mesh "c0" (
                active = false
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
            )
            {
                uniform bool doubleSided = 0
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                int[] faceVertexIndices = [0, 1, 2, 2, 1, 3, 4, 5, 6, 6, 5, 7, 8, 9, 10, 10, 9, 11, 12, 13, 14, 14, 13, 15, 16, 17, 18, 18, 17, 19, 20, 21, 22, 22, 21, 23]
                normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                    interpolation = "faceVarying"
                )
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                point3f[] points = [(-50, -50, 50), (-50, -50, -50), (50, -50, 50), (50, -50, -50), (50, -50, -50), (-50, -50, -50), (50, 50, -50), (-50, 50, -50), (50, -50, 50), (50, -50, -50), (50, 50, 50), (50, 50, -50), (-50, 50, 50), (-50, -50, 50), (50, 50, 50), (50, -50, 50), (-50, 50, -50), (-50, -50, -50), (-50, 50, 50), (-50, -50, 50), (50, 50, -50), (-50, 50, -50), (50, 50, 50), (-50, 50, 50)]
                float2[] primvars:st = [(1, 1), (1, 0), (0, 1), (0, 1), (1, 0), (0, 0), (0, 0), (1, 0), (0, 1), (0, 1), (1, 0), (1, 1), (1, 1), (1, 0), (0, 1), (0, 1), (1, 0), (0, 0), (1, 1), (1, 0), (0, 1), (0, 1), (1, 0), (0, 0), (0, 0), (1, 0), (0, 1), (0, 1), (1, 0), (1, 1), (0, 0), (1, 0), (0, 1), (0, 1), (1, 0), (1, 1)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
                float3 xformOp:rotateXYZ = (0, -0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Scope "c0_children"
            {
                def Mesh "c1" (
                    active = false
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform bool doubleSided = 0
                    float3[] extent = [(-50, -50, -50), (38.781525, 50, 50)]
                    int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                    int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 5, 4, 6, 7, 8, 9, 9, 8, 10, 11, 12, 13, 13, 12, 14, 14, 12, 15, 16, 17, 18, 18, 17, 19, 19, 17, 20, 21, 22, 23, 24, 25, 26, 26, 25, 27, 27, 25, 28, 28, 25, 29]
                    normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0.7857656, -0.033273, 0.6176289), (0.7857656, -0.033273, 0.6176289), (0.7857656, -0.033273, 0.6176289), (0.7855991, -0.36342964, 0.5007524), (0.7855991, -0.36342964, 0.5007524), (0.7855991, -0.36342964, 0.5007524), (0.7855991, -0.36342964, 0.5007524), (0.7855991, -0.36342964, 0.5007524), (0.7855991, -0.36342964, 0.5007524), (0.7855991, -0.36342964, 0.5007524), (0.7855991, -0.36342964, 0.5007524), (0.7855991, -0.36342964, 0.5007524), (0.7855991, -0.36342964, 0.5007524), (0.7855991, -0.36342964, 0.5007524), (0.7855991, -0.36342964, 0.5007524)] (
                        interpolation = "faceVarying"
                    )
                    uniform token physics:approximation = "convexHull"
                    bool physics:collisionEnabled = 1
                    point3f[] points = [(-50, -50, -50), (-7.4799356, -50, -50), (-50, -50, 16.707062), (-50, 50, -50), (38.781525, 50, -50), (-50, -50, -50), (-7.4799356, -50, -50), (-50, -4.12724, 50), (-39.55925, 18.441757, 50), (-50, 50, 50), (-38.22293, 50, 50), (-50, -50, -50), (-50, -50, 16.707062), (-50, 50, -50), (-50, 50, 50), (-50, -4.12724, 50), (-50, 50, 50), (-38.22293, 50, 50), (-50, 50, -50), (38.781525, 50, -50), (31.92842, 50, -39.2486), (31.92842, 50, -39.2486), (-38.22293, 50, 50), (-39.55925, 18.441757, 50), (31.92842, 50, -39.2486), (-39.55925, 18.441757, 50), (38.781525, 50, -50), (-7.4799356, -50, -50), (-50, -50, 16.707062), (-50, -4.12724, 50)]
                    float2[] primvars:st = [(1, 0), (0.57479936, 0), (1, 0.6670706), (1, 1), (0.11218478, 1), (1, 0), (1, 0), (0.11218478, 1), (0.57479936, 0), (1, 0.4587276), (0.8955925, 0.6844176), (1, 1), (1, 1), (0.8955925, 0.6844176), (0.88222927, 1), (1, 0), (1, 0.6670706), (0, 0), (0, 0), (1, 0.6670706), (0, 1), (0, 1), (1, 0.6670706), (0.5412724, 1), (1, 1), (0.88222927, 1), (1, 0), (1, 0), (0.88222927, 1), (0.11218478, 0), (0.11218478, 0), (0.88222927, 1), (0.18071578, 0.107513994), (-0.47816262, 0.52657527), (-0.526173, -0.60759735), (-0.21104752, -0.62920237), (-0.17412256, 0.6778143), (-0.44293863, -0.47756878), (-0.11097176, 0.78857416), (-0.11097052, 0.7885744), (-0.44293916, -0.4775682), (0.6983449, 0.040897254), (0.6983449, 0.040897254), (-0.44293916, -0.4775682), (0.30652466, -0.6463114), (0.30652466, -0.6463114), (-0.44293916, -0.47756818), (-0.2602848, -0.6463114)] (
                        interpolation = "faceVarying"
                    )
                    uniform token subdivisionScheme = "none"
                    float3 xformOp:rotateXYZ = (0, -0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                }
            }
        }

        def Scope "templates" (
            hidden = true
        )
        {
            def PointInstancer "actorTemplate" (
                active = false
            )
            {
                prepend rel prototypes = [
                    </World/Cube__blastBase/templates/chunkTemplate/chunks/c0>,
                    </World/Cube__blastBase/templates/chunkTemplate/chunks/c0_children/c1>,
                ]
                quatf xformOp:orient
                float3 xformOp:scale
                float3 xformOp:translate
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "chunkTemplate"
            {
                def Scope "chunks"
                {
                    def Xform "c0" (
                        instanceable = true
                    )
                    {
                        def Mesh "mesh" (
                            active = true
                            prepend references = </World/Cube__blastBase/chunks/c0>
                        )
                        {
                        }
                    }

                    def Scope "c0_children"
                    {
                        def Xform "c1" (
                            instanceable = true
                        )
                        {
                            def Mesh "mesh" (
                                active = true
                                prepend references = </World/Cube__blastBase/chunks/c0_children/c1>
                            )
                            {
                            }
                        }
                    }
                }
            }
        }
    }

    def Xform "Cube__blastInst" (
        active = true
        instanceable = false
        kind = "component"
    )
    {
        float3 xformOp:rotateXYZ = (0, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 243.488, 155.412)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def PointInstancer "a0" (
            active = true
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxContactReportAPI"]
            customData = {
                dictionary blast = {
                    int index = 0
                }
            }
            prepend inherits = </World/Cube__blastBase/templates/actorTemplate>
            instanceable = false
        )
        {
            vector3f physics:angularVelocity = (0, 0, 0)
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            vector3f physics:velocity = (0, 0, 0)
            float physxContactReport:threshold = 12300
            point3f[] positions = [(0, 0, 0)]
            int[] protoIndices = [0]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}

