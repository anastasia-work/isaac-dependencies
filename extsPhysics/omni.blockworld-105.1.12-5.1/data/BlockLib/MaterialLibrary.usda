#usda 1.0
(
"""
# USDA 1.0 file made by Mineways version 8.02, http://mineways.com
# Terrain file name: default
# Color scheme: Standard
# Thu Feb 25 11:50:52 2021

# Selection location min to max: 12, 63, 4 to 3073, 255, 128
#   Non-empty selection location min to max: 12, 63, 4 to 3068, 65, 127

# Set render type: USD 1.0
# Units for the model vertex data itself: meters

# 79884 vertices, 47404 faces (94808 triangles), 1193 blocks, 9810 billboards/bits
# block dimensions: X=3058 by Y=4 (height) by Z=125 blocks
# Elevation shading: no
# Lighting: no
# File type: Export tiles for textures to directory textures
# Texture output RGB: YES
# Texture output A: YES
# Texture output RGBA: YES
# G3D full material: YES
# Make Z the up direction instead of Y: no
# Create composite overlay faces: no
# Center model: YES
# Export lesser blocks: YES
# Fatten lesser blocks: no
# Create block faces at the borders: YES
# Make tree leaves solid: no
# Use biomes: no
# Rotate model 0.000000 degrees
# Scale model by making each block 1000 mm high
# Data operation options:
#   Fill air bubbles: no; Seal off entrances: no; Fill in isolated tunnels in base of model: no
#   Connect parts sharing an edge: no; Connect corner tips: no; Weld all shared edges: no
#   Delete floating objects: trees and parts smaller than 16 blocks: no
#   Hollow out bottom of model, making the walls 1000 mm thick: no; Superhollow: no
# Melt snow blocks: no
#   Debug: show separate parts as colors: no
#   Debug: show weld blocks in bright colors: no

# Full world path: 
# Full terrainExt.png path: default
# Full current path: N:\\sw\\physx\\Mineways\\v802\\Release
"""
defaultPrim="Blocks"
    metersPerUnit = 1
    upAxis = "Y"
)

def Scope "Blocks"
{

def Scope "Looks" (
    kind = "model"
)
{
    def Material "grass_block_top"
    {
        token outputs:surface.connect = </Blocks/Looks/grass_block_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/grass_block_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/grass_block_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/grass_block_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/grass_block_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/grass_block_top_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/grass_block_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/grass_block_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/grass_block_top_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/grass_block_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stone"
    {
        token outputs:surface.connect = </Blocks/Looks/stone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dirt"
    {
        token outputs:surface.connect = </Blocks/Looks/dirt/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dirt/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dirt/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dirt/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dirt/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dirt.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dirt/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dirt/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dirt.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dirt/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "grass_block_side"
    {
        token outputs:surface.connect = </Blocks/Looks/grass_block_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/grass_block_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/grass_block_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/grass_block_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/grass_block_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/grass_block_side_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/grass_block_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/grass_block_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/grass_block_side_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/grass_block_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "oak_planks"
    {
        token outputs:surface.connect = </Blocks/Looks/oak_planks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/oak_planks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/oak_planks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/oak_planks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/oak_planks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/oak_planks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.611765, 0.505882, 0.286275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/oak_planks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/oak_planks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/oak_planks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/oak_planks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.65098, 0.65098, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "tnt_side"
    {
        token outputs:surface.connect = </Blocks/Looks/tnt_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/tnt_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/tnt_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/tnt_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/tnt_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/tnt_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.858824, 0.266667, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/tnt_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/tnt_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/tnt_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/tnt_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "tnt_top"
    {
        token outputs:surface.connect = </Blocks/Looks/tnt_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/tnt_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/tnt_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/tnt_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/tnt_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/tnt_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.858824, 0.266667, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/tnt_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/tnt_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/tnt_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/tnt_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "tnt_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/tnt_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/tnt_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/tnt_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/tnt_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/tnt_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/tnt_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.858824, 0.266667, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/tnt_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/tnt_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/tnt_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/tnt_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cobweb"
    {
        token outputs:surface.connect = </Blocks/Looks/cobweb/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cobweb/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cobweb/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cobweb/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cobweb/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cobweb.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/cobweb.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cobweb/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cobweb/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cobweb.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cobweb/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "poppy"
    {
        token outputs:surface.connect = </Blocks/Looks/poppy/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/poppy/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/poppy/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/poppy/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/poppy/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/poppy.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/poppy.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/poppy/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/poppy/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/poppy.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/poppy/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dandelion"
    {
        token outputs:surface.connect = </Blocks/Looks/dandelion/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dandelion/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dandelion/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dandelion/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dandelion/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dandelion.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dandelion.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.827451, 0.866667, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dandelion/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dandelion/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dandelion.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dandelion/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "nether_portal"
    {
        token outputs:surface.connect = </Blocks/Looks/nether_portal/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/nether_portal/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/nether_portal/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/nether_portal/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/nether_portal/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/nether_portal.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.623529, 0.298039, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/nether_portal.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 733.333 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/nether_portal_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/nether_portal.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.623529, 0.298039, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/nether_portal/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/nether_portal/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/nether_portal/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/nether_portal.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/nether_portal/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/nether_portal/uv_reader.outputs:result>
            float4 inputs:scale = (0.623529, 0.298039, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "oak_sapling"
    {
        token outputs:surface.connect = </Blocks/Looks/oak_sapling/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/oak_sapling/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/oak_sapling/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/oak_sapling/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/oak_sapling/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/oak_sapling.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/oak_sapling.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.482353, 0.603922, 0.160784)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/oak_sapling/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/oak_sapling/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/oak_sapling.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/oak_sapling/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cobblestone"
    {
        token outputs:surface.connect = </Blocks/Looks/cobblestone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cobblestone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cobblestone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cobblestone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cobblestone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cobblestone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.509804, 0.509804)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cobblestone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cobblestone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cobblestone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cobblestone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bedrock"
    {
        token outputs:surface.connect = </Blocks/Looks/bedrock/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bedrock/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bedrock/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bedrock/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bedrock/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bedrock.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.337255, 0.337255, 0.337255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bedrock/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bedrock/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bedrock.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bedrock/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sand"
    {
        token outputs:surface.connect = </Blocks/Looks/sand/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sand/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sand/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sand/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sand/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sand.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.862745, 0.815686, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sand/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sand/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sand.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sand/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "gravel"
    {
        token outputs:surface.connect = </Blocks/Looks/gravel/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/gravel/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/gravel/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/gravel/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/gravel/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/gravel.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.482353, 0.482353)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/gravel/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/gravel/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/gravel.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/gravel/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "oak_log"
    {
        token outputs:surface.connect = </Blocks/Looks/oak_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/oak_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/oak_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/oak_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/oak_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/oak_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.411765, 0.32549, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/oak_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/oak_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/oak_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/oak_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "oak_log_top"
    {
        token outputs:surface.connect = </Blocks/Looks/oak_log_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/oak_log_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/oak_log_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/oak_log_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/oak_log_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/oak_log_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.411765, 0.32549, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/oak_log_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/oak_log_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/oak_log_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/oak_log_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "iron_block"
    {
        token outputs:surface.connect = </Blocks/Looks/iron_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/iron_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/iron_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/iron_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/iron_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/iron_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0.9 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.15 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/iron_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/iron_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.15
            float inputs:metallic = 0.9
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/iron_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/iron_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "gold_block"
    {
        token outputs:surface.connect = </Blocks/Looks/gold_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/gold_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/gold_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/gold_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/gold_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/gold_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 1 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.1 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.996078, 0.968627, 0.305882)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/gold_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/gold_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.1
            float inputs:metallic = 1
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/gold_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/gold_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "diamond_block"
    {
        token outputs:surface.connect = </Blocks/Looks/diamond_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/diamond_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/diamond_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/diamond_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/diamond_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/diamond_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.05 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.498039, 0.890196, 0.87451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/diamond_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/diamond_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.05
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/diamond_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/diamond_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_chest_top"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_chest_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_chest_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_chest_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_chest_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_chest_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_chest_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.627451, 0.435294, 0.137255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_chest_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_chest_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_chest_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_chest_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_chest_side"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_chest_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_chest_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_chest_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_chest_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_chest_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_chest_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.627451, 0.435294, 0.137255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_chest_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_chest_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_chest_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_chest_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_chest_front"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_chest_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_chest_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_chest_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_chest_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_chest_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_chest_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.627451, 0.435294, 0.137255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_chest_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_chest_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_chest_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_chest_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_mushroom"
    {
        token outputs:surface.connect = </Blocks/Looks/red_mushroom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_mushroom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_mushroom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_mushroom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_mushroom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_mushroom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/red_mushroom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.988235, 0.360784, 0.364706)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_mushroom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_mushroom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_mushroom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_mushroom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brown_mushroom"
    {
        token outputs:surface.connect = </Blocks/Looks/brown_mushroom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brown_mushroom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brown_mushroom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brown_mushroom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brown_mushroom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brown_mushroom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.752941, 0.584314) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/brown_mushroom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 66.6667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/brown_mushroom_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/brown_mushroom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.752941, 0.584314)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brown_mushroom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brown_mushroom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/brown_mushroom/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brown_mushroom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brown_mushroom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brown_mushroom/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.752941, 0.584314, 1.0)
            float outputs:rgb
        }
    }

    def Material "jungle_sapling"
    {
        token outputs:surface.connect = </Blocks/Looks/jungle_sapling/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jungle_sapling/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jungle_sapling/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jungle_sapling/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jungle_sapling/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jungle_sapling.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/jungle_sapling.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.482353, 0.603922, 0.160784)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jungle_sapling/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jungle_sapling/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jungle_sapling.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jungle_sapling/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "fire_0"
    {
        token outputs:surface.connect = </Blocks/Looks/fire_0/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/fire_0/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/fire_0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/fire_0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/fire_0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/fire_0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.639216, 0) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/fire_0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/fire_0_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/fire_0.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.639216, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/fire_0/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/fire_0/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/fire_0/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/fire_0.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/fire_0/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/fire_0/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.639216, 0, 1.0)
            float outputs:rgb
        }
    }

    def Material "gold_ore"
    {
        token outputs:surface.connect = </Blocks/Looks/gold_ore/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/gold_ore/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/gold_ore/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/gold_ore/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/gold_ore/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/gold_ore.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.988235, 0.933333, 0.294118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/gold_ore/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/gold_ore/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/gold_ore.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/gold_ore/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "iron_ore"
    {
        token outputs:surface.connect = </Blocks/Looks/iron_ore/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/iron_ore/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/iron_ore/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/iron_ore/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/iron_ore/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/iron_ore.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.737255, 0.6, 0.501961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/iron_ore/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/iron_ore/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/iron_ore.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/iron_ore/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "coal_ore"
    {
        token outputs:surface.connect = </Blocks/Looks/coal_ore/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/coal_ore/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/coal_ore/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/coal_ore/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/coal_ore/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/coal_ore.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.203922, 0.203922, 0.203922)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/coal_ore/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/coal_ore/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/coal_ore.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/coal_ore/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bookshelf"
    {
        token outputs:surface.connect = </Blocks/Looks/bookshelf/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bookshelf/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bookshelf/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bookshelf/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bookshelf/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bookshelf.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.47451, 0.352941, 0.223529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bookshelf/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bookshelf/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bookshelf.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bookshelf/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "mossy_cobblestone"
    {
        token outputs:surface.connect = </Blocks/Looks/mossy_cobblestone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/mossy_cobblestone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/mossy_cobblestone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/mossy_cobblestone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/mossy_cobblestone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/mossy_cobblestone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.384314, 0.443137, 0.384314)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/mossy_cobblestone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/mossy_cobblestone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/mossy_cobblestone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/mossy_cobblestone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "obsidian"
    {
        token outputs:surface.connect = </Blocks/Looks/obsidian/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/obsidian/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/obsidian/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/obsidian/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/obsidian/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/obsidian.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.105882, 0.0901961, 0.160784)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/obsidian/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/obsidian/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/obsidian.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/obsidian/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "grass"
    {
        token outputs:surface.connect = </Blocks/Looks/grass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/grass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/grass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/grass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/grass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/grass_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/grass_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/grass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/grass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/grass_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/grass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_double_chest_front_left"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_double_chest_front_left/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_double_chest_front_left/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_double_chest_front_left/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_double_chest_front_left/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_double_chest_front_left/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_double_chest_front_left.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.627451, 0.435294, 0.137255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_double_chest_front_left/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_double_chest_front_left/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_double_chest_front_left.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_double_chest_front_left/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_double_chest_front_right"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_double_chest_front_right/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_double_chest_front_right/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_double_chest_front_right/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_double_chest_front_right/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_double_chest_front_right/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_double_chest_front_right.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.627451, 0.435294, 0.137255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_double_chest_front_right/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_double_chest_front_right/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_double_chest_front_right.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_double_chest_front_right/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crafting_table_top"
    {
        token outputs:surface.connect = </Blocks/Looks/crafting_table_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crafting_table_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crafting_table_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crafting_table_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crafting_table_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crafting_table_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crafting_table_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crafting_table_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crafting_table_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crafting_table_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "furnace_front"
    {
        token outputs:surface.connect = </Blocks/Looks/furnace_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/furnace_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/furnace_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/furnace_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/furnace_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/furnace_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.462745, 0.466667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/furnace_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/furnace_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/furnace_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/furnace_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "furnace_side"
    {
        token outputs:surface.connect = </Blocks/Looks/furnace_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/furnace_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/furnace_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/furnace_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/furnace_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/furnace_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.435294, 0.435294, 0.435294)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/furnace_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/furnace_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/furnace_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/furnace_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dispenser_front"
    {
        token outputs:surface.connect = </Blocks/Looks/dispenser_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dispenser_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dispenser_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dispenser_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dispenser_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dispenser_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.435294, 0.435294, 0.435294)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dispenser_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dispenser_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dispenser_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dispenser_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dispenser_front_vertical"
    {
        token outputs:surface.connect = </Blocks/Looks/dispenser_front_vertical/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dispenser_front_vertical/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dispenser_front_vertical/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dispenser_front_vertical/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dispenser_front_vertical/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dispenser_front_vertical.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.435294, 0.435294, 0.435294)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dispenser_front_vertical/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dispenser_front_vertical/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dispenser_front_vertical.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dispenser_front_vertical/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sponge"
    {
        token outputs:surface.connect = </Blocks/Looks/sponge/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sponge/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sponge/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sponge/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sponge/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sponge.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.819608, 0.823529, 0.305882)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sponge/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sponge/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sponge.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sponge/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "glass"
    {
        token outputs:surface.connect = </Blocks/Looks/glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/glass.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.752941, 0.964706, 0.996078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "diamond_ore"
    {
        token outputs:surface.connect = </Blocks/Looks/diamond_ore/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/diamond_ore/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/diamond_ore/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/diamond_ore/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/diamond_ore/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/diamond_ore.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.364706, 0.92549, 0.960784)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/diamond_ore/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/diamond_ore/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/diamond_ore.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/diamond_ore/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "redstone_ore"
    {
        token outputs:surface.connect = </Blocks/Looks/redstone_ore/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/redstone_ore/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/redstone_ore/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/redstone_ore/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/redstone_ore/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/redstone_ore.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.560784, 0.0117647, 0.0117647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/redstone_ore/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/redstone_ore/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/redstone_ore.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/redstone_ore/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "oak_leaves"
    {
        token outputs:surface.connect = </Blocks/Looks/oak_leaves/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/oak_leaves/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/oak_leaves/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/oak_leaves/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/oak_leaves/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/oak_leaves_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/oak_leaves_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.435294, 0.67451, 0.172549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/oak_leaves/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/oak_leaves/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/oak_leaves_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/oak_leaves/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "coarse_dirt"
    {
        token outputs:surface.connect = </Blocks/Looks/coarse_dirt/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/coarse_dirt/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/coarse_dirt/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/coarse_dirt/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/coarse_dirt/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/coarse_dirt.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.388235, 0.266667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/coarse_dirt/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/coarse_dirt/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/coarse_dirt.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/coarse_dirt/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stone_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/stone_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stone_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stone_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stone_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stone_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stone_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.65098, 0.65098, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stone_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stone_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stone_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stone_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_bush"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_bush/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_bush/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_bush/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_bush/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_bush/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_bush.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dead_bush.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_bush/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_bush/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_bush.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_bush/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "fern"
    {
        token outputs:surface.connect = </Blocks/Looks/fern/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/fern/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/fern/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/fern/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/fern/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/fern_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/fern_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/fern/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/fern/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/fern_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/fern/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_double_chest_back_left"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_double_chest_back_left/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_double_chest_back_left/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_double_chest_back_left/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_double_chest_back_left/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_double_chest_back_left/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_double_chest_back_left.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.627451, 0.435294, 0.137255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_double_chest_back_left/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_double_chest_back_left/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_double_chest_back_left.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_double_chest_back_left/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_double_chest_back_right"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_double_chest_back_right/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_double_chest_back_right/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_double_chest_back_right/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_double_chest_back_right/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_double_chest_back_right/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_double_chest_back_right.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.627451, 0.435294, 0.137255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_double_chest_back_right/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_double_chest_back_right/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_double_chest_back_right.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_double_chest_back_right/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crafting_table_side"
    {
        token outputs:surface.connect = </Blocks/Looks/crafting_table_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crafting_table_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crafting_table_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crafting_table_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crafting_table_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crafting_table_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crafting_table_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crafting_table_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crafting_table_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crafting_table_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crafting_table_front"
    {
        token outputs:surface.connect = </Blocks/Looks/crafting_table_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crafting_table_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crafting_table_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crafting_table_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crafting_table_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crafting_table_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crafting_table_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crafting_table_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crafting_table_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crafting_table_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "furnace_front_on"
    {
        token outputs:surface.connect = </Blocks/Looks/furnace_front_on/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/furnace_front_on/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/furnace_front_on/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/furnace_front_on/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/furnace_front_on/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/furnace_front_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.992157, 0.992157) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/furnace_front_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 866.667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/furnace_front_on_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.992157, 0.992157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/furnace_front_on/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/furnace_front_on/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/furnace_front_on/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/furnace_front_on.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/furnace_front_on/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/furnace_front_on/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.992157, 0.992157, 1.0)
            float outputs:rgb
        }
    }

    def Material "furnace_top"
    {
        token outputs:surface.connect = </Blocks/Looks/furnace_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/furnace_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/furnace_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/furnace_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/furnace_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/furnace_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.435294, 0.435294, 0.435294)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/furnace_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/furnace_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/furnace_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/furnace_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "spruce_sapling"
    {
        token outputs:surface.connect = </Blocks/Looks/spruce_sapling/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/spruce_sapling/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/spruce_sapling/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/spruce_sapling/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/spruce_sapling/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/spruce_sapling.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/spruce_sapling.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.482353, 0.603922, 0.160784)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/spruce_sapling/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/spruce_sapling/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/spruce_sapling.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/spruce_sapling/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "white_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/white_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/white_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/white_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/white_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/white_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/white_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/white_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/white_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/white_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/white_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "spawner"
    {
        token outputs:surface.connect = </Blocks/Looks/spawner/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/spawner/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/spawner/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/spawner/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/spawner/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/spawner.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/spawner.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.145098, 0.258824, 0.329412)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/spawner/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/spawner/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/spawner.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/spawner/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "snow"
    {
        token outputs:surface.connect = </Blocks/Looks/snow/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/snow/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/snow/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/snow/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/snow/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/snow.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/snow/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/snow/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/snow.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/snow/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "ice"
    {
        token outputs:surface.connect = </Blocks/Looks/ice/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/ice/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/ice/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/ice/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/ice/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/ice.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/ice.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.1 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.490196, 0.67451, 0.996078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/ice/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/ice/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/ice.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/ice/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "grass_block_snow"
    {
        token outputs:surface.connect = </Blocks/Looks/grass_block_snow/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/grass_block_snow/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/grass_block_snow/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/grass_block_snow/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/grass_block_snow/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/grass_block_snow.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/grass_block_snow/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/grass_block_snow/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/grass_block_snow.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/grass_block_snow/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cactus_top"
    {
        token outputs:surface.connect = </Blocks/Looks/cactus_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cactus_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cactus_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cactus_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cactus_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cactus_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/cactus_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.0509804, 0.380392, 0.0941176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cactus_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cactus_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cactus_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cactus_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cactus_side"
    {
        token outputs:surface.connect = </Blocks/Looks/cactus_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cactus_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cactus_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cactus_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cactus_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cactus_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/cactus_side.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.0509804, 0.380392, 0.0941176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cactus_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cactus_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cactus_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cactus_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cactus_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/cactus_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cactus_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cactus_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cactus_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cactus_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cactus_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/cactus_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.0509804, 0.380392, 0.0941176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cactus_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cactus_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cactus_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cactus_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "clay"
    {
        token outputs:surface.connect = </Blocks/Looks/clay/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/clay/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/clay/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/clay/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/clay/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/clay.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.45 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.635294, 0.654902, 0.705882)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/clay/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/clay/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.45
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/clay.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/clay/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sugar_cane"
    {
        token outputs:surface.connect = </Blocks/Looks/sugar_cane/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sugar_cane/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sugar_cane/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sugar_cane/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sugar_cane/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sugar_cane.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/sugar_cane.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.447059, 0.580392, 0.305882)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sugar_cane/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sugar_cane/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sugar_cane.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sugar_cane/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jukebox_side"
    {
        token outputs:surface.connect = </Blocks/Looks/jukebox_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jukebox_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jukebox_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jukebox_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jukebox_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jukebox_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.541176, 0.352941, 0.25098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jukebox_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jukebox_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jukebox_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jukebox_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jukebox_top"
    {
        token outputs:surface.connect = </Blocks/Looks/jukebox_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jukebox_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jukebox_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jukebox_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jukebox_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jukebox_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.541176, 0.352941, 0.25098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jukebox_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jukebox_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jukebox_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jukebox_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lily_pad"
    {
        token outputs:surface.connect = </Blocks/Looks/lily_pad/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lily_pad/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lily_pad/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lily_pad/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lily_pad/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lily_pad_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/lily_pad_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.129412, 0.498039, 0.188235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lily_pad/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lily_pad/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lily_pad_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lily_pad/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "mycelium_side"
    {
        token outputs:surface.connect = </Blocks/Looks/mycelium_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/mycelium_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/mycelium_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/mycelium_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/mycelium_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/mycelium_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.407843, 0.364706, 0.411765)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/mycelium_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/mycelium_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/mycelium_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/mycelium_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "mycelium_top"
    {
        token outputs:surface.connect = </Blocks/Looks/mycelium_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/mycelium_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/mycelium_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/mycelium_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/mycelium_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/mycelium_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.407843, 0.364706, 0.411765)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/mycelium_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/mycelium_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/mycelium_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/mycelium_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "birch_sapling"
    {
        token outputs:surface.connect = </Blocks/Looks/birch_sapling/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/birch_sapling/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/birch_sapling/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/birch_sapling/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/birch_sapling/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/birch_sapling.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/birch_sapling.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.482353, 0.603922, 0.160784)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/birch_sapling/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/birch_sapling/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/birch_sapling.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/birch_sapling/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "torch"
    {
        token outputs:surface.connect = </Blocks/Looks/torch/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/torch/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/torch/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/torch/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/torch/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/torch.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 1, 0) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/torch.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 933.333 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/torch_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/torch.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 1, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/torch/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/torch/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/torch/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/torch.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/torch/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/torch/uv_reader.outputs:result>
            float4 inputs:scale = (1, 1, 0, 1.0)
            float outputs:rgb
        }
    }

    def Material "oak_door_top"
    {
        token outputs:surface.connect = </Blocks/Looks/oak_door_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/oak_door_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/oak_door_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/oak_door_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/oak_door_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/oak_door_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/oak_door_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.494118, 0.364706, 0.176471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/oak_door_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/oak_door_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/oak_door_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/oak_door_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "iron_door_top"
    {
        token outputs:surface.connect = </Blocks/Looks/iron_door_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/iron_door_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/iron_door_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/iron_door_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/iron_door_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/iron_door_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0.9 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/iron_door_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.15 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.698039, 0.698039)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/iron_door_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/iron_door_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.15
            float inputs:metallic = 0.9
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/iron_door_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/iron_door_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "ladder"
    {
        token outputs:surface.connect = </Blocks/Looks/ladder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/ladder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/ladder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/ladder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/ladder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/ladder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/ladder.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.666667, 0.52549, 0.317647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/ladder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/ladder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/ladder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/ladder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "oak_trapdoor"
    {
        token outputs:surface.connect = </Blocks/Looks/oak_trapdoor/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/oak_trapdoor/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/oak_trapdoor/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/oak_trapdoor/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/oak_trapdoor/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/oak_trapdoor.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/oak_trapdoor.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.533333, 0.4, 0.203922)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/oak_trapdoor/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/oak_trapdoor/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/oak_trapdoor.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/oak_trapdoor/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "iron_bars"
    {
        token outputs:surface.connect = </Blocks/Looks/iron_bars/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/iron_bars/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/iron_bars/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/iron_bars/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/iron_bars/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/iron_bars.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0.9 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/iron_bars.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.15 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.639216, 0.643137, 0.643137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/iron_bars/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/iron_bars/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.15
            float inputs:metallic = 0.9
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/iron_bars.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/iron_bars/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "farmland_moist"
    {
        token outputs:surface.connect = </Blocks/Looks/farmland_moist/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/farmland_moist/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/farmland_moist/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/farmland_moist/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/farmland_moist/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/farmland_moist.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.333333, 0.184314, 0.0784314)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/farmland_moist/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/farmland_moist/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/farmland_moist.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/farmland_moist/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "farmland"
    {
        token outputs:surface.connect = </Blocks/Looks/farmland/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/farmland/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/farmland/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/farmland/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/farmland/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/farmland.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.333333, 0.184314, 0.0784314)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/farmland/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/farmland/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/farmland.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/farmland/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "wheat_stage0"
    {
        token outputs:surface.connect = </Blocks/Looks/wheat_stage0/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/wheat_stage0/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/wheat_stage0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/wheat_stage0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/wheat_stage0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/wheat_stage0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/wheat_stage0.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.4, 0.0823529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/wheat_stage0/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/wheat_stage0/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/wheat_stage0.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/wheat_stage0/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "wheat_stage1"
    {
        token outputs:surface.connect = </Blocks/Looks/wheat_stage1/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/wheat_stage1/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/wheat_stage1/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/wheat_stage1/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/wheat_stage1/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/wheat_stage1.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/wheat_stage1.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.4, 0.0823529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/wheat_stage1/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/wheat_stage1/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/wheat_stage1.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/wheat_stage1/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "wheat_stage2"
    {
        token outputs:surface.connect = </Blocks/Looks/wheat_stage2/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/wheat_stage2/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/wheat_stage2/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/wheat_stage2/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/wheat_stage2/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/wheat_stage2.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/wheat_stage2.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.4, 0.0823529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/wheat_stage2/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/wheat_stage2/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/wheat_stage2.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/wheat_stage2/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "wheat_stage3"
    {
        token outputs:surface.connect = </Blocks/Looks/wheat_stage3/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/wheat_stage3/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/wheat_stage3/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/wheat_stage3/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/wheat_stage3/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/wheat_stage3.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/wheat_stage3.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.4, 0.0823529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/wheat_stage3/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/wheat_stage3/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/wheat_stage3.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/wheat_stage3/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "wheat_stage4"
    {
        token outputs:surface.connect = </Blocks/Looks/wheat_stage4/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/wheat_stage4/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/wheat_stage4/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/wheat_stage4/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/wheat_stage4/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/wheat_stage4.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/wheat_stage4.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.4, 0.0823529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/wheat_stage4/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/wheat_stage4/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/wheat_stage4.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/wheat_stage4/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "wheat_stage5"
    {
        token outputs:surface.connect = </Blocks/Looks/wheat_stage5/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/wheat_stage5/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/wheat_stage5/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/wheat_stage5/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/wheat_stage5/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/wheat_stage5.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/wheat_stage5.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.4, 0.0823529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/wheat_stage5/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/wheat_stage5/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/wheat_stage5.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/wheat_stage5/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "wheat_stage6"
    {
        token outputs:surface.connect = </Blocks/Looks/wheat_stage6/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/wheat_stage6/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/wheat_stage6/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/wheat_stage6/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/wheat_stage6/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/wheat_stage6.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/wheat_stage6.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.4, 0.0823529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/wheat_stage6/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/wheat_stage6/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/wheat_stage6.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/wheat_stage6/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "wheat_stage7"
    {
        token outputs:surface.connect = </Blocks/Looks/wheat_stage7/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/wheat_stage7/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/wheat_stage7/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/wheat_stage7/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/wheat_stage7/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/wheat_stage7.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/wheat_stage7.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.4, 0.0823529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/wheat_stage7/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/wheat_stage7/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/wheat_stage7.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/wheat_stage7/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lever"
    {
        token outputs:surface.connect = </Blocks/Looks/lever/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lever/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lever/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lever/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lever/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lever.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.541176, 0.415686, 0.239216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lever/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lever/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lever.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lever/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "oak_door_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/oak_door_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/oak_door_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/oak_door_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/oak_door_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/oak_door_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/oak_door_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/oak_door_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.494118, 0.364706, 0.176471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/oak_door_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/oak_door_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/oak_door_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/oak_door_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "iron_door_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/iron_door_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/iron_door_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/iron_door_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/iron_door_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/iron_door_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/iron_door_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0.9 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/iron_door_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.15 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.698039, 0.698039)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/iron_door_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/iron_door_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.15
            float inputs:metallic = 0.9
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/iron_door_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/iron_door_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "redstone_torch"
    {
        token outputs:surface.connect = </Blocks/Looks/redstone_torch/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/redstone_torch/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/redstone_torch/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/redstone_torch/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/redstone_torch/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/redstone_torch.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0, 0) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/redstone_torch.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 466.667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/redstone_torch_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/redstone_torch.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/redstone_torch/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/redstone_torch/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/redstone_torch/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/redstone_torch.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/redstone_torch/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/redstone_torch/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0, 0, 1.0)
            float outputs:rgb
        }
    }

    def Material "mossy_stone_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/mossy_stone_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/mossy_stone_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/mossy_stone_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/mossy_stone_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/mossy_stone_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/mossy_stone_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.470588, 0.470588, 0.470588)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/mossy_stone_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/mossy_stone_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/mossy_stone_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/mossy_stone_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cracked_stone_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/cracked_stone_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cracked_stone_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cracked_stone_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cracked_stone_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cracked_stone_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cracked_stone_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.470588, 0.470588, 0.470588)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cracked_stone_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cracked_stone_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cracked_stone_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cracked_stone_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "pumpkin_top"
    {
        token outputs:surface.connect = </Blocks/Looks/pumpkin_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/pumpkin_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/pumpkin_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/pumpkin_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/pumpkin_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/pumpkin_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.752941, 0.462745, 0.0823529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/pumpkin_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/pumpkin_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/pumpkin_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/pumpkin_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "netherrack"
    {
        token outputs:surface.connect = </Blocks/Looks/netherrack/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/netherrack/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/netherrack/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/netherrack/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/netherrack/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/netherrack.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.388235, 0.266667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/netherrack/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/netherrack/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/netherrack.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/netherrack/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "soul_sand"
    {
        token outputs:surface.connect = </Blocks/Looks/soul_sand/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/soul_sand/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/soul_sand/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/soul_sand/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/soul_sand/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/soul_sand.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.333333, 0.254902, 0.203922)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/soul_sand/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/soul_sand/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/soul_sand.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/soul_sand/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "glowstone"
    {
        token outputs:surface.connect = </Blocks/Looks/glowstone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/glowstone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/glowstone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/glowstone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/glowstone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/glowstone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.85098, 0.627451) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/glowstone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/glowstone_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.85098, 0.627451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/glowstone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/glowstone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/glowstone/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/glowstone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/glowstone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/glowstone/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.85098, 0.627451, 1.0)
            float outputs:rgb
        }
    }

    def Material "piston_top_sticky"
    {
        token outputs:surface.connect = </Blocks/Looks/piston_top_sticky/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/piston_top_sticky/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/piston_top_sticky/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/piston_top_sticky/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/piston_top_sticky/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/piston_top_sticky.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.443137, 0.619608, 0.376471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/piston_top_sticky/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/piston_top_sticky/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/piston_top_sticky.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/piston_top_sticky/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "piston_top"
    {
        token outputs:surface.connect = </Blocks/Looks/piston_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/piston_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/piston_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/piston_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/piston_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/piston_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.584314, 0.466667, 0.294118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/piston_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/piston_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/piston_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/piston_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "piston_side"
    {
        token outputs:surface.connect = </Blocks/Looks/piston_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/piston_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/piston_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/piston_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/piston_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/piston_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.443137, 0.619608, 0.376471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/piston_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/piston_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/piston_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/piston_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "piston_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/piston_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/piston_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/piston_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/piston_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/piston_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/piston_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.443137, 0.619608, 0.376471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/piston_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/piston_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/piston_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/piston_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "piston_inner"
    {
        token outputs:surface.connect = </Blocks/Looks/piston_inner/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/piston_inner/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/piston_inner/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/piston_inner/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/piston_inner/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/piston_inner.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.443137, 0.619608, 0.376471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/piston_inner/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/piston_inner/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/piston_inner.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/piston_inner/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "melon_stem"
    {
        token outputs:surface.connect = </Blocks/Looks/melon_stem/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/melon_stem/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/melon_stem/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/melon_stem/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/melon_stem/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/melon_stem_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/melon_stem_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.882353, 0.780392, 0.109804)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/melon_stem/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/melon_stem/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/melon_stem_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/melon_stem/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "rail_corner"
    {
        token outputs:surface.connect = </Blocks/Looks/rail_corner/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/rail_corner/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/rail_corner/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/rail_corner/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/rail_corner/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/rail_corner.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/rail_corner.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.407843, 0.407843, 0.407843)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/rail_corner/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/rail_corner/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/rail_corner.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/rail_corner/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "black_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/black_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/black_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/black_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/black_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/black_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/black_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/black_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/black_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/black_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/black_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "gray_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/gray_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/gray_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/gray_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/gray_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/gray_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/gray_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/gray_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/gray_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/gray_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/gray_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "redstone_torch_off"
    {
        token outputs:surface.connect = </Blocks/Looks/redstone_torch_off/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/redstone_torch_off/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/redstone_torch_off/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/redstone_torch_off/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/redstone_torch_off/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/redstone_torch_off.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/redstone_torch_off.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.337255, 0, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/redstone_torch_off/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/redstone_torch_off/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/redstone_torch_off.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/redstone_torch_off/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "spruce_log"
    {
        token outputs:surface.connect = </Blocks/Looks/spruce_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/spruce_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/spruce_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/spruce_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/spruce_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/spruce_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.411765, 0.32549, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/spruce_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/spruce_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/spruce_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/spruce_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "birch_log"
    {
        token outputs:surface.connect = </Blocks/Looks/birch_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/birch_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/birch_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/birch_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/birch_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/birch_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.411765, 0.32549, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/birch_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/birch_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/birch_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/birch_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "pumpkin_side"
    {
        token outputs:surface.connect = </Blocks/Looks/pumpkin_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/pumpkin_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/pumpkin_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/pumpkin_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/pumpkin_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/pumpkin_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.752941, 0.462745, 0.0823529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/pumpkin_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/pumpkin_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/pumpkin_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/pumpkin_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "carved_pumpkin"
    {
        token outputs:surface.connect = </Blocks/Looks/carved_pumpkin/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/carved_pumpkin/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/carved_pumpkin/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/carved_pumpkin/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/carved_pumpkin/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/carved_pumpkin.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.752941, 0.462745, 0.0823529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/carved_pumpkin/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/carved_pumpkin/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/carved_pumpkin.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/carved_pumpkin/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jack_o_lantern"
    {
        token outputs:surface.connect = </Blocks/Looks/jack_o_lantern/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jack_o_lantern/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jack_o_lantern/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jack_o_lantern/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jack_o_lantern/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jack_o_lantern.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.772549, 0.0941176) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/jack_o_lantern.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/jack_o_lantern_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.772549, 0.0941176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jack_o_lantern/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jack_o_lantern/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/jack_o_lantern/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jack_o_lantern.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jack_o_lantern/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jack_o_lantern/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.772549, 0.0941176, 1.0)
            float outputs:rgb
        }
    }

    def Material "cake_top"
    {
        token outputs:surface.connect = </Blocks/Looks/cake_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cake_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cake_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cake_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cake_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cake_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.992157, 0.992157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cake_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cake_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cake_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cake_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cake_side"
    {
        token outputs:surface.connect = </Blocks/Looks/cake_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cake_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cake_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cake_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cake_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cake_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.992157, 0.992157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cake_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cake_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cake_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cake_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cake_inner"
    {
        token outputs:surface.connect = </Blocks/Looks/cake_inner/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cake_inner/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cake_inner/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cake_inner/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cake_inner/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cake_inner.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.992157, 0.992157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cake_inner/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cake_inner/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cake_inner.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cake_inner/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cake_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/cake_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cake_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cake_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cake_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cake_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cake_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.992157, 0.992157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cake_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cake_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cake_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cake_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_mushroom_block"
    {
        token outputs:surface.connect = </Blocks/Looks/red_mushroom_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_mushroom_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_mushroom_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_mushroom_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_mushroom_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_mushroom_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.662745, 0.105882, 0.0980392)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_mushroom_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_mushroom_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_mushroom_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_mushroom_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brown_mushroom_block"
    {
        token outputs:surface.connect = </Blocks/Looks/brown_mushroom_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brown_mushroom_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brown_mushroom_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brown_mushroom_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brown_mushroom_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brown_mushroom_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.396078, 0.294118, 0.223529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brown_mushroom_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brown_mushroom_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brown_mushroom_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brown_mushroom_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "rail"
    {
        token outputs:surface.connect = </Blocks/Looks/rail/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/rail/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/rail/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/rail/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/rail/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/rail.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/rail.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.407843, 0.407843, 0.407843)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/rail/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/rail/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/rail.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/rail/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/red_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "pink_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/pink_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/pink_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/pink_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/pink_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/pink_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/pink_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/pink_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/pink_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/pink_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/pink_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "repeater"
    {
        token outputs:surface.connect = </Blocks/Looks/repeater/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/repeater/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/repeater/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/repeater/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/repeater/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/repeater.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.337255, 0, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/repeater/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/repeater/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/repeater.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/repeater/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "spruce_leaves"
    {
        token outputs:surface.connect = </Blocks/Looks/spruce_leaves/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/spruce_leaves/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/spruce_leaves/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/spruce_leaves/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/spruce_leaves/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/spruce_leaves_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/spruce_leaves_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.435294, 0.67451, 0.172549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/spruce_leaves/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/spruce_leaves/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/spruce_leaves_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/spruce_leaves/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_sandstone_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/red_sandstone_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_sandstone_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_sandstone_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_sandstone_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_sandstone_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_sandstone_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.588235, 0.298039, 0.0980392)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_sandstone_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_sandstone_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_sandstone_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_sandstone_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MW_bed_feet_top"
    {
        token outputs:surface.connect = </Blocks/Looks/MW_bed_feet_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MW_bed_feet_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MW_bed_feet_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MW_bed_feet_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MW_bed_feet_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MW_bed_feet_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/MW_bed_feet_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.2, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MW_bed_feet_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MW_bed_feet_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MW_bed_feet_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MW_bed_feet_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MW_bed_head_top"
    {
        token outputs:surface.connect = </Blocks/Looks/MW_bed_head_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MW_bed_head_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MW_bed_head_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MW_bed_head_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MW_bed_head_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MW_bed_head_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/MW_bed_head_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.2, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MW_bed_head_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MW_bed_head_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MW_bed_head_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MW_bed_head_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "melon_side"
    {
        token outputs:surface.connect = </Blocks/Looks/melon_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/melon_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/melon_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/melon_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/melon_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/melon_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.682353, 0.678431, 0.152941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/melon_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/melon_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/melon_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/melon_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "melon_top"
    {
        token outputs:surface.connect = </Blocks/Looks/melon_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/melon_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/melon_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/melon_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/melon_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/melon_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.682353, 0.678431, 0.152941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/melon_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/melon_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/melon_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/melon_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cauldron_top"
    {
        token outputs:surface.connect = </Blocks/Looks/cauldron_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cauldron_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cauldron_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cauldron_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cauldron_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cauldron_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/cauldron_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.25 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.231373, 0.231373, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cauldron_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cauldron_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.25
            float inputs:metallic = 0.4
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cauldron_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cauldron_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cauldron_inner"
    {
        token outputs:surface.connect = </Blocks/Looks/cauldron_inner/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cauldron_inner/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cauldron_inner/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cauldron_inner/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cauldron_inner/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cauldron_inner.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/cauldron_inner.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.25 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.231373, 0.231373, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cauldron_inner/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cauldron_inner/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.25
            float inputs:metallic = 0.4
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cauldron_inner.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cauldron_inner/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "note_block"
    {
        token outputs:surface.connect = </Blocks/Looks/note_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/note_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/note_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/note_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/note_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/note_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.203922, 0.12549, 0.0901961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/note_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/note_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/note_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/note_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "mushroom_stem"
    {
        token outputs:surface.connect = </Blocks/Looks/mushroom_stem/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/mushroom_stem/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/mushroom_stem/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/mushroom_stem/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/mushroom_stem/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/mushroom_stem.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.396078, 0.294118, 0.223529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/mushroom_stem/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/mushroom_stem/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/mushroom_stem.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/mushroom_stem/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "mushroom_block_inside"
    {
        token outputs:surface.connect = </Blocks/Looks/mushroom_block_inside/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/mushroom_block_inside/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/mushroom_block_inside/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/mushroom_block_inside/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/mushroom_block_inside/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/mushroom_block_inside.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.396078, 0.294118, 0.223529)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/mushroom_block_inside/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/mushroom_block_inside/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/mushroom_block_inside.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/mushroom_block_inside/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "vine"
    {
        token outputs:surface.connect = </Blocks/Looks/vine/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/vine/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/vine/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/vine/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/vine/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/vine_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/vine_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.670588, 0.184314)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/vine/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/vine/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/vine_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/vine/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lapis_block"
    {
        token outputs:surface.connect = </Blocks/Looks/lapis_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lapis_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lapis_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lapis_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lapis_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lapis_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.1 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.105882, 0.305882, 0.733333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lapis_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lapis_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lapis_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lapis_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "green_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/green_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/green_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/green_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/green_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/green_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/green_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/green_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/green_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/green_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/green_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lime_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/lime_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lime_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lime_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lime_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lime_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lime_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lime_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lime_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lime_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lime_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "repeater_on"
    {
        token outputs:surface.connect = </Blocks/Looks/repeater_on/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/repeater_on/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/repeater_on/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/repeater_on/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/repeater_on/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/repeater_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.333333, 0.333333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/repeater_on/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/repeater_on/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/repeater_on.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/repeater_on/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/glass_pane_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.752941, 0.964706, 0.996078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MW_bed_feet_end"
    {
        token outputs:surface.connect = </Blocks/Looks/MW_bed_feet_end/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MW_bed_feet_end/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MW_bed_feet_end/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MW_bed_feet_end/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MW_bed_feet_end/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MW_bed_feet_end.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/MW_bed_feet_end.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.2, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MW_bed_feet_end/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MW_bed_feet_end/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MW_bed_feet_end.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MW_bed_feet_end/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MW_bed_feet_side"
    {
        token outputs:surface.connect = </Blocks/Looks/MW_bed_feet_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MW_bed_feet_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MW_bed_feet_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MW_bed_feet_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MW_bed_feet_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MW_bed_feet_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/MW_bed_feet_side.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.2, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MW_bed_feet_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MW_bed_feet_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MW_bed_feet_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MW_bed_feet_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MW_bed_head_side"
    {
        token outputs:surface.connect = </Blocks/Looks/MW_bed_head_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MW_bed_head_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MW_bed_head_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MW_bed_head_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MW_bed_head_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MW_bed_head_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/MW_bed_head_side.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.2, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MW_bed_head_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MW_bed_head_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MW_bed_head_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MW_bed_head_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MW_bed_head_end"
    {
        token outputs:surface.connect = </Blocks/Looks/MW_bed_head_end/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MW_bed_head_end/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MW_bed_head_end/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MW_bed_head_end/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MW_bed_head_end/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MW_bed_head_end.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/MW_bed_head_end.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.2, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MW_bed_head_end/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MW_bed_head_end/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MW_bed_head_end.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MW_bed_head_end/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jungle_log"
    {
        token outputs:surface.connect = </Blocks/Looks/jungle_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jungle_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jungle_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jungle_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jungle_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jungle_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.411765, 0.32549, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jungle_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jungle_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jungle_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jungle_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cauldron_side"
    {
        token outputs:surface.connect = </Blocks/Looks/cauldron_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cauldron_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cauldron_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cauldron_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cauldron_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cauldron_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/cauldron_side.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.25 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.231373, 0.231373, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cauldron_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cauldron_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.25
            float inputs:metallic = 0.4
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cauldron_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cauldron_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cauldron_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/cauldron_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cauldron_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cauldron_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cauldron_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cauldron_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cauldron_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/cauldron_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.25 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.231373, 0.231373, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cauldron_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cauldron_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.25
            float inputs:metallic = 0.4
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cauldron_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cauldron_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brewing_stand_base"
    {
        token outputs:surface.connect = </Blocks/Looks/brewing_stand_base/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brewing_stand_base/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brewing_stand_base/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brewing_stand_base/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brewing_stand_base/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brewing_stand_base.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/brewing_stand_base.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.466667, 0.411765, 0.180392)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brewing_stand_base/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brewing_stand_base/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brewing_stand_base.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brewing_stand_base/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brewing_stand"
    {
        token outputs:surface.connect = </Blocks/Looks/brewing_stand/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brewing_stand/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brewing_stand/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brewing_stand/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brewing_stand/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brewing_stand.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.882353, 0.388235) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/brewing_stand.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 66.6667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/brewing_stand_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/brewing_stand.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.882353, 0.388235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brewing_stand/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brewing_stand/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/brewing_stand/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brewing_stand.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brewing_stand/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brewing_stand/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.882353, 0.388235, 1.0)
            float outputs:rgb
        }
    }

    def Material "end_portal_frame_top"
    {
        token outputs:surface.connect = </Blocks/Looks/end_portal_frame_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/end_portal_frame_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/end_portal_frame_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/end_portal_frame_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/end_portal_frame_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/end_portal_frame_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.243137, 0.423529, 0.376471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/end_portal_frame_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/end_portal_frame_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/end_portal_frame_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/end_portal_frame_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "end_portal_frame_side"
    {
        token outputs:surface.connect = </Blocks/Looks/end_portal_frame_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/end_portal_frame_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/end_portal_frame_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/end_portal_frame_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/end_portal_frame_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/end_portal_frame_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.243137, 0.423529, 0.376471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/end_portal_frame_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/end_portal_frame_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/end_portal_frame_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/end_portal_frame_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lapis_ore"
    {
        token outputs:surface.connect = </Blocks/Looks/lapis_ore/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lapis_ore/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lapis_ore/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lapis_ore/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lapis_ore/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lapis_ore.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.0784314, 0.219608, 0.501961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lapis_ore/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lapis_ore/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lapis_ore.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lapis_ore/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brown_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/brown_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brown_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brown_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brown_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brown_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brown_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brown_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brown_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brown_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brown_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "yellow_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/yellow_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/yellow_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/yellow_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/yellow_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/yellow_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/yellow_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/yellow_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/yellow_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/yellow_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/yellow_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "powered_rail"
    {
        token outputs:surface.connect = </Blocks/Looks/powered_rail/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/powered_rail/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/powered_rail/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/powered_rail/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/powered_rail/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/powered_rail.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/powered_rail.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.670588, 0.0117647, 0.00392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/powered_rail/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/powered_rail/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/powered_rail.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/powered_rail/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "enchanting_table_top"
    {
        token outputs:surface.connect = </Blocks/Looks/enchanting_table_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/enchanting_table_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/enchanting_table_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/enchanting_table_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/enchanting_table_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/enchanting_table_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.65098, 0.439216, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/enchanting_table_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/enchanting_table_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/enchanting_table_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/enchanting_table_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dragon_egg"
    {
        token outputs:surface.connect = </Blocks/Looks/dragon_egg/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dragon_egg/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dragon_egg/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dragon_egg/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dragon_egg/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dragon_egg.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.658824, 0.560784, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/dragon_egg.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 66.6667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/dragon_egg_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.658824, 0.560784, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dragon_egg/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dragon_egg/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/dragon_egg/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dragon_egg.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dragon_egg/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dragon_egg/uv_reader.outputs:result>
            float4 inputs:scale = (0.658824, 0.560784, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "cocoa_stage2"
    {
        token outputs:surface.connect = </Blocks/Looks/cocoa_stage2/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cocoa_stage2/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cocoa_stage2/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cocoa_stage2/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cocoa_stage2/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cocoa_stage2.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/cocoa_stage2.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.745098, 0.454902, 0.176471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cocoa_stage2/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cocoa_stage2/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cocoa_stage2.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cocoa_stage2/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cocoa_stage1"
    {
        token outputs:surface.connect = </Blocks/Looks/cocoa_stage1/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cocoa_stage1/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cocoa_stage1/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cocoa_stage1/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cocoa_stage1/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cocoa_stage1.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/cocoa_stage1.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.745098, 0.454902, 0.176471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cocoa_stage1/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cocoa_stage1/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cocoa_stage1.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cocoa_stage1/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cocoa_stage0"
    {
        token outputs:surface.connect = </Blocks/Looks/cocoa_stage0/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cocoa_stage0/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cocoa_stage0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cocoa_stage0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cocoa_stage0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cocoa_stage0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/cocoa_stage0.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.745098, 0.454902, 0.176471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cocoa_stage0/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cocoa_stage0/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cocoa_stage0.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cocoa_stage0/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "emerald_ore"
    {
        token outputs:surface.connect = </Blocks/Looks/emerald_ore/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/emerald_ore/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/emerald_ore/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/emerald_ore/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/emerald_ore/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/emerald_ore.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.490196, 0.556863, 0.505882)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/emerald_ore/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/emerald_ore/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/emerald_ore.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/emerald_ore/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "tripwire_hook"
    {
        token outputs:surface.connect = </Blocks/Looks/tripwire_hook/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/tripwire_hook/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/tripwire_hook/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/tripwire_hook/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/tripwire_hook/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/tripwire_hook.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.780392, 0.623529, 0.388235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/tripwire_hook/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/tripwire_hook/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/tripwire_hook.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/tripwire_hook/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "end_portal_frame_eye"
    {
        token outputs:surface.connect = </Blocks/Looks/end_portal_frame_eye/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/end_portal_frame_eye/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/end_portal_frame_eye/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/end_portal_frame_eye/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/end_portal_frame_eye/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/end_portal_frame_eye.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.243137, 0.423529, 0.376471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/end_portal_frame_eye/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/end_portal_frame_eye/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/end_portal_frame_eye.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/end_portal_frame_eye/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "end_stone"
    {
        token outputs:surface.connect = </Blocks/Looks/end_stone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/end_stone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/end_stone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/end_stone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/end_stone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/end_stone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.243137, 0.423529, 0.376471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/end_stone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/end_stone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/end_stone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/end_stone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sandstone_top"
    {
        token outputs:surface.connect = </Blocks/Looks/sandstone_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sandstone_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sandstone_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sandstone_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sandstone_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sandstone_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.847059, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sandstone_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sandstone_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sandstone_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sandstone_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blue_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/blue_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blue_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blue_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blue_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blue_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blue_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blue_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blue_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blue_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blue_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_blue_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/light_blue_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_blue_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_blue_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_blue_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_blue_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/light_blue_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_blue_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_blue_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_blue_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_blue_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "powered_rail_on"
    {
        token outputs:surface.connect = </Blocks/Looks/powered_rail_on/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/powered_rail_on/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/powered_rail_on/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/powered_rail_on/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/powered_rail_on/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/powered_rail_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/powered_rail_on.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.670588, 0.0117647, 0.00392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/powered_rail_on/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/powered_rail_on/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/powered_rail_on.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/powered_rail_on/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "acacia_log"
    {
        token outputs:surface.connect = </Blocks/Looks/acacia_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/acacia_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/acacia_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/acacia_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/acacia_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/acacia_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.435294, 0.392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/acacia_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/acacia_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/acacia_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/acacia_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "enchanting_table_side"
    {
        token outputs:surface.connect = </Blocks/Looks/enchanting_table_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/enchanting_table_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/enchanting_table_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/enchanting_table_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/enchanting_table_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/enchanting_table_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.65098, 0.439216, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/enchanting_table_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/enchanting_table_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/enchanting_table_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/enchanting_table_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "enchanting_table_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/enchanting_table_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/enchanting_table_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/enchanting_table_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/enchanting_table_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/enchanting_table_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/enchanting_table_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.65098, 0.439216, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/enchanting_table_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/enchanting_table_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/enchanting_table_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/enchanting_table_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MW_end_portal"
    {
        token outputs:surface.connect = </Blocks/Looks/MW_end_portal/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MW_end_portal/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MW_end_portal/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MW_end_portal/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MW_end_portal/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MW_end_portal.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.917647, 0.917647) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/MW_end_portal.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/MW_end_portal_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.917647, 0.917647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MW_end_portal/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MW_end_portal/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/MW_end_portal/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MW_end_portal.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MW_end_portal/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MW_end_portal/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.917647, 0.917647, 1.0)
            float outputs:rgb
        }
    }

    def Material "flower_pot"
    {
        token outputs:surface.connect = </Blocks/Looks/flower_pot/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/flower_pot/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/flower_pot/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/flower_pot/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/flower_pot/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/flower_pot.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.270588, 0.211765)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/flower_pot/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/flower_pot/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/flower_pot.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/flower_pot/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "birch_log_top"
    {
        token outputs:surface.connect = </Blocks/Looks/birch_log_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/birch_log_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/birch_log_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/birch_log_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/birch_log_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/birch_log_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.411765, 0.32549, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/birch_log_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/birch_log_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/birch_log_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/birch_log_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "spruce_log_top"
    {
        token outputs:surface.connect = </Blocks/Looks/spruce_log_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/spruce_log_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/spruce_log_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/spruce_log_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/spruce_log_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/spruce_log_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.411765, 0.32549, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/spruce_log_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/spruce_log_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/spruce_log_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/spruce_log_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jungle_log_top"
    {
        token outputs:surface.connect = </Blocks/Looks/jungle_log_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jungle_log_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jungle_log_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jungle_log_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jungle_log_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jungle_log_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.411765, 0.32549, 0.2)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jungle_log_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jungle_log_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jungle_log_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jungle_log_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "pumpkin_stem"
    {
        token outputs:surface.connect = </Blocks/Looks/pumpkin_stem/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/pumpkin_stem/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/pumpkin_stem/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/pumpkin_stem/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/pumpkin_stem/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/pumpkin_stem_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/pumpkin_stem_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.882353, 0.780392, 0.109804)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/pumpkin_stem/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/pumpkin_stem/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/pumpkin_stem_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/pumpkin_stem/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sandstone"
    {
        token outputs:surface.connect = </Blocks/Looks/sandstone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sandstone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sandstone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sandstone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sandstone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sandstone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.847059, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sandstone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sandstone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sandstone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sandstone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "purple_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/purple_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/purple_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/purple_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/purple_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/purple_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/purple_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/purple_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/purple_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/purple_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/purple_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "magenta_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/magenta_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/magenta_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/magenta_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/magenta_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/magenta_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/magenta_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/magenta_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/magenta_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/magenta_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/magenta_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "detector_rail"
    {
        token outputs:surface.connect = </Blocks/Looks/detector_rail/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/detector_rail/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/detector_rail/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/detector_rail/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/detector_rail/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/detector_rail.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/detector_rail.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.803922, 0.368627, 0.345098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/detector_rail/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/detector_rail/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/detector_rail.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/detector_rail/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jungle_leaves"
    {
        token outputs:surface.connect = </Blocks/Looks/jungle_leaves/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jungle_leaves/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jungle_leaves/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jungle_leaves/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jungle_leaves/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jungle_leaves_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/jungle_leaves_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.435294, 0.67451, 0.172549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jungle_leaves/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jungle_leaves/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jungle_leaves_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jungle_leaves/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chiseled_red_sandstone"
    {
        token outputs:surface.connect = </Blocks/Looks/chiseled_red_sandstone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chiseled_red_sandstone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chiseled_red_sandstone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chiseled_red_sandstone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chiseled_red_sandstone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chiseled_red_sandstone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.588235, 0.298039, 0.0980392)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chiseled_red_sandstone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chiseled_red_sandstone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chiseled_red_sandstone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chiseled_red_sandstone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "spruce_planks"
    {
        token outputs:surface.connect = </Blocks/Looks/spruce_planks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/spruce_planks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/spruce_planks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/spruce_planks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/spruce_planks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/spruce_planks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.611765, 0.505882, 0.286275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/spruce_planks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/spruce_planks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/spruce_planks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/spruce_planks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jungle_planks"
    {
        token outputs:surface.connect = </Blocks/Looks/jungle_planks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jungle_planks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jungle_planks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jungle_planks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jungle_planks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jungle_planks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.611765, 0.505882, 0.286275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jungle_planks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jungle_planks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jungle_planks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jungle_planks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "carrots_stage0"
    {
        token outputs:surface.connect = </Blocks/Looks/carrots_stage0/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/carrots_stage0/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/carrots_stage0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/carrots_stage0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/carrots_stage0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/carrots_stage0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/carrots_stage0.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.0196078, 0.419608, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/carrots_stage0/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/carrots_stage0/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/carrots_stage0.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/carrots_stage0/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "carrots_stage1"
    {
        token outputs:surface.connect = </Blocks/Looks/carrots_stage1/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/carrots_stage1/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/carrots_stage1/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/carrots_stage1/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/carrots_stage1/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/carrots_stage1.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/carrots_stage1.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.0196078, 0.419608, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/carrots_stage1/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/carrots_stage1/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/carrots_stage1.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/carrots_stage1/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "carrots_stage2"
    {
        token outputs:surface.connect = </Blocks/Looks/carrots_stage2/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/carrots_stage2/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/carrots_stage2/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/carrots_stage2/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/carrots_stage2/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/carrots_stage2.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/carrots_stage2.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.0196078, 0.419608, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/carrots_stage2/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/carrots_stage2/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/carrots_stage2.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/carrots_stage2/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "carrots_stage3"
    {
        token outputs:surface.connect = </Blocks/Looks/carrots_stage3/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/carrots_stage3/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/carrots_stage3/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/carrots_stage3/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/carrots_stage3/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/carrots_stage3.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/carrots_stage3.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.0196078, 0.419608, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/carrots_stage3/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/carrots_stage3/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/carrots_stage3.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/carrots_stage3/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "potatoes_stage0"
    {
        token outputs:surface.connect = </Blocks/Looks/potatoes_stage0/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/potatoes_stage0/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/potatoes_stage0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/potatoes_stage0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/potatoes_stage0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/potatoes_stage0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/potatoes_stage0.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0, 0.752941, 0.105882)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/potatoes_stage0/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/potatoes_stage0/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/potatoes_stage0.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/potatoes_stage0/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "potatoes_stage1"
    {
        token outputs:surface.connect = </Blocks/Looks/potatoes_stage1/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/potatoes_stage1/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/potatoes_stage1/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/potatoes_stage1/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/potatoes_stage1/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/potatoes_stage1.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/potatoes_stage1.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0, 0.752941, 0.105882)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/potatoes_stage1/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/potatoes_stage1/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/potatoes_stage1.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/potatoes_stage1/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "potatoes_stage2"
    {
        token outputs:surface.connect = </Blocks/Looks/potatoes_stage2/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/potatoes_stage2/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/potatoes_stage2/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/potatoes_stage2/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/potatoes_stage2/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/potatoes_stage2.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/potatoes_stage2.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0, 0.752941, 0.105882)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/potatoes_stage2/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/potatoes_stage2/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/potatoes_stage2.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/potatoes_stage2/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "potatoes_stage3"
    {
        token outputs:surface.connect = </Blocks/Looks/potatoes_stage3/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/potatoes_stage3/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/potatoes_stage3/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/potatoes_stage3/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/potatoes_stage3/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/potatoes_stage3.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/potatoes_stage3.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0, 0.752941, 0.105882)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/potatoes_stage3/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/potatoes_stage3/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/potatoes_stage3.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/potatoes_stage3/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sandstone_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/sandstone_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sandstone_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sandstone_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sandstone_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sandstone_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sandstone_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.847059, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sandstone_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sandstone_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sandstone_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sandstone_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cyan_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/cyan_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cyan_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cyan_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cyan_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cyan_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cyan_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cyan_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cyan_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cyan_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cyan_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "orange_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/orange_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/orange_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/orange_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/orange_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/orange_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/orange_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/orange_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/orange_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/orange_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/orange_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "redstone_lamp"
    {
        token outputs:surface.connect = </Blocks/Looks/redstone_lamp/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/redstone_lamp/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/redstone_lamp/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/redstone_lamp/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/redstone_lamp/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/redstone_lamp.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.623529, 0.427451, 0.301961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/redstone_lamp/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/redstone_lamp/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/redstone_lamp.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/redstone_lamp/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "redstone_lamp_on"
    {
        token outputs:surface.connect = </Blocks/Looks/redstone_lamp_on/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/redstone_lamp_on/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/redstone_lamp_on/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/redstone_lamp_on/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/redstone_lamp_on/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/redstone_lamp_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.85098, 0.627451) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/redstone_lamp_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/redstone_lamp_on_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.85098, 0.627451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/redstone_lamp_on/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/redstone_lamp_on/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/redstone_lamp_on/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/redstone_lamp_on.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/redstone_lamp_on/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/redstone_lamp_on/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.85098, 0.627451, 1.0)
            float outputs:rgb
        }
    }

    def Material "chiseled_stone_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/chiseled_stone_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chiseled_stone_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chiseled_stone_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chiseled_stone_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chiseled_stone_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chiseled_stone_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.470588, 0.470588, 0.470588)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chiseled_stone_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chiseled_stone_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chiseled_stone_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chiseled_stone_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "birch_planks"
    {
        token outputs:surface.connect = </Blocks/Looks/birch_planks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/birch_planks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/birch_planks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/birch_planks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/birch_planks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/birch_planks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.611765, 0.505882, 0.286275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/birch_planks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/birch_planks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/birch_planks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/birch_planks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "anvil"
    {
        token outputs:surface.connect = </Blocks/Looks/anvil/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/anvil/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/anvil/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/anvil/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/anvil/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/anvil.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0.7 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.25098, 0.25098, 0.25098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/anvil/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/anvil/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0.7
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/anvil.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/anvil/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chipped_anvil_top"
    {
        token outputs:surface.connect = </Blocks/Looks/chipped_anvil_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chipped_anvil_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chipped_anvil_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chipped_anvil_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chipped_anvil_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chipped_anvil_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0.7 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.25098, 0.25098, 0.25098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chipped_anvil_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chipped_anvil_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0.7
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chipped_anvil_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chipped_anvil_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_ender_chest_latch"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_ender_chest_latch/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_ender_chest_latch/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_ender_chest_latch/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_ender_chest_latch/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_ender_chest_latch/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_ender_chest_latch.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.682353, 0.968627, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/MWO_ender_chest_latch.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 466.667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/MWO_ender_chest_latch_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.682353, 0.968627, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_ender_chest_latch/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_ender_chest_latch/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/MWO_ender_chest_latch/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_ender_chest_latch.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_ender_chest_latch/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_ender_chest_latch/uv_reader.outputs:result>
            float4 inputs:scale = (0.682353, 0.968627, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "MWO_ender_chest_top"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_ender_chest_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_ender_chest_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_ender_chest_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_ender_chest_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_ender_chest_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_ender_chest_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.682353, 0.968627, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/MWO_ender_chest_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 466.667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/MWO_ender_chest_top_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.682353, 0.968627, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_ender_chest_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_ender_chest_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/MWO_ender_chest_top/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_ender_chest_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_ender_chest_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_ender_chest_top/uv_reader.outputs:result>
            float4 inputs:scale = (0.682353, 0.968627, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "MWO_ender_chest_side"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_ender_chest_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_ender_chest_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_ender_chest_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_ender_chest_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_ender_chest_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_ender_chest_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.682353, 0.968627, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/MWO_ender_chest_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 466.667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/MWO_ender_chest_side_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.682353, 0.968627, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_ender_chest_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_ender_chest_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/MWO_ender_chest_side/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_ender_chest_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_ender_chest_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_ender_chest_side/uv_reader.outputs:result>
            float4 inputs:scale = (0.682353, 0.968627, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "MWO_ender_chest_front"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_ender_chest_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_ender_chest_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_ender_chest_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_ender_chest_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_ender_chest_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_ender_chest_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.682353, 0.968627, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/MWO_ender_chest_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 466.667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/MWO_ender_chest_front_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.682353, 0.968627, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_ender_chest_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_ender_chest_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/MWO_ender_chest_front/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_ender_chest_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_ender_chest_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_ender_chest_front/uv_reader.outputs:result>
            float4 inputs:scale = (0.682353, 0.968627, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "birch_leaves"
    {
        token outputs:surface.connect = </Blocks/Looks/birch_leaves/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/birch_leaves/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/birch_leaves/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/birch_leaves/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/birch_leaves/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/birch_leaves_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/birch_leaves_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.435294, 0.67451, 0.172549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/birch_leaves/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/birch_leaves/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/birch_leaves_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/birch_leaves/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_sandstone"
    {
        token outputs:surface.connect = </Blocks/Looks/red_sandstone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_sandstone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_sandstone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_sandstone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_sandstone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_sandstone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.509804, 0.509804)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_sandstone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_sandstone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_sandstone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_sandstone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "water_still"
    {
        token outputs:surface.connect = </Blocks/Looks/water_still/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/water_still/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/water_still/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/water_still/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/water_still/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.643137, 0.729412, 0.996078) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            float inputs:glass_ior = 1.33 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.643137, 0.729412, 0.996078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/water_still/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/water_still/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.33
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/water_still_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/water_still/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "nether_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/nether_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/nether_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/nether_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/nether_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/nether_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/nether_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.65098, 0.65098, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/nether_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/nether_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/nether_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/nether_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_gray_wool"
    {
        token outputs:surface.connect = </Blocks/Looks/light_gray_wool/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_gray_wool/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_gray_wool/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_gray_wool/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_gray_wool/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/light_gray_wool.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_gray_wool/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_gray_wool/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_gray_wool.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_gray_wool/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "nether_wart_stage0"
    {
        token outputs:surface.connect = </Blocks/Looks/nether_wart_stage0/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/nether_wart_stage0/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/nether_wart_stage0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/nether_wart_stage0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/nether_wart_stage0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/nether_wart_stage0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/nether_wart_stage0.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.505882, 0.0313726, 0.0392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/nether_wart_stage0/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/nether_wart_stage0/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/nether_wart_stage0.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/nether_wart_stage0/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "nether_wart_stage1"
    {
        token outputs:surface.connect = </Blocks/Looks/nether_wart_stage1/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/nether_wart_stage1/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/nether_wart_stage1/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/nether_wart_stage1/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/nether_wart_stage1/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/nether_wart_stage1.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/nether_wart_stage1.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.505882, 0.0313726, 0.0392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/nether_wart_stage1/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/nether_wart_stage1/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/nether_wart_stage1.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/nether_wart_stage1/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "nether_wart_stage2"
    {
        token outputs:surface.connect = </Blocks/Looks/nether_wart_stage2/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/nether_wart_stage2/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/nether_wart_stage2/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/nether_wart_stage2/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/nether_wart_stage2/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/nether_wart_stage2.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/nether_wart_stage2.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.505882, 0.0313726, 0.0392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/nether_wart_stage2/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/nether_wart_stage2/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/nether_wart_stage2.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/nether_wart_stage2/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chiseled_sandstone"
    {
        token outputs:surface.connect = </Blocks/Looks/chiseled_sandstone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chiseled_sandstone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chiseled_sandstone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chiseled_sandstone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chiseled_sandstone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chiseled_sandstone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.847059, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chiseled_sandstone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chiseled_sandstone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chiseled_sandstone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chiseled_sandstone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cut_sandstone"
    {
        token outputs:surface.connect = </Blocks/Looks/cut_sandstone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cut_sandstone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cut_sandstone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cut_sandstone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cut_sandstone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cut_sandstone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.847059, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cut_sandstone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cut_sandstone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cut_sandstone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cut_sandstone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "anvil_top"
    {
        token outputs:surface.connect = </Blocks/Looks/anvil_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/anvil_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/anvil_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/anvil_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/anvil_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/anvil_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0.7 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.25098, 0.25098, 0.25098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/anvil_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/anvil_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0.7
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/anvil_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/anvil_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "damaged_anvil_top"
    {
        token outputs:surface.connect = </Blocks/Looks/damaged_anvil_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/damaged_anvil_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/damaged_anvil_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/damaged_anvil_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/damaged_anvil_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/damaged_anvil_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0.7 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.25098, 0.25098, 0.25098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/damaged_anvil_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/damaged_anvil_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0.7
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/damaged_anvil_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/damaged_anvil_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_double_chest_top_left"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_double_chest_top_left/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_double_chest_top_left/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_double_chest_top_left/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_double_chest_top_left/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_double_chest_top_left/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_double_chest_top_left.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.627451, 0.435294, 0.137255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_double_chest_top_left/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_double_chest_top_left/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_double_chest_top_left.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_double_chest_top_left/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_double_chest_top_right"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_double_chest_top_right/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_double_chest_top_right/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_double_chest_top_right/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_double_chest_top_right/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_double_chest_top_right/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_double_chest_top_right.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.627451, 0.435294, 0.137255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_double_chest_top_right/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_double_chest_top_right/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_double_chest_top_right.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_double_chest_top_right/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "beacon"
    {
        token outputs:surface.connect = </Blocks/Looks/beacon/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/beacon/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/beacon/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/beacon/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/beacon/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/beacon.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.643137, 1, 0.980392) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/beacon.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/beacon_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/beacon.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.643137, 1, 0.980392)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/beacon/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/beacon/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/beacon/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/beacon.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/beacon/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/beacon/uv_reader.outputs:result>
            float4 inputs:scale = (0.643137, 1, 0.980392, 1.0)
            float outputs:rgb
        }
    }

    def Material "emerald_block"
    {
        token outputs:surface.connect = </Blocks/Looks/emerald_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/emerald_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/emerald_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/emerald_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/emerald_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/emerald_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.1 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.32549, 0.843137, 0.470588)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/emerald_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/emerald_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/emerald_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/emerald_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "coal_block"
    {
        token outputs:surface.connect = </Blocks/Looks/coal_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/coal_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/coal_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/coal_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/coal_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/coal_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.0980392, 0.0980392, 0.0980392)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/coal_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/coal_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/coal_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/coal_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "comparator"
    {
        token outputs:surface.connect = </Blocks/Looks/comparator/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/comparator/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/comparator/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/comparator/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/comparator/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/comparator.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.772549, 0.729412, 0.678431)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/comparator/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/comparator/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/comparator.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/comparator/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "comparator_on"
    {
        token outputs:surface.connect = </Blocks/Looks/comparator_on/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/comparator_on/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/comparator_on/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/comparator_on/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/comparator_on/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/comparator_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.772549, 0.729412, 0.678431)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/comparator_on/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/comparator_on/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/comparator_on.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/comparator_on/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "daylight_detector_side"
    {
        token outputs:surface.connect = </Blocks/Looks/daylight_detector_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/daylight_detector_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/daylight_detector_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/daylight_detector_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/daylight_detector_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/daylight_detector_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.733333, 0.658824, 0.564706)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/daylight_detector_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/daylight_detector_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/daylight_detector_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/daylight_detector_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "daylight_detector_top"
    {
        token outputs:surface.connect = </Blocks/Looks/daylight_detector_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/daylight_detector_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/daylight_detector_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/daylight_detector_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/daylight_detector_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/daylight_detector_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.733333, 0.658824, 0.564706)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/daylight_detector_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/daylight_detector_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/daylight_detector_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/daylight_detector_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dropper_front"
    {
        token outputs:surface.connect = </Blocks/Looks/dropper_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dropper_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dropper_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dropper_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dropper_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dropper_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.431373, 0.431373, 0.431373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dropper_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dropper_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dropper_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dropper_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dropper_front_vertical"
    {
        token outputs:surface.connect = </Blocks/Looks/dropper_front_vertical/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dropper_front_vertical/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dropper_front_vertical/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dropper_front_vertical/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dropper_front_vertical/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dropper_front_vertical.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.431373, 0.431373, 0.431373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dropper_front_vertical/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dropper_front_vertical/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dropper_front_vertical.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dropper_front_vertical/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "hay_block_side"
    {
        token outputs:surface.connect = </Blocks/Looks/hay_block_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/hay_block_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/hay_block_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/hay_block_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/hay_block_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/hay_block_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.709804, 0.592157, 0.0470588)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/hay_block_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/hay_block_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/hay_block_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/hay_block_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "hay_block_top"
    {
        token outputs:surface.connect = </Blocks/Looks/hay_block_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/hay_block_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/hay_block_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/hay_block_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/hay_block_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/hay_block_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.709804, 0.592157, 0.0470588)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/hay_block_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/hay_block_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/hay_block_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/hay_block_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "hopper_inside"
    {
        token outputs:surface.connect = </Blocks/Looks/hopper_inside/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/hopper_inside/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/hopper_inside/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/hopper_inside/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/hopper_inside/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/hopper_inside.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0.85 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.185 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.211765, 0.211765, 0.211765)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/hopper_inside/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/hopper_inside/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.185
            float inputs:metallic = 0.85
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/hopper_inside.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/hopper_inside/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "hopper_outside"
    {
        token outputs:surface.connect = </Blocks/Looks/hopper_outside/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/hopper_outside/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/hopper_outside/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/hopper_outside/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/hopper_outside/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/hopper_outside.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0.85 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.185 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.211765, 0.211765, 0.211765)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/hopper_outside/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/hopper_outside/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.185
            float inputs:metallic = 0.85
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/hopper_outside.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/hopper_outside/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "hopper_top"
    {
        token outputs:surface.connect = </Blocks/Looks/hopper_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/hopper_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/hopper_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/hopper_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/hopper_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/hopper_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0.85 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.185 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.211765, 0.211765, 0.211765)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/hopper_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/hopper_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.185
            float inputs:metallic = 0.85
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/hopper_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/hopper_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "redstone_block"
    {
        token outputs:surface.connect = </Blocks/Looks/redstone_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/redstone_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/redstone_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/redstone_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/redstone_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/redstone_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.658824, 0.117647, 0.0352941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/redstone_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/redstone_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/redstone_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/redstone_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lava_still"
    {
        token outputs:surface.connect = </Blocks/Looks/lava_still/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lava_still/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lava_still/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lava_still/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lava_still/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lava_still.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.443137, 0) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/lava_still.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/lava_still_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.443137, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lava_still/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lava_still/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/lava_still/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lava_still.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lava_still/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lava_still/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.443137, 0, 1.0)
            float outputs:rgb
        }
    }

    def Material "white_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/white_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/white_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/white_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/white_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/white_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/white_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/white_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/white_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/white_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/white_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "orange_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/orange_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/orange_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/orange_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/orange_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/orange_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/orange_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/orange_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/orange_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/orange_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/orange_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "magenta_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/magenta_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/magenta_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/magenta_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/magenta_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/magenta_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/magenta_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/magenta_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/magenta_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/magenta_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/magenta_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_blue_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/light_blue_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_blue_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_blue_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_blue_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_blue_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/light_blue_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_blue_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_blue_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_blue_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_blue_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "yellow_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/yellow_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/yellow_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/yellow_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/yellow_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/yellow_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/yellow_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/yellow_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/yellow_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/yellow_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/yellow_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lime_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/lime_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lime_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lime_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lime_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lime_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lime_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lime_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lime_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lime_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lime_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "pink_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/pink_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/pink_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/pink_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/pink_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/pink_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/pink_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/pink_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/pink_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/pink_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/pink_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "gray_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/gray_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/gray_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/gray_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/gray_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/gray_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/gray_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/gray_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/gray_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/gray_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/gray_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_gray_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/light_gray_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_gray_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_gray_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_gray_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_gray_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/light_gray_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_gray_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_gray_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_gray_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_gray_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cyan_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/cyan_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cyan_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cyan_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cyan_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cyan_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cyan_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cyan_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cyan_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cyan_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cyan_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "purple_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/purple_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/purple_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/purple_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/purple_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/purple_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/purple_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/purple_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/purple_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/purple_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/purple_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blue_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/blue_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blue_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blue_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blue_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blue_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blue_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blue_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blue_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blue_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blue_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brown_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/brown_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brown_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brown_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brown_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brown_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brown_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brown_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brown_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brown_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brown_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "green_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/green_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/green_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/green_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/green_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/green_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/green_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/green_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/green_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/green_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/green_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/red_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "black_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/black_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/black_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/black_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/black_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/black_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/black_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.682353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/black_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/black_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/black_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/black_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.580392, 0.352941, 0.254902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "quartz_block_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/quartz_block_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/quartz_block_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/quartz_block_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/quartz_block_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/quartz_block_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/quartz_block_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.65098, 0.65098, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/quartz_block_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/quartz_block_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/quartz_block_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/quartz_block_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chiseled_quartz_block_top"
    {
        token outputs:surface.connect = </Blocks/Looks/chiseled_quartz_block_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chiseled_quartz_block_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chiseled_quartz_block_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chiseled_quartz_block_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chiseled_quartz_block_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chiseled_quartz_block_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.18 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.866667, 0.843137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chiseled_quartz_block_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chiseled_quartz_block_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.18
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chiseled_quartz_block_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chiseled_quartz_block_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chiseled_quartz_block"
    {
        token outputs:surface.connect = </Blocks/Looks/chiseled_quartz_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chiseled_quartz_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chiseled_quartz_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chiseled_quartz_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chiseled_quartz_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chiseled_quartz_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.18 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.866667, 0.843137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chiseled_quartz_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chiseled_quartz_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.18
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chiseled_quartz_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chiseled_quartz_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "quartz_pillar_top"
    {
        token outputs:surface.connect = </Blocks/Looks/quartz_pillar_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/quartz_pillar_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/quartz_pillar_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/quartz_pillar_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/quartz_pillar_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/quartz_pillar_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.18 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.866667, 0.843137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/quartz_pillar_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/quartz_pillar_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.18
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/quartz_pillar_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/quartz_pillar_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "quartz_pillar"
    {
        token outputs:surface.connect = </Blocks/Looks/quartz_pillar/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/quartz_pillar/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/quartz_pillar/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/quartz_pillar/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/quartz_pillar/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/quartz_pillar.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.18 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.866667, 0.843137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/quartz_pillar/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/quartz_pillar/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.18
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/quartz_pillar.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/quartz_pillar/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "quartz_block_side"
    {
        token outputs:surface.connect = </Blocks/Looks/quartz_block_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/quartz_block_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/quartz_block_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/quartz_block_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/quartz_block_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/quartz_block_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.65098, 0.65098, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/quartz_block_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/quartz_block_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/quartz_block_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/quartz_block_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "quartz_block_top"
    {
        token outputs:surface.connect = </Blocks/Looks/quartz_block_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/quartz_block_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/quartz_block_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/quartz_block_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/quartz_block_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/quartz_block_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.65098, 0.65098, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/quartz_block_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/quartz_block_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/quartz_block_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/quartz_block_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "nether_quartz_ore"
    {
        token outputs:surface.connect = </Blocks/Looks/nether_quartz_ore/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/nether_quartz_ore/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/nether_quartz_ore/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/nether_quartz_ore/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/nether_quartz_ore/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/nether_quartz_ore.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.478431, 0.356863, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/nether_quartz_ore/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/nether_quartz_ore/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/nether_quartz_ore.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/nether_quartz_ore/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "activator_rail"
    {
        token outputs:surface.connect = </Blocks/Looks/activator_rail/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/activator_rail/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/activator_rail/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/activator_rail/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/activator_rail/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/activator_rail.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/activator_rail.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.533333, 0.0117647, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/activator_rail/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/activator_rail/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/activator_rail.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/activator_rail/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "activator_rail_on"
    {
        token outputs:surface.connect = </Blocks/Looks/activator_rail_on/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/activator_rail_on/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/activator_rail_on/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/activator_rail_on/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/activator_rail_on/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/activator_rail_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/activator_rail_on.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.533333, 0.0117647, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/activator_rail_on/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/activator_rail_on/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/activator_rail_on.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/activator_rail_on/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "detector_rail_on"
    {
        token outputs:surface.connect = </Blocks/Looks/detector_rail_on/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/detector_rail_on/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/detector_rail_on/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/detector_rail_on/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/detector_rail_on/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/detector_rail_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/detector_rail_on.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.803922, 0.368627, 0.345098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/detector_rail_on/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/detector_rail_on/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/detector_rail_on.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/detector_rail_on/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "packed_ice"
    {
        token outputs:surface.connect = </Blocks/Looks/packed_ice/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/packed_ice/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/packed_ice/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/packed_ice/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/packed_ice/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/packed_ice.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.1 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.490196, 0.67451, 0.996078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/packed_ice/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/packed_ice/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/packed_ice.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/packed_ice/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_sand"
    {
        token outputs:surface.connect = </Blocks/Looks/red_sand/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_sand/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_sand/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_sand/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_sand/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_sand.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.862745, 0.815686, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_sand/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_sand/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_sand.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_sand/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "podzol_side"
    {
        token outputs:surface.connect = </Blocks/Looks/podzol_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/podzol_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/podzol_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/podzol_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/podzol_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/podzol_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.388235, 0.266667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/podzol_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/podzol_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/podzol_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/podzol_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "podzol_top"
    {
        token outputs:surface.connect = </Blocks/Looks/podzol_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/podzol_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/podzol_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/podzol_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/podzol_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/podzol_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.388235, 0.266667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/podzol_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/podzol_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/podzol_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/podzol_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sunflower_front"
    {
        token outputs:surface.connect = </Blocks/Looks/sunflower_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sunflower_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sunflower_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sunflower_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sunflower_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sunflower_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/sunflower_front.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sunflower_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sunflower_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sunflower_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sunflower_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sunflower_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/sunflower_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sunflower_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sunflower_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sunflower_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sunflower_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sunflower_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/sunflower_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sunflower_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sunflower_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sunflower_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sunflower_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sunflower_top"
    {
        token outputs:surface.connect = </Blocks/Looks/sunflower_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sunflower_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sunflower_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sunflower_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sunflower_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sunflower_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/sunflower_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sunflower_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sunflower_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sunflower_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sunflower_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lilac_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/lilac_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lilac_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lilac_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lilac_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lilac_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lilac_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/lilac_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lilac_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lilac_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lilac_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lilac_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lilac_top"
    {
        token outputs:surface.connect = </Blocks/Looks/lilac_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lilac_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lilac_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lilac_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lilac_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lilac_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/lilac_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lilac_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lilac_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lilac_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lilac_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "tall_grass_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/tall_grass_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/tall_grass_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/tall_grass_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/tall_grass_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/tall_grass_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/tall_grass_bottom_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/tall_grass_bottom_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/tall_grass_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/tall_grass_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/tall_grass_bottom_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/tall_grass_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "tall_grass_top"
    {
        token outputs:surface.connect = </Blocks/Looks/tall_grass_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/tall_grass_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/tall_grass_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/tall_grass_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/tall_grass_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/tall_grass_top_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/tall_grass_top_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/tall_grass_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/tall_grass_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/tall_grass_top_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/tall_grass_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "large_fern_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/large_fern_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/large_fern_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/large_fern_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/large_fern_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/large_fern_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/large_fern_bottom_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/large_fern_bottom_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/large_fern_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/large_fern_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/large_fern_bottom_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/large_fern_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "large_fern_top"
    {
        token outputs:surface.connect = </Blocks/Looks/large_fern_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/large_fern_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/large_fern_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/large_fern_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/large_fern_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/large_fern_top_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/large_fern_top_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/large_fern_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/large_fern_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/large_fern_top_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/large_fern_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "rose_bush_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/rose_bush_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/rose_bush_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/rose_bush_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/rose_bush_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/rose_bush_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/rose_bush_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/rose_bush_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/rose_bush_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/rose_bush_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/rose_bush_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/rose_bush_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "rose_bush_top"
    {
        token outputs:surface.connect = </Blocks/Looks/rose_bush_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/rose_bush_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/rose_bush_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/rose_bush_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/rose_bush_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/rose_bush_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/rose_bush_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/rose_bush_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/rose_bush_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/rose_bush_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/rose_bush_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "peony_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/peony_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/peony_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/peony_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/peony_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/peony_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/peony_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/peony_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/peony_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/peony_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/peony_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/peony_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "peony_top"
    {
        token outputs:surface.connect = </Blocks/Looks/peony_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/peony_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/peony_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/peony_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/peony_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/peony_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/peony_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/peony_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/peony_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/peony_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/peony_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "acacia_sapling"
    {
        token outputs:surface.connect = </Blocks/Looks/acacia_sapling/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/acacia_sapling/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/acacia_sapling/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/acacia_sapling/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/acacia_sapling/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/acacia_sapling.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/acacia_sapling.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.482353, 0.603922, 0.160784)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/acacia_sapling/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/acacia_sapling/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/acacia_sapling.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/acacia_sapling/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dark_oak_sapling"
    {
        token outputs:surface.connect = </Blocks/Looks/dark_oak_sapling/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dark_oak_sapling/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dark_oak_sapling/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dark_oak_sapling/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dark_oak_sapling/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dark_oak_sapling.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dark_oak_sapling.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.482353, 0.603922, 0.160784)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dark_oak_sapling/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dark_oak_sapling/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dark_oak_sapling.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dark_oak_sapling/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blue_orchid"
    {
        token outputs:surface.connect = </Blocks/Looks/blue_orchid/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blue_orchid/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blue_orchid/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blue_orchid/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blue_orchid/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blue_orchid.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/blue_orchid.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blue_orchid/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blue_orchid/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blue_orchid.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blue_orchid/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "allium"
    {
        token outputs:surface.connect = </Blocks/Looks/allium/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/allium/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/allium/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/allium/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/allium/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/allium.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/allium.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/allium/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/allium/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/allium.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/allium/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "azure_bluet"
    {
        token outputs:surface.connect = </Blocks/Looks/azure_bluet/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/azure_bluet/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/azure_bluet/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/azure_bluet/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/azure_bluet/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/azure_bluet.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/azure_bluet.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/azure_bluet/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/azure_bluet/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/azure_bluet.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/azure_bluet/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_tulip"
    {
        token outputs:surface.connect = </Blocks/Looks/red_tulip/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_tulip/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_tulip/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_tulip/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_tulip/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_tulip.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/red_tulip.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_tulip/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_tulip/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_tulip.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_tulip/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "orange_tulip"
    {
        token outputs:surface.connect = </Blocks/Looks/orange_tulip/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/orange_tulip/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/orange_tulip/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/orange_tulip/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/orange_tulip/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/orange_tulip.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/orange_tulip.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/orange_tulip/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/orange_tulip/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/orange_tulip.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/orange_tulip/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "white_tulip"
    {
        token outputs:surface.connect = </Blocks/Looks/white_tulip/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/white_tulip/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/white_tulip/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/white_tulip/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/white_tulip/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/white_tulip.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/white_tulip.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/white_tulip/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/white_tulip/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/white_tulip.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/white_tulip/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "pink_tulip"
    {
        token outputs:surface.connect = </Blocks/Looks/pink_tulip/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/pink_tulip/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/pink_tulip/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/pink_tulip/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/pink_tulip/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/pink_tulip.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/pink_tulip.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/pink_tulip/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/pink_tulip/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/pink_tulip.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/pink_tulip/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "oxeye_daisy"
    {
        token outputs:surface.connect = </Blocks/Looks/oxeye_daisy/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/oxeye_daisy/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/oxeye_daisy/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/oxeye_daisy/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/oxeye_daisy/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/oxeye_daisy.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/oxeye_daisy.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/oxeye_daisy/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/oxeye_daisy/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/oxeye_daisy.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/oxeye_daisy/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "acacia_leaves"
    {
        token outputs:surface.connect = </Blocks/Looks/acacia_leaves/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/acacia_leaves/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/acacia_leaves/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/acacia_leaves/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/acacia_leaves/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/acacia_leaves_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/acacia_leaves_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.435294, 0.67451, 0.172549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/acacia_leaves/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/acacia_leaves/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/acacia_leaves_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/acacia_leaves/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cut_red_sandstone"
    {
        token outputs:surface.connect = </Blocks/Looks/cut_red_sandstone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cut_red_sandstone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cut_red_sandstone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cut_red_sandstone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cut_red_sandstone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cut_red_sandstone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.588235, 0.298039, 0.0980392)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cut_red_sandstone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cut_red_sandstone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cut_red_sandstone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cut_red_sandstone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dark_oak_leaves"
    {
        token outputs:surface.connect = </Blocks/Looks/dark_oak_leaves/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dark_oak_leaves/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dark_oak_leaves/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dark_oak_leaves/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dark_oak_leaves/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dark_oak_leaves_y.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dark_oak_leaves_y.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.435294, 0.67451, 0.172549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dark_oak_leaves/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dark_oak_leaves/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dark_oak_leaves_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dark_oak_leaves/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_sandstone_top"
    {
        token outputs:surface.connect = </Blocks/Looks/red_sandstone_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_sandstone_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_sandstone_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_sandstone_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_sandstone_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_sandstone_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.588235, 0.298039, 0.0980392)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_sandstone_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_sandstone_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_sandstone_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_sandstone_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "acacia_log_top"
    {
        token outputs:surface.connect = </Blocks/Looks/acacia_log_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/acacia_log_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/acacia_log_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/acacia_log_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/acacia_log_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/acacia_log_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.435294, 0.392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/acacia_log_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/acacia_log_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/acacia_log_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/acacia_log_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dark_oak_log"
    {
        token outputs:surface.connect = </Blocks/Looks/dark_oak_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dark_oak_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dark_oak_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dark_oak_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dark_oak_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dark_oak_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.435294, 0.392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dark_oak_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dark_oak_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dark_oak_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dark_oak_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dark_oak_log_top"
    {
        token outputs:surface.connect = </Blocks/Looks/dark_oak_log_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dark_oak_log_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dark_oak_log_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dark_oak_log_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dark_oak_log_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dark_oak_log_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.435294, 0.392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dark_oak_log_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dark_oak_log_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dark_oak_log_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dark_oak_log_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "white_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/white_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/white_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/white_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/white_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/white_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/white_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/white_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/white_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/white_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/white_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "orange_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/orange_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/orange_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/orange_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/orange_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/orange_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/orange_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/orange_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/orange_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/orange_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/orange_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "magenta_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/magenta_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/magenta_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/magenta_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/magenta_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/magenta_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/magenta_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/magenta_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/magenta_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/magenta_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/magenta_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_blue_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/light_blue_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_blue_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_blue_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_blue_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_blue_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/light_blue_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_blue_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_blue_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_blue_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_blue_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "yellow_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/yellow_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/yellow_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/yellow_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/yellow_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/yellow_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/yellow_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/yellow_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/yellow_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/yellow_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/yellow_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lime_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/lime_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lime_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lime_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lime_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lime_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/lime_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lime_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lime_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lime_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lime_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "pink_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/pink_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/pink_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/pink_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/pink_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/pink_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/pink_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/pink_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/pink_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/pink_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/pink_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "gray_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/gray_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/gray_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/gray_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/gray_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/gray_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/gray_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/gray_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/gray_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/gray_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/gray_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_gray_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/light_gray_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_gray_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_gray_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_gray_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_gray_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/light_gray_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_gray_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_gray_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_gray_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_gray_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cyan_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/cyan_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cyan_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cyan_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cyan_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cyan_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/cyan_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cyan_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cyan_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cyan_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cyan_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "purple_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/purple_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/purple_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/purple_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/purple_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/purple_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/purple_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/purple_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/purple_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/purple_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/purple_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blue_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/blue_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blue_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blue_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blue_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blue_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/blue_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blue_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blue_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blue_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blue_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brown_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/brown_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brown_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brown_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brown_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brown_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/brown_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brown_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brown_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brown_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brown_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "green_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/green_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/green_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/green_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/green_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/green_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/green_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/green_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/green_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/green_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/green_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/red_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/red_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "black_stained_glass"
    {
        token outputs:surface.connect = </Blocks/Looks/black_stained_glass/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/black_stained_glass/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/black_stained_glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/black_stained_glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/black_stained_glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/black_stained_glass.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/black_stained_glass/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/black_stained_glass/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/black_stained_glass.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/black_stained_glass/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "white_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/white_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/white_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/white_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/white_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/white_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/white_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/white_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/white_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/white_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/white_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "orange_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/orange_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/orange_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/orange_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/orange_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/orange_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/orange_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/orange_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/orange_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/orange_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/orange_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "magenta_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/magenta_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/magenta_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/magenta_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/magenta_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/magenta_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/magenta_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/magenta_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/magenta_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/magenta_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/magenta_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_blue_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/light_blue_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_blue_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_blue_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_blue_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_blue_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/light_blue_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_blue_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_blue_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_blue_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_blue_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "yellow_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/yellow_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/yellow_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/yellow_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/yellow_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/yellow_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/yellow_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/yellow_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/yellow_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/yellow_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/yellow_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lime_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/lime_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lime_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lime_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lime_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lime_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/lime_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lime_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lime_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lime_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lime_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "pink_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/pink_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/pink_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/pink_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/pink_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/pink_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/pink_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/pink_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/pink_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/pink_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/pink_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "gray_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/gray_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/gray_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/gray_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/gray_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/gray_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/gray_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/gray_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/gray_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/gray_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/gray_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_gray_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/light_gray_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_gray_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_gray_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_gray_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_gray_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/light_gray_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_gray_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_gray_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_gray_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_gray_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cyan_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/cyan_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cyan_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cyan_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cyan_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cyan_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/cyan_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cyan_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cyan_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cyan_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cyan_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "purple_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/purple_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/purple_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/purple_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/purple_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/purple_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/purple_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/purple_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/purple_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/purple_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/purple_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blue_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/blue_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blue_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blue_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blue_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blue_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/blue_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blue_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blue_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blue_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blue_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brown_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/brown_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brown_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brown_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brown_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brown_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/brown_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brown_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brown_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brown_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brown_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "green_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/green_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/green_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/green_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/green_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/green_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/green_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/green_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/green_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/green_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/green_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/red_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/red_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "black_stained_glass_pane_top"
    {
        token outputs:surface.connect = </Blocks/Looks/black_stained_glass_pane_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/black_stained_glass_pane_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/black_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/black_stained_glass_pane_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/black_stained_glass_pane_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.937255, 0.937255, 0.937255) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/black_stained_glass_pane_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.52 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/black_stained_glass_pane_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/black_stained_glass_pane_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.52
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/black_stained_glass_pane_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/black_stained_glass_pane_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "acacia_planks"
    {
        token outputs:surface.connect = </Blocks/Looks/acacia_planks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/acacia_planks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/acacia_planks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/acacia_planks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/acacia_planks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/acacia_planks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.611765, 0.505882, 0.286275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/acacia_planks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/acacia_planks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/acacia_planks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/acacia_planks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dark_oak_planks"
    {
        token outputs:surface.connect = </Blocks/Looks/dark_oak_planks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dark_oak_planks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dark_oak_planks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dark_oak_planks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dark_oak_planks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dark_oak_planks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.611765, 0.505882, 0.286275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dark_oak_planks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dark_oak_planks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dark_oak_planks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dark_oak_planks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "iron_trapdoor"
    {
        token outputs:surface.connect = </Blocks/Looks/iron_trapdoor/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/iron_trapdoor/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/iron_trapdoor/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/iron_trapdoor/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/iron_trapdoor/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/iron_trapdoor.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0.9 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/iron_trapdoor.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.15 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.752941, 0.752941, 0.752941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/iron_trapdoor/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/iron_trapdoor/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.15
            float inputs:metallic = 0.9
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/iron_trapdoor.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/iron_trapdoor/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "slime_block"
    {
        token outputs:surface.connect = </Blocks/Looks/slime_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/slime_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/slime_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/slime_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/slime_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0.34 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.470588, 0.470588, 0.470588) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            asset inputs:glass_color_texture = @textures/slime_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Color"
                displayName = "Glass Color Texture"
            )
            float inputs:glass_ior = 1.33 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.470588, 0.470588, 0.470588)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/slime_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/slime_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.33
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/slime_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/slime_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "andesite"
    {
        token outputs:surface.connect = </Blocks/Looks/andesite/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/andesite/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/andesite/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/andesite/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/andesite/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/andesite.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/andesite/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/andesite/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/andesite.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/andesite/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "polished_andesite"
    {
        token outputs:surface.connect = </Blocks/Looks/polished_andesite/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/polished_andesite/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/polished_andesite/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/polished_andesite/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/polished_andesite/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/polished_andesite.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/polished_andesite/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/polished_andesite/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/polished_andesite.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/polished_andesite/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "diorite"
    {
        token outputs:surface.connect = </Blocks/Looks/diorite/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/diorite/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/diorite/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/diorite/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/diorite/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/diorite.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/diorite/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/diorite/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/diorite.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/diorite/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "polished_diorite"
    {
        token outputs:surface.connect = </Blocks/Looks/polished_diorite/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/polished_diorite/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/polished_diorite/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/polished_diorite/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/polished_diorite/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/polished_diorite.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/polished_diorite/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/polished_diorite/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/polished_diorite.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/polished_diorite/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "granite"
    {
        token outputs:surface.connect = </Blocks/Looks/granite/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/granite/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/granite/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/granite/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/granite/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/granite.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/granite/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/granite/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/granite.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/granite/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "polished_granite"
    {
        token outputs:surface.connect = </Blocks/Looks/polished_granite/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/polished_granite/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/polished_granite/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/polished_granite/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/polished_granite/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/polished_granite.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/polished_granite/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/polished_granite/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/polished_granite.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/polished_granite/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "prismarine_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/prismarine_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/prismarine_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/prismarine_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/prismarine_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/prismarine_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/prismarine_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.4, 0.678431, 0.631373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/prismarine_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/prismarine_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/prismarine_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/prismarine_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dark_prismarine"
    {
        token outputs:surface.connect = </Blocks/Looks/dark_prismarine/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dark_prismarine/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dark_prismarine/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dark_prismarine/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dark_prismarine/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dark_prismarine.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.4, 0.678431, 0.631373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dark_prismarine/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dark_prismarine/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dark_prismarine.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dark_prismarine/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "prismarine"
    {
        token outputs:surface.connect = </Blocks/Looks/prismarine/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/prismarine/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/prismarine/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/prismarine/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/prismarine/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/prismarine.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.509804, 0.509804)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/prismarine/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/prismarine/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/prismarine.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/prismarine/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "daylight_detector_inverted_top"
    {
        token outputs:surface.connect = </Blocks/Looks/daylight_detector_inverted_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/daylight_detector_inverted_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/daylight_detector_inverted_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/daylight_detector_inverted_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/daylight_detector_inverted_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/daylight_detector_inverted_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.733333, 0.658824, 0.564706)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/daylight_detector_inverted_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/daylight_detector_inverted_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/daylight_detector_inverted_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/daylight_detector_inverted_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sea_lantern"
    {
        token outputs:surface.connect = </Blocks/Looks/sea_lantern/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sea_lantern/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sea_lantern/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sea_lantern/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sea_lantern/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sea_lantern.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.964706, 1, 0.964706) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/sea_lantern.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/sea_lantern_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0.8 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.15 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.964706, 1, 0.964706)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sea_lantern/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sea_lantern/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.15
            float inputs:metallic = 0.8
            color3f inputs:emissiveColor.connect = </Blocks/Looks/sea_lantern/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sea_lantern.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sea_lantern/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sea_lantern/uv_reader.outputs:result>
            float4 inputs:scale = (0.964706, 1, 0.964706, 1.0)
            float outputs:rgb
        }
    }

    def Material "wet_sponge"
    {
        token outputs:surface.connect = </Blocks/Looks/wet_sponge/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/wet_sponge/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/wet_sponge/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/wet_sponge/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/wet_sponge/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/wet_sponge.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.819608, 0.823529, 0.305882)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/wet_sponge/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/wet_sponge/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/wet_sponge.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/wet_sponge/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "spruce_door_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/spruce_door_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/spruce_door_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/spruce_door_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/spruce_door_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/spruce_door_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/spruce_door_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/spruce_door_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.478431, 0.352941, 0.211765)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/spruce_door_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/spruce_door_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/spruce_door_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/spruce_door_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "spruce_door_top"
    {
        token outputs:surface.connect = </Blocks/Looks/spruce_door_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/spruce_door_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/spruce_door_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/spruce_door_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/spruce_door_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/spruce_door_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/spruce_door_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.478431, 0.352941, 0.211765)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/spruce_door_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/spruce_door_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/spruce_door_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/spruce_door_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "birch_door_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/birch_door_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/birch_door_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/birch_door_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/birch_door_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/birch_door_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/birch_door_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/birch_door_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.839216, 0.792157, 0.54902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/birch_door_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/birch_door_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/birch_door_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/birch_door_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "birch_door_top"
    {
        token outputs:surface.connect = </Blocks/Looks/birch_door_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/birch_door_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/birch_door_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/birch_door_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/birch_door_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/birch_door_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/birch_door_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.839216, 0.792157, 0.54902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/birch_door_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/birch_door_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/birch_door_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/birch_door_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jungle_door_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/jungle_door_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jungle_door_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jungle_door_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jungle_door_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jungle_door_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jungle_door_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/jungle_door_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.509804, 0.368627)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jungle_door_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jungle_door_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jungle_door_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jungle_door_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jungle_door_top"
    {
        token outputs:surface.connect = </Blocks/Looks/jungle_door_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jungle_door_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jungle_door_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jungle_door_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jungle_door_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jungle_door_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/jungle_door_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.509804, 0.368627)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jungle_door_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jungle_door_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jungle_door_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jungle_door_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "acacia_door_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/acacia_door_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/acacia_door_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/acacia_door_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/acacia_door_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/acacia_door_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/acacia_door_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/acacia_door_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.694118, 0.4, 0.25098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/acacia_door_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/acacia_door_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/acacia_door_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/acacia_door_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "acacia_door_top"
    {
        token outputs:surface.connect = </Blocks/Looks/acacia_door_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/acacia_door_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/acacia_door_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/acacia_door_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/acacia_door_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/acacia_door_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/acacia_door_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.694118, 0.4, 0.25098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/acacia_door_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/acacia_door_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/acacia_door_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/acacia_door_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dark_oak_door_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/dark_oak_door_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dark_oak_door_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dark_oak_door_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dark_oak_door_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dark_oak_door_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dark_oak_door_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dark_oak_door_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.317647, 0.203922, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dark_oak_door_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dark_oak_door_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dark_oak_door_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dark_oak_door_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dark_oak_door_top"
    {
        token outputs:surface.connect = </Blocks/Looks/dark_oak_door_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dark_oak_door_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dark_oak_door_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dark_oak_door_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dark_oak_door_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dark_oak_door_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dark_oak_door_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.317647, 0.203922, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dark_oak_door_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dark_oak_door_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dark_oak_door_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dark_oak_door_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "smooth_stone"
    {
        token outputs:surface.connect = </Blocks/Looks/smooth_stone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/smooth_stone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/smooth_stone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/smooth_stone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/smooth_stone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/smooth_stone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.65098, 0.65098, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/smooth_stone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/smooth_stone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/smooth_stone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/smooth_stone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "smooth_stone_slab_side"
    {
        token outputs:surface.connect = </Blocks/Looks/smooth_stone_slab_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/smooth_stone_slab_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/smooth_stone_slab_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/smooth_stone_slab_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/smooth_stone_slab_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/smooth_stone_slab_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.65098, 0.65098, 0.65098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/smooth_stone_slab_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/smooth_stone_slab_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/smooth_stone_slab_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/smooth_stone_slab_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "end_rod"
    {
        token outputs:surface.connect = </Blocks/Looks/end_rod/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/end_rod/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/end_rod/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/end_rod/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/end_rod/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/end_rod.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.92549, 0.929412) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/end_rod.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 933.333 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/end_rod_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.92549, 0.929412)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/end_rod/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/end_rod/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/end_rod/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/end_rod.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/end_rod/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/end_rod/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.92549, 0.929412, 1.0)
            float outputs:rgb
        }
    }

    def Material "chorus_plant"
    {
        token outputs:surface.connect = </Blocks/Looks/chorus_plant/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chorus_plant/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chorus_plant/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chorus_plant/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chorus_plant/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chorus_plant.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.396078, 0.278431, 0.396078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chorus_plant/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chorus_plant/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chorus_plant.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chorus_plant/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chorus_flower"
    {
        token outputs:surface.connect = </Blocks/Looks/chorus_flower/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chorus_flower/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chorus_flower/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chorus_flower/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chorus_flower/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chorus_flower.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.576471, 0.494118, 0.576471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chorus_flower/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chorus_flower/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chorus_flower.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chorus_flower/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chorus_flower_dead"
    {
        token outputs:surface.connect = </Blocks/Looks/chorus_flower_dead/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chorus_flower_dead/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chorus_flower_dead/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chorus_flower_dead/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chorus_flower_dead/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chorus_flower_dead.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.576471, 0.494118, 0.576471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chorus_flower_dead/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chorus_flower_dead/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chorus_flower_dead.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chorus_flower_dead/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "purpur_block"
    {
        token outputs:surface.connect = </Blocks/Looks/purpur_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/purpur_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/purpur_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/purpur_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/purpur_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/purpur_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.25 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.654902, 0.482353, 0.654902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/purpur_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/purpur_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.25
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/purpur_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/purpur_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "purpur_pillar"
    {
        token outputs:surface.connect = </Blocks/Looks/purpur_pillar/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/purpur_pillar/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/purpur_pillar/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/purpur_pillar/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/purpur_pillar/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/purpur_pillar.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.25 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.67451, 0.509804, 0.67451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/purpur_pillar/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/purpur_pillar/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.25
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/purpur_pillar.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/purpur_pillar/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "purpur_pillar_top"
    {
        token outputs:surface.connect = </Blocks/Looks/purpur_pillar_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/purpur_pillar_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/purpur_pillar_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/purpur_pillar_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/purpur_pillar_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/purpur_pillar_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.25 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.67451, 0.509804, 0.67451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/purpur_pillar_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/purpur_pillar_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.25
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/purpur_pillar_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/purpur_pillar_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "end_stone_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/end_stone_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/end_stone_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/end_stone_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/end_stone_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/end_stone_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/end_stone_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.509804, 0.509804)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/end_stone_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/end_stone_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/end_stone_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/end_stone_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "beetroots_stage0"
    {
        token outputs:surface.connect = </Blocks/Looks/beetroots_stage0/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/beetroots_stage0/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/beetroots_stage0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/beetroots_stage0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/beetroots_stage0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/beetroots_stage0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/beetroots_stage0.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.427451, 0.498039, 0.266667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/beetroots_stage0/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/beetroots_stage0/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/beetroots_stage0.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/beetroots_stage0/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "beetroots_stage1"
    {
        token outputs:surface.connect = </Blocks/Looks/beetroots_stage1/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/beetroots_stage1/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/beetroots_stage1/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/beetroots_stage1/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/beetroots_stage1/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/beetroots_stage1.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/beetroots_stage1.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.427451, 0.498039, 0.266667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/beetroots_stage1/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/beetroots_stage1/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/beetroots_stage1.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/beetroots_stage1/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "beetroots_stage2"
    {
        token outputs:surface.connect = </Blocks/Looks/beetroots_stage2/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/beetroots_stage2/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/beetroots_stage2/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/beetroots_stage2/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/beetroots_stage2/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/beetroots_stage2.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/beetroots_stage2.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.427451, 0.498039, 0.266667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/beetroots_stage2/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/beetroots_stage2/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/beetroots_stage2.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/beetroots_stage2/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "beetroots_stage3"
    {
        token outputs:surface.connect = </Blocks/Looks/beetroots_stage3/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/beetroots_stage3/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/beetroots_stage3/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/beetroots_stage3/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/beetroots_stage3/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/beetroots_stage3.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/beetroots_stage3.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.427451, 0.498039, 0.266667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/beetroots_stage3/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/beetroots_stage3/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/beetroots_stage3.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/beetroots_stage3/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "grass_path_top"
    {
        token outputs:surface.connect = </Blocks/Looks/grass_path_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/grass_path_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/grass_path_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/grass_path_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/grass_path_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/grass_path_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.592157, 0.494118, 0.282353)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/grass_path_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/grass_path_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/grass_path_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/grass_path_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "grass_path_side"
    {
        token outputs:surface.connect = </Blocks/Looks/grass_path_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/grass_path_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/grass_path_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/grass_path_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/grass_path_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/grass_path_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.592157, 0.494118, 0.282353)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/grass_path_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/grass_path_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/grass_path_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/grass_path_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "command_block_front"
    {
        token outputs:surface.connect = </Blocks/Looks/command_block_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/command_block_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/command_block_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/command_block_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/command_block_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/command_block_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.545098, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/command_block_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/command_block_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/command_block_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/command_block_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "command_block_back"
    {
        token outputs:surface.connect = </Blocks/Looks/command_block_back/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/command_block_back/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/command_block_back/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/command_block_back/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/command_block_back/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/command_block_back.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.545098, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/command_block_back/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/command_block_back/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/command_block_back.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/command_block_back/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "command_block_side"
    {
        token outputs:surface.connect = </Blocks/Looks/command_block_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/command_block_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/command_block_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/command_block_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/command_block_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/command_block_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.545098, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/command_block_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/command_block_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/command_block_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/command_block_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "repeating_command_block_front"
    {
        token outputs:surface.connect = </Blocks/Looks/repeating_command_block_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/repeating_command_block_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/repeating_command_block_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/repeating_command_block_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/repeating_command_block_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/repeating_command_block_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.466667, 0.698039)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/repeating_command_block_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/repeating_command_block_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/repeating_command_block_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/repeating_command_block_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "repeating_command_block_back"
    {
        token outputs:surface.connect = </Blocks/Looks/repeating_command_block_back/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/repeating_command_block_back/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/repeating_command_block_back/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/repeating_command_block_back/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/repeating_command_block_back/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/repeating_command_block_back.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.466667, 0.698039)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/repeating_command_block_back/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/repeating_command_block_back/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/repeating_command_block_back.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/repeating_command_block_back/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "repeating_command_block_side"
    {
        token outputs:surface.connect = </Blocks/Looks/repeating_command_block_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/repeating_command_block_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/repeating_command_block_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/repeating_command_block_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/repeating_command_block_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/repeating_command_block_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.466667, 0.698039)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/repeating_command_block_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/repeating_command_block_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/repeating_command_block_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/repeating_command_block_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chain_command_block_front"
    {
        token outputs:surface.connect = </Blocks/Looks/chain_command_block_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chain_command_block_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chain_command_block_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chain_command_block_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chain_command_block_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chain_command_block_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.541176, 0.647059, 0.603922)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chain_command_block_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chain_command_block_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chain_command_block_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chain_command_block_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chain_command_block_back"
    {
        token outputs:surface.connect = </Blocks/Looks/chain_command_block_back/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chain_command_block_back/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chain_command_block_back/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chain_command_block_back/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chain_command_block_back/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chain_command_block_back.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.541176, 0.647059, 0.603922)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chain_command_block_back/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chain_command_block_back/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chain_command_block_back.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chain_command_block_back/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chain_command_block_side"
    {
        token outputs:surface.connect = </Blocks/Looks/chain_command_block_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chain_command_block_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chain_command_block_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chain_command_block_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chain_command_block_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chain_command_block_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.541176, 0.647059, 0.603922)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chain_command_block_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chain_command_block_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chain_command_block_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chain_command_block_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "frosted_ice_0"
    {
        token outputs:surface.connect = </Blocks/Looks/frosted_ice_0/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/frosted_ice_0/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/frosted_ice_0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/frosted_ice_0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/frosted_ice_0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/frosted_ice_0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/frosted_ice_0.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.1 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.505882, 0.686275, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/frosted_ice_0/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/frosted_ice_0/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/frosted_ice_0.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/frosted_ice_0/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "frosted_ice_1"
    {
        token outputs:surface.connect = </Blocks/Looks/frosted_ice_1/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/frosted_ice_1/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/frosted_ice_1/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/frosted_ice_1/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/frosted_ice_1/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/frosted_ice_1.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/frosted_ice_1.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.1 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.505882, 0.686275, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/frosted_ice_1/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/frosted_ice_1/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/frosted_ice_1.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/frosted_ice_1/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "frosted_ice_2"
    {
        token outputs:surface.connect = </Blocks/Looks/frosted_ice_2/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/frosted_ice_2/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/frosted_ice_2/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/frosted_ice_2/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/frosted_ice_2/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/frosted_ice_2.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/frosted_ice_2.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.1 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.505882, 0.686275, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/frosted_ice_2/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/frosted_ice_2/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/frosted_ice_2.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/frosted_ice_2/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "frosted_ice_3"
    {
        token outputs:surface.connect = </Blocks/Looks/frosted_ice_3/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/frosted_ice_3/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/frosted_ice_3/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/frosted_ice_3/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/frosted_ice_3/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/frosted_ice_3.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/frosted_ice_3.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.1 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.505882, 0.686275, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/frosted_ice_3/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/frosted_ice_3/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/frosted_ice_3.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/frosted_ice_3/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "structure_block_data"
    {
        token outputs:surface.connect = </Blocks/Looks/structure_block_data/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/structure_block_data/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/structure_block_data/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/structure_block_data/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/structure_block_data/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/structure_block_data.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.4, 0.368627, 0.372549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/structure_block_data/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/structure_block_data/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/structure_block_data.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/structure_block_data/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "structure_block_load"
    {
        token outputs:surface.connect = </Blocks/Looks/structure_block_load/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/structure_block_load/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/structure_block_load/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/structure_block_load/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/structure_block_load/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/structure_block_load.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.4, 0.368627, 0.372549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/structure_block_load/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/structure_block_load/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/structure_block_load.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/structure_block_load/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "structure_block_save"
    {
        token outputs:surface.connect = </Blocks/Looks/structure_block_save/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/structure_block_save/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/structure_block_save/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/structure_block_save/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/structure_block_save/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/structure_block_save.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.4, 0.368627, 0.372549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/structure_block_save/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/structure_block_save/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/structure_block_save.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/structure_block_save/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "magma"
    {
        token outputs:surface.connect = </Blocks/Looks/magma/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/magma/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/magma/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/magma/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/magma/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/magma.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.498039, 0.184314) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/magma.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 200 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/magma_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.498039, 0.184314)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/magma/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/magma/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/magma/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/magma.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/magma/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/magma/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.498039, 0.184314, 1.0)
            float outputs:rgb
        }
    }

    def Material "nether_wart_block"
    {
        token outputs:surface.connect = </Blocks/Looks/nether_wart_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/nether_wart_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/nether_wart_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/nether_wart_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/nether_wart_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/nether_wart_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.466667, 0.0470588, 0.0509804)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/nether_wart_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/nether_wart_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/nether_wart_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/nether_wart_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_nether_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/red_nether_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_nether_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_nether_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_nether_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_nether_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_nether_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.509804, 0.509804)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_nether_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_nether_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_nether_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_nether_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bone_block_side"
    {
        token outputs:surface.connect = </Blocks/Looks/bone_block_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bone_block_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bone_block_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bone_block_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bone_block_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bone_block_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.882353, 0.866667, 0.788235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bone_block_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bone_block_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bone_block_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bone_block_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bone_block_top"
    {
        token outputs:surface.connect = </Blocks/Looks/bone_block_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bone_block_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bone_block_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bone_block_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bone_block_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bone_block_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.882353, 0.866667, 0.788235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bone_block_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bone_block_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bone_block_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bone_block_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_chest_latch"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_chest_latch/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_chest_latch/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_chest_latch/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_chest_latch/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_chest_latch/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_chest_latch.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.627451, 0.435294, 0.137255)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_chest_latch/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_chest_latch/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_chest_latch.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_chest_latch/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "water_flow"
    {
        token outputs:surface.connect = </Blocks/Looks/water_flow/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/water_flow/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/water_flow/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/water_flow/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/water_flow/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
            float inputs:depth = 0.001 (
                displayGroup = "Color"
                displayName = "Volume Absorption Scale"
            )
            float inputs:frosting_roughness = 0 (
                displayGroup = "Roughness"
                displayName = "Glass Roughness"
            )
            color3f inputs:glass_color = (0.643137, 0.729412, 0.996078) (
                displayGroup = "Color"
                displayName = "Glass Color"
            )
            float inputs:glass_ior = 1.33 (
                displayGroup = "Refraction"
                displayName = "Glass IOR"
            )
            asset inputs:normal_map_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map Texture"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.643137, 0.729412, 0.996078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/water_flow/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/water_flow/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:ior = 1.33
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/water_flow_y.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/water_flow/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lava_flow"
    {
        token outputs:surface.connect = </Blocks/Looks/lava_flow/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lava_flow/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lava_flow/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lava_flow/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lava_flow/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lava_flow.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.443137, 0) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/lava_flow.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/lava_flow_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.443137, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lava_flow/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lava_flow/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/lava_flow/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lava_flow.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lava_flow/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lava_flow/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.443137, 0, 1.0)
            float outputs:rgb
        }
    }

    def Material "MWO_redstone_dust_line0_off"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_redstone_dust_line0_off/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_redstone_dust_line0_off/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_redstone_dust_line0_off/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_redstone_dust_line0_off/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_redstone_dust_line0_off/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_redstone_dust_line0_off.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/MWO_redstone_dust_line0_off.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.839216, 0, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_redstone_dust_line0_off/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_redstone_dust_line0_off/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_redstone_dust_line0_off.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_redstone_dust_line0_off/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_redstone_dust_line1_off"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_redstone_dust_line1_off/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_redstone_dust_line1_off/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_redstone_dust_line1_off/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_redstone_dust_line1_off/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_redstone_dust_line1_off/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_redstone_dust_line1_off.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/MWO_redstone_dust_line1_off.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.839216, 0, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_redstone_dust_line1_off/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_redstone_dust_line1_off/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_redstone_dust_line1_off.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_redstone_dust_line1_off/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_redstone_dust_dot_off"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_redstone_dust_dot_off/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_redstone_dust_dot_off/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_redstone_dust_dot_off/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_redstone_dust_dot_off/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_redstone_dust_dot_off/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_redstone_dust_dot_off.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/MWO_redstone_dust_dot_off.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.839216, 0, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_redstone_dust_dot_off/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_redstone_dust_dot_off/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_redstone_dust_dot_off.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_redstone_dust_dot_off/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_redstone_dust_angled_off"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_redstone_dust_angled_off/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_redstone_dust_angled_off/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_redstone_dust_angled_off/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_redstone_dust_angled_off/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_redstone_dust_angled_off/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_redstone_dust_angled_off.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/MWO_redstone_dust_angled_off.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.839216, 0, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_redstone_dust_angled_off/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_redstone_dust_angled_off/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_redstone_dust_angled_off.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_redstone_dust_angled_off/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_redstone_dust_three_way_off"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_redstone_dust_three_way_off/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_redstone_dust_three_way_off/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_redstone_dust_three_way_off/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_redstone_dust_three_way_off/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_redstone_dust_three_way_off/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_redstone_dust_three_way_off.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/MWO_redstone_dust_three_way_off.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.839216, 0, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_redstone_dust_three_way_off/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_redstone_dust_three_way_off/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_redstone_dust_three_way_off.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_redstone_dust_three_way_off/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "MWO_redstone_dust_four_way_off"
    {
        token outputs:surface.connect = </Blocks/Looks/MWO_redstone_dust_four_way_off/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/MWO_redstone_dust_four_way_off/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/MWO_redstone_dust_four_way_off/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/MWO_redstone_dust_four_way_off/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/MWO_redstone_dust_four_way_off/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/MWO_redstone_dust_four_way_off.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/MWO_redstone_dust_four_way_off.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.839216, 0, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/MWO_redstone_dust_four_way_off/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/MWO_redstone_dust_four_way_off/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/MWO_redstone_dust_four_way_off.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/MWO_redstone_dust_four_way_off/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "white_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/white_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/white_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/white_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/white_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/white_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/white_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.847059, 0.866667, 0.870588)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/white_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/white_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/white_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/white_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "orange_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/orange_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/orange_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/orange_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/orange_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/orange_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/orange_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.921569, 0.419608, 0.0431373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/orange_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/orange_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/orange_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/orange_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "magenta_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/magenta_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/magenta_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/magenta_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/magenta_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/magenta_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/magenta_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.682353, 0.215686, 0.643137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/magenta_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/magenta_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/magenta_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/magenta_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_blue_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/light_blue_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_blue_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_blue_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_blue_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_blue_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/light_blue_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.647059, 0.831373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_blue_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_blue_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_blue_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_blue_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "yellow_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/yellow_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/yellow_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/yellow_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/yellow_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/yellow_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/yellow_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.972549, 0.741176, 0.117647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/yellow_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/yellow_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/yellow_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/yellow_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lime_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/lime_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lime_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lime_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lime_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lime_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lime_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.396078, 0.682353, 0.0901961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lime_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lime_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lime_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lime_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "pink_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/pink_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/pink_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/pink_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/pink_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/pink_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/pink_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.905882, 0.482353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/pink_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/pink_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/pink_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/pink_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "gray_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/gray_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/gray_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/gray_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/gray_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/gray_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/gray_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.219608, 0.231373, 0.247059)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/gray_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/gray_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/gray_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/gray_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_gray_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/light_gray_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_gray_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_gray_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_gray_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_gray_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/light_gray_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.494118, 0.494118, 0.458824)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_gray_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_gray_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_gray_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_gray_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cyan_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/cyan_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cyan_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cyan_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cyan_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cyan_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cyan_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.0784314, 0.478431, 0.533333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cyan_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cyan_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cyan_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cyan_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "purple_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/purple_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/purple_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/purple_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/purple_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/purple_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/purple_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.380392, 0.54902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/purple_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/purple_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/purple_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/purple_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blue_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/blue_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blue_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blue_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blue_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blue_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blue_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.172549, 0.180392, 0.552941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blue_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blue_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blue_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blue_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brown_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/brown_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brown_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brown_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brown_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brown_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brown_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.419608, 0.258824, 0.141176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brown_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brown_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brown_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brown_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "green_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/green_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/green_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/green_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/green_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/green_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/green_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.309804, 0.396078, 0.12549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/green_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/green_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/green_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/green_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/red_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.556863, 0.12549, 0.121569)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "black_shulker_box"
    {
        token outputs:surface.connect = </Blocks/Looks/black_shulker_box/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/black_shulker_box/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/black_shulker_box/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/black_shulker_box/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/black_shulker_box/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/black_shulker_box.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.101961, 0.101961, 0.117647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/black_shulker_box/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/black_shulker_box/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/black_shulker_box.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/black_shulker_box/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "white_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/white_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/white_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/white_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/white_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/white_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/white_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.831373, 0.858824, 0.843137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/white_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/white_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/white_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/white_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "orange_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/orange_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/orange_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/orange_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/orange_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/orange_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/orange_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.752941, 0.603922, 0.498039)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/orange_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/orange_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/orange_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/orange_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "magenta_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/magenta_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/magenta_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/magenta_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/magenta_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/magenta_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/magenta_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.823529, 0.435294, 0.756863)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/magenta_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/magenta_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/magenta_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/magenta_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_blue_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/light_blue_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_blue_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_blue_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_blue_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_blue_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/light_blue_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.501961, 0.701961, 0.831373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_blue_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_blue_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_blue_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_blue_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "yellow_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/yellow_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/yellow_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/yellow_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/yellow_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/yellow_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/yellow_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.929412, 0.776471, 0.443137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/yellow_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/yellow_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/yellow_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/yellow_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lime_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/lime_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lime_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lime_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lime_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lime_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lime_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.690196, 0.784314, 0.309804)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lime_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lime_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lime_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lime_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "pink_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/pink_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/pink_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/pink_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/pink_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/pink_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/pink_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.92549, 0.619608, 0.717647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/pink_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/pink_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/pink_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/pink_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "gray_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/gray_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/gray_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/gray_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/gray_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/gray_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/gray_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.356863, 0.380392, 0.392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/gray_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/gray_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/gray_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/gray_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_gray_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/light_gray_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_gray_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_gray_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_gray_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_gray_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/light_gray_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.623529, 0.67451, 0.678431)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_gray_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_gray_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_gray_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_gray_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cyan_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/cyan_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cyan_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cyan_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cyan_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cyan_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cyan_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.309804, 0.509804, 0.533333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cyan_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cyan_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cyan_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cyan_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "purple_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/purple_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/purple_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/purple_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/purple_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/purple_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/purple_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.2, 0.647059)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/purple_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/purple_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/purple_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/purple_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blue_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/blue_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blue_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blue_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blue_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blue_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blue_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.301961, 0.596078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blue_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blue_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blue_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blue_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brown_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/brown_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brown_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brown_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brown_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brown_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brown_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.537255, 0.431373, 0.376471)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brown_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brown_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brown_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brown_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "green_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/green_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/green_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/green_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/green_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/green_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/green_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.498039, 0.584314, 0.388235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/green_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/green_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/green_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/green_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/red_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.721569, 0.262745, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "black_glazed_terracotta"
    {
        token outputs:surface.connect = </Blocks/Looks/black_glazed_terracotta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/black_glazed_terracotta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/black_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/black_glazed_terracotta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/black_glazed_terracotta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/black_glazed_terracotta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.2 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.34902, 0.133333, 0.145098)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/black_glazed_terracotta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/black_glazed_terracotta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.2
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/black_glazed_terracotta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/black_glazed_terracotta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "white_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/white_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/white_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/white_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/white_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/white_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/white_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.847059, 0.866667, 0.870588)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/white_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/white_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/white_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/white_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "orange_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/orange_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/orange_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/orange_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/orange_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/orange_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/orange_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/orange_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/orange_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/orange_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/orange_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "magenta_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/magenta_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/magenta_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/magenta_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/magenta_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/magenta_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/magenta_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/magenta_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/magenta_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/magenta_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/magenta_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_blue_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/light_blue_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_blue_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_blue_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_blue_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_blue_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/light_blue_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_blue_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_blue_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_blue_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_blue_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "yellow_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/yellow_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/yellow_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/yellow_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/yellow_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/yellow_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/yellow_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/yellow_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/yellow_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/yellow_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/yellow_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lime_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/lime_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lime_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lime_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lime_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lime_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lime_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lime_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lime_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lime_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lime_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "pink_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/pink_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/pink_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/pink_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/pink_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/pink_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/pink_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/pink_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/pink_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/pink_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/pink_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "gray_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/gray_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/gray_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/gray_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/gray_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/gray_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/gray_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/gray_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/gray_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/gray_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/gray_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_gray_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/light_gray_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_gray_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_gray_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_gray_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_gray_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/light_gray_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_gray_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_gray_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_gray_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_gray_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cyan_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/cyan_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cyan_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cyan_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cyan_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cyan_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cyan_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cyan_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cyan_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cyan_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cyan_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "purple_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/purple_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/purple_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/purple_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/purple_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/purple_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/purple_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/purple_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/purple_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/purple_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/purple_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blue_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/blue_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blue_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blue_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blue_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blue_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blue_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blue_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blue_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blue_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blue_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brown_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/brown_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brown_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brown_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brown_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brown_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brown_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brown_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brown_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brown_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brown_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "green_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/green_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/green_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/green_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/green_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/green_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/green_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/green_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/green_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/green_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/green_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/red_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "black_concrete"
    {
        token outputs:surface.connect = </Blocks/Looks/black_concrete/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/black_concrete/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/black_concrete/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/black_concrete/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/black_concrete/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/black_concrete.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.811765, 0.835294, 0.839216)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/black_concrete/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/black_concrete/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/black_concrete.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/black_concrete/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "white_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/white_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/white_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/white_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/white_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/white_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/white_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/white_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/white_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/white_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/white_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "orange_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/orange_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/orange_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/orange_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/orange_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/orange_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/orange_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/orange_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/orange_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/orange_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/orange_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "magenta_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/magenta_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/magenta_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/magenta_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/magenta_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/magenta_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/magenta_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/magenta_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/magenta_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/magenta_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/magenta_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_blue_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/light_blue_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_blue_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_blue_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_blue_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_blue_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/light_blue_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_blue_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_blue_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_blue_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_blue_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "yellow_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/yellow_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/yellow_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/yellow_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/yellow_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/yellow_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/yellow_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/yellow_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/yellow_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/yellow_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/yellow_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lime_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/lime_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lime_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lime_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lime_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lime_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lime_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lime_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lime_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lime_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lime_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "pink_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/pink_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/pink_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/pink_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/pink_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/pink_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/pink_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/pink_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/pink_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/pink_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/pink_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "gray_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/gray_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/gray_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/gray_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/gray_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/gray_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/gray_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/gray_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/gray_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/gray_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/gray_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "light_gray_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/light_gray_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/light_gray_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/light_gray_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/light_gray_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/light_gray_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/light_gray_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/light_gray_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/light_gray_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/light_gray_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/light_gray_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cyan_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/cyan_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cyan_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cyan_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cyan_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cyan_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cyan_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cyan_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cyan_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cyan_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cyan_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "purple_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/purple_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/purple_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/purple_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/purple_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/purple_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/purple_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/purple_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/purple_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/purple_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/purple_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blue_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/blue_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blue_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blue_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blue_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blue_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blue_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blue_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blue_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blue_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blue_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brown_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/brown_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brown_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brown_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brown_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brown_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brown_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brown_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brown_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brown_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brown_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "green_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/green_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/green_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/green_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/green_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/green_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/green_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/green_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/green_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/green_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/green_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "red_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/red_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/red_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/red_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/red_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/red_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/red_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/red_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/red_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/red_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/red_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "black_concrete_powder"
    {
        token outputs:surface.connect = </Blocks/Looks/black_concrete_powder/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/black_concrete_powder/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/black_concrete_powder/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/black_concrete_powder/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/black_concrete_powder/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/black_concrete_powder.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.886275, 0.894118, 0.894118)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/black_concrete_powder/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/black_concrete_powder/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/black_concrete_powder.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/black_concrete_powder/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_white"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_white/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_white/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_white/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_white/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_white/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_white.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.847059, 0.866667, 0.870588)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_white/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_white/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_white.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_white/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_orange"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_orange/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_orange/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_orange/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_orange/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_orange/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_orange.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.921569, 0.419608, 0.0431373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_orange/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_orange/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_orange.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_orange/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_magenta"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_magenta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_magenta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_magenta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_magenta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_magenta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_magenta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.682353, 0.215686, 0.643137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_magenta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_magenta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_magenta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_magenta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_light_blue"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_light_blue/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_light_blue/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_light_blue/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_light_blue/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_light_blue/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_light_blue.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.647059, 0.831373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_light_blue/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_light_blue/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_light_blue.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_light_blue/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_yellow"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_yellow/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_yellow/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_yellow/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_yellow/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_yellow/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_yellow.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.972549, 0.741176, 0.117647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_yellow/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_yellow/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_yellow.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_yellow/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_lime"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_lime/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_lime/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_lime/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_lime/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_lime/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_lime.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.396078, 0.682353, 0.0901961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_lime/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_lime/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_lime.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_lime/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_pink"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_pink/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_pink/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_pink/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_pink/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_pink/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_pink.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.905882, 0.482353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_pink/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_pink/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_pink.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_pink/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_gray"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_gray/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_gray/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_gray/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_gray/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_gray/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_gray.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.219608, 0.231373, 0.247059)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_gray/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_gray/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_gray.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_gray/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_silver"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_silver/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_silver/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_silver/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_silver/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_silver/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_silver.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.494118, 0.494118, 0.458824)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_silver/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_silver/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_silver.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_silver/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_cyan"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_cyan/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_cyan/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_cyan/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_cyan/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_cyan/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_cyan.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.0784314, 0.478431, 0.533333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_cyan/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_cyan/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_cyan.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_cyan/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_purple"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_purple/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_purple/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_purple/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_purple/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_purple/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_purple.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.380392, 0.54902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_purple/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_purple/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_purple.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_purple/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_blue"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_blue/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_blue/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_blue/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_blue/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_blue/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_blue.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.172549, 0.180392, 0.552941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_blue/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_blue/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_blue.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_blue/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_brown"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_brown/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_brown/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_brown/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_brown/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_brown/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_brown.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.419608, 0.258824, 0.141176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_brown/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_brown/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_brown.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_brown/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_green"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_green/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_green/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_green/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_green/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_green/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_green.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.309804, 0.396078, 0.12549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_green/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_green/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_green.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_green/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_red"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_red/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_red/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_red/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_red/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_red/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_red.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.556863, 0.12549, 0.121569)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_red/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_red/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_red.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_red/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_side_black"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_side_black/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_side_black/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_side_black/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_side_black/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_side_black/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_side_black.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.101961, 0.101961, 0.117647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_side_black/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_side_black/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_side_black.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_side_black/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_white"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_white/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_white/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_white/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_white/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_white/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_white.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.847059, 0.866667, 0.870588)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_white/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_white/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_white.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_white/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_orange"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_orange/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_orange/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_orange/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_orange/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_orange/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_orange.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.921569, 0.419608, 0.0431373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_orange/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_orange/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_orange.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_orange/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_magenta"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_magenta/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_magenta/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_magenta/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_magenta/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_magenta/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_magenta.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.682353, 0.215686, 0.643137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_magenta/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_magenta/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_magenta.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_magenta/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_light_blue"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_light_blue/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_light_blue/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_light_blue/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_light_blue/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_light_blue/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_light_blue.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.647059, 0.831373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_light_blue/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_light_blue/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_light_blue.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_light_blue/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_yellow"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_yellow/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_yellow/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_yellow/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_yellow/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_yellow/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_yellow.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.972549, 0.741176, 0.117647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_yellow/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_yellow/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_yellow.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_yellow/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_lime"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_lime/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_lime/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_lime/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_lime/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_lime/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_lime.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.396078, 0.682353, 0.0901961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_lime/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_lime/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_lime.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_lime/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_pink"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_pink/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_pink/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_pink/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_pink/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_pink/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_pink.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.905882, 0.482353, 0.619608)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_pink/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_pink/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_pink.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_pink/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_gray"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_gray/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_gray/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_gray/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_gray/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_gray/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_gray.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.219608, 0.231373, 0.247059)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_gray/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_gray/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_gray.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_gray/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_silver"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_silver/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_silver/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_silver/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_silver/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_silver/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_silver.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.494118, 0.494118, 0.458824)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_silver/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_silver/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_silver.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_silver/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_cyan"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_cyan/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_cyan/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_cyan/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_cyan/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_cyan/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_cyan.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.0784314, 0.478431, 0.533333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_cyan/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_cyan/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_cyan.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_cyan/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_purple"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_purple/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_purple/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_purple/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_purple/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_purple/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_purple.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.380392, 0.54902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_purple/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_purple/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_purple.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_purple/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_blue"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_blue/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_blue/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_blue/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_blue/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_blue/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_blue.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.172549, 0.180392, 0.552941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_blue/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_blue/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_blue.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_blue/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_brown"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_brown/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_brown/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_brown/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_brown/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_brown/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_brown.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.419608, 0.258824, 0.141176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_brown/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_brown/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_brown.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_brown/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_green"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_green/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_green/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_green/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_green/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_green/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_green.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.309804, 0.396078, 0.12549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_green/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_green/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_green.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_green/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_red"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_red/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_red/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_red/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_red/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_red/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_red.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.556863, 0.12549, 0.121569)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_red/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_red/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_red.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_red/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shulker_bottom_black"
    {
        token outputs:surface.connect = </Blocks/Looks/shulker_bottom_black/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shulker_bottom_black/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shulker_bottom_black/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shulker_bottom_black/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shulker_bottom_black/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shulker_bottom_black.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.101961, 0.101961, 0.117647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shulker_bottom_black/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shulker_bottom_black/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shulker_bottom_black.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shulker_bottom_black/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "observer_back"
    {
        token outputs:surface.connect = </Blocks/Looks/observer_back/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/observer_back/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/observer_back/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/observer_back/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/observer_back/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/observer_back.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.431373, 0.431373, 0.431373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/observer_back/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/observer_back/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/observer_back.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/observer_back/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "observer_front"
    {
        token outputs:surface.connect = </Blocks/Looks/observer_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/observer_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/observer_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/observer_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/observer_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/observer_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.431373, 0.431373, 0.431373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/observer_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/observer_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/observer_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/observer_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "observer_side"
    {
        token outputs:surface.connect = </Blocks/Looks/observer_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/observer_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/observer_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/observer_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/observer_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/observer_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.431373, 0.431373, 0.431373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/observer_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/observer_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/observer_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/observer_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "observer_top"
    {
        token outputs:surface.connect = </Blocks/Looks/observer_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/observer_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/observer_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/observer_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/observer_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/observer_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.431373, 0.431373, 0.431373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/observer_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/observer_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/observer_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/observer_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dried_kelp_top"
    {
        token outputs:surface.connect = </Blocks/Looks/dried_kelp_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dried_kelp_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dried_kelp_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dried_kelp_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dried_kelp_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dried_kelp_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.254902, 0.270588, 0.203922)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dried_kelp_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dried_kelp_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dried_kelp_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dried_kelp_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dried_kelp_side"
    {
        token outputs:surface.connect = </Blocks/Looks/dried_kelp_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dried_kelp_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dried_kelp_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dried_kelp_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dried_kelp_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dried_kelp_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.254902, 0.270588, 0.203922)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dried_kelp_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dried_kelp_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dried_kelp_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dried_kelp_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dried_kelp_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/dried_kelp_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dried_kelp_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dried_kelp_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dried_kelp_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dried_kelp_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dried_kelp_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.254902, 0.270588, 0.203922)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dried_kelp_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dried_kelp_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dried_kelp_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dried_kelp_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "kelp"
    {
        token outputs:surface.connect = </Blocks/Looks/kelp/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/kelp/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/kelp/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/kelp/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/kelp/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/kelp.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/kelp.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.345098, 0.568627, 0.180392)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/kelp/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/kelp/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/kelp.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/kelp/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "kelp_plant"
    {
        token outputs:surface.connect = </Blocks/Looks/kelp_plant/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/kelp_plant/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/kelp_plant/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/kelp_plant/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/kelp_plant/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/kelp_plant.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/kelp_plant.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.345098, 0.568627, 0.180392)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/kelp_plant/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/kelp_plant/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/kelp_plant.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/kelp_plant/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sea_pickle"
    {
        token outputs:surface.connect = </Blocks/Looks/sea_pickle/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sea_pickle/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sea_pickle/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sea_pickle/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sea_pickle/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sea_pickle.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.905882, 1, 0.552941) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/sea_pickle.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 400 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/sea_pickle_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/sea_pickle.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.905882, 1, 0.552941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sea_pickle/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sea_pickle/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/sea_pickle/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sea_pickle.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sea_pickle/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sea_pickle/uv_reader.outputs:result>
            float4 inputs:scale = (0.905882, 1, 0.552941, 1.0)
            float outputs:rgb
        }
    }

    def Material "blue_ice"
    {
        token outputs:surface.connect = </Blocks/Looks/blue_ice/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blue_ice/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blue_ice/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blue_ice/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blue_ice/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blue_ice.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.1 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.458824, 0.658824, 0.992157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blue_ice/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blue_ice/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blue_ice.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blue_ice/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "tall_seagrass_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/tall_seagrass_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/tall_seagrass_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/tall_seagrass_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/tall_seagrass_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/tall_seagrass_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/tall_seagrass_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/tall_seagrass_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.188235, 0.47451, 0.054902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/tall_seagrass_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/tall_seagrass_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/tall_seagrass_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/tall_seagrass_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "tall_seagrass_top"
    {
        token outputs:surface.connect = </Blocks/Looks/tall_seagrass_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/tall_seagrass_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/tall_seagrass_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/tall_seagrass_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/tall_seagrass_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/tall_seagrass_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/tall_seagrass_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.188235, 0.47451, 0.054902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/tall_seagrass_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/tall_seagrass_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/tall_seagrass_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/tall_seagrass_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_oak_log"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_oak_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_oak_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_oak_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_oak_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_oak_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_oak_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.568627, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_oak_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_oak_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_oak_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_oak_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_spruce_log"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_spruce_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_spruce_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_spruce_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_spruce_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_spruce_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_spruce_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.568627, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_spruce_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_spruce_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_spruce_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_spruce_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_birch_log"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_birch_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_birch_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_birch_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_birch_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_birch_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_birch_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.568627, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_birch_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_birch_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_birch_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_birch_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_jungle_log"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_jungle_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_jungle_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_jungle_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_jungle_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_jungle_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_jungle_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.568627, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_jungle_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_jungle_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_jungle_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_jungle_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_acacia_log"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_acacia_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_acacia_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_acacia_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_acacia_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_acacia_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_acacia_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.658824, 0.360784, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_acacia_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_acacia_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_acacia_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_acacia_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_dark_oak_log"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_dark_oak_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_dark_oak_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_dark_oak_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_dark_oak_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_dark_oak_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_dark_oak_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.658824, 0.360784, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_dark_oak_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_dark_oak_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_dark_oak_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_dark_oak_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_oak_log_top"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_oak_log_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_oak_log_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_oak_log_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_oak_log_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_oak_log_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_oak_log_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.568627, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_oak_log_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_oak_log_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_oak_log_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_oak_log_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_spruce_log_top"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_spruce_log_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_spruce_log_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_spruce_log_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_spruce_log_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_spruce_log_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_spruce_log_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.568627, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_spruce_log_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_spruce_log_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_spruce_log_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_spruce_log_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_birch_log_top"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_birch_log_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_birch_log_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_birch_log_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_birch_log_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_birch_log_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_birch_log_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.568627, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_birch_log_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_birch_log_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_birch_log_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_birch_log_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_jungle_log_top"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_jungle_log_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_jungle_log_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_jungle_log_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_jungle_log_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_jungle_log_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_jungle_log_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.698039, 0.568627, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_jungle_log_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_jungle_log_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_jungle_log_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_jungle_log_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_acacia_log_top"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_acacia_log_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_acacia_log_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_acacia_log_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_acacia_log_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_acacia_log_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_acacia_log_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.658824, 0.360784, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_acacia_log_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_acacia_log_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_acacia_log_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_acacia_log_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_dark_oak_log_top"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_dark_oak_log_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_dark_oak_log_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_dark_oak_log_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_dark_oak_log_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_dark_oak_log_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_dark_oak_log_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.658824, 0.360784, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_dark_oak_log_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_dark_oak_log_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_dark_oak_log_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_dark_oak_log_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "spruce_trapdoor"
    {
        token outputs:surface.connect = </Blocks/Looks/spruce_trapdoor/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/spruce_trapdoor/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/spruce_trapdoor/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/spruce_trapdoor/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/spruce_trapdoor/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/spruce_trapdoor.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/spruce_trapdoor.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.403922, 0.305882, 0.203922)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/spruce_trapdoor/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/spruce_trapdoor/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/spruce_trapdoor.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/spruce_trapdoor/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "birch_trapdoor"
    {
        token outputs:surface.connect = </Blocks/Looks/birch_trapdoor/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/birch_trapdoor/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/birch_trapdoor/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/birch_trapdoor/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/birch_trapdoor/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/birch_trapdoor.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/birch_trapdoor.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.827451, 0.784314, 0.658824)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/birch_trapdoor/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/birch_trapdoor/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/birch_trapdoor.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/birch_trapdoor/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jungle_trapdoor"
    {
        token outputs:surface.connect = </Blocks/Looks/jungle_trapdoor/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jungle_trapdoor/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jungle_trapdoor/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jungle_trapdoor/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jungle_trapdoor/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jungle_trapdoor.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/jungle_trapdoor.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.615686, 0.447059, 0.313726)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jungle_trapdoor/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jungle_trapdoor/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jungle_trapdoor.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jungle_trapdoor/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "acacia_trapdoor"
    {
        token outputs:surface.connect = </Blocks/Looks/acacia_trapdoor/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/acacia_trapdoor/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/acacia_trapdoor/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/acacia_trapdoor/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/acacia_trapdoor/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/acacia_trapdoor.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/acacia_trapdoor.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.627451, 0.34902, 0.211765)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/acacia_trapdoor/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/acacia_trapdoor/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/acacia_trapdoor.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/acacia_trapdoor/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dark_oak_trapdoor"
    {
        token outputs:surface.connect = </Blocks/Looks/dark_oak_trapdoor/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dark_oak_trapdoor/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dark_oak_trapdoor/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dark_oak_trapdoor/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dark_oak_trapdoor/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dark_oak_trapdoor.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dark_oak_trapdoor.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.305882, 0.2, 0.0941176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dark_oak_trapdoor/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dark_oak_trapdoor/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dark_oak_trapdoor.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dark_oak_trapdoor/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_tube_coral_block"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_tube_coral_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_tube_coral_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_tube_coral_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_tube_coral_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_tube_coral_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_tube_coral_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_tube_coral_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_tube_coral_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_tube_coral_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_tube_coral_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_brain_coral_block"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_brain_coral_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_brain_coral_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_brain_coral_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_brain_coral_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_brain_coral_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_brain_coral_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_brain_coral_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_brain_coral_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_brain_coral_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_brain_coral_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_bubble_coral_block"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_bubble_coral_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_bubble_coral_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_bubble_coral_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_bubble_coral_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_bubble_coral_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_bubble_coral_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_bubble_coral_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_bubble_coral_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_bubble_coral_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_bubble_coral_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_fire_coral_block"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_fire_coral_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_fire_coral_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_fire_coral_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_fire_coral_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_fire_coral_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_fire_coral_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_fire_coral_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_fire_coral_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_fire_coral_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_fire_coral_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_horn_coral_block"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_horn_coral_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_horn_coral_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_horn_coral_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_horn_coral_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_horn_coral_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_horn_coral_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_horn_coral_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_horn_coral_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_horn_coral_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_horn_coral_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "tube_coral_block"
    {
        token outputs:surface.connect = </Blocks/Looks/tube_coral_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/tube_coral_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/tube_coral_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/tube_coral_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/tube_coral_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/tube_coral_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/tube_coral_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/tube_coral_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/tube_coral_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/tube_coral_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brain_coral_block"
    {
        token outputs:surface.connect = </Blocks/Looks/brain_coral_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brain_coral_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brain_coral_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brain_coral_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brain_coral_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brain_coral_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brain_coral_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brain_coral_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brain_coral_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brain_coral_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bubble_coral_block"
    {
        token outputs:surface.connect = </Blocks/Looks/bubble_coral_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bubble_coral_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bubble_coral_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bubble_coral_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bubble_coral_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bubble_coral_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bubble_coral_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bubble_coral_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bubble_coral_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bubble_coral_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "fire_coral_block"
    {
        token outputs:surface.connect = </Blocks/Looks/fire_coral_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/fire_coral_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/fire_coral_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/fire_coral_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/fire_coral_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/fire_coral_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/fire_coral_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/fire_coral_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/fire_coral_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/fire_coral_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "horn_coral_block"
    {
        token outputs:surface.connect = </Blocks/Looks/horn_coral_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/horn_coral_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/horn_coral_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/horn_coral_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/horn_coral_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/horn_coral_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/horn_coral_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/horn_coral_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/horn_coral_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/horn_coral_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "tube_coral"
    {
        token outputs:surface.connect = </Blocks/Looks/tube_coral/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/tube_coral/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/tube_coral/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/tube_coral/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/tube_coral/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/tube_coral.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/tube_coral.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/tube_coral/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/tube_coral/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/tube_coral.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/tube_coral/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brain_coral"
    {
        token outputs:surface.connect = </Blocks/Looks/brain_coral/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brain_coral/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brain_coral/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brain_coral/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brain_coral/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brain_coral.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/brain_coral.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brain_coral/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brain_coral/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brain_coral.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brain_coral/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bubble_coral"
    {
        token outputs:surface.connect = </Blocks/Looks/bubble_coral/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bubble_coral/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bubble_coral/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bubble_coral/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bubble_coral/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bubble_coral.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/bubble_coral.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bubble_coral/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bubble_coral/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bubble_coral.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bubble_coral/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "fire_coral"
    {
        token outputs:surface.connect = </Blocks/Looks/fire_coral/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/fire_coral/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/fire_coral/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/fire_coral/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/fire_coral/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/fire_coral.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/fire_coral.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/fire_coral/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/fire_coral/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/fire_coral.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/fire_coral/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "horn_coral"
    {
        token outputs:surface.connect = </Blocks/Looks/horn_coral/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/horn_coral/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/horn_coral/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/horn_coral/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/horn_coral/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/horn_coral.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/horn_coral.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/horn_coral/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/horn_coral/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/horn_coral.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/horn_coral/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "tube_coral_fan"
    {
        token outputs:surface.connect = </Blocks/Looks/tube_coral_fan/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/tube_coral_fan/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/tube_coral_fan/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/tube_coral_fan/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/tube_coral_fan/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/tube_coral_fan.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/tube_coral_fan.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/tube_coral_fan/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/tube_coral_fan/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/tube_coral_fan.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/tube_coral_fan/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "brain_coral_fan"
    {
        token outputs:surface.connect = </Blocks/Looks/brain_coral_fan/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/brain_coral_fan/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/brain_coral_fan/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/brain_coral_fan/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/brain_coral_fan/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/brain_coral_fan.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/brain_coral_fan.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/brain_coral_fan/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/brain_coral_fan/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/brain_coral_fan.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/brain_coral_fan/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bubble_coral_fan"
    {
        token outputs:surface.connect = </Blocks/Looks/bubble_coral_fan/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bubble_coral_fan/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bubble_coral_fan/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bubble_coral_fan/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bubble_coral_fan/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bubble_coral_fan.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/bubble_coral_fan.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bubble_coral_fan/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bubble_coral_fan/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bubble_coral_fan.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bubble_coral_fan/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "fire_coral_fan"
    {
        token outputs:surface.connect = </Blocks/Looks/fire_coral_fan/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/fire_coral_fan/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/fire_coral_fan/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/fire_coral_fan/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/fire_coral_fan/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/fire_coral_fan.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/fire_coral_fan.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/fire_coral_fan/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/fire_coral_fan/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/fire_coral_fan.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/fire_coral_fan/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "horn_coral_fan"
    {
        token outputs:surface.connect = </Blocks/Looks/horn_coral_fan/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/horn_coral_fan/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/horn_coral_fan/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/horn_coral_fan/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/horn_coral_fan/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/horn_coral_fan.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/horn_coral_fan.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.341176, 0.792157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/horn_coral_fan/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/horn_coral_fan/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/horn_coral_fan.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/horn_coral_fan/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_tube_coral_fan"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_tube_coral_fan/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_tube_coral_fan/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_tube_coral_fan/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_tube_coral_fan/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_tube_coral_fan/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_tube_coral_fan.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dead_tube_coral_fan.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_tube_coral_fan/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_tube_coral_fan/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_tube_coral_fan.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_tube_coral_fan/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_brain_coral_fan"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_brain_coral_fan/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_brain_coral_fan/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_brain_coral_fan/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_brain_coral_fan/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_brain_coral_fan/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_brain_coral_fan.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dead_brain_coral_fan.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_brain_coral_fan/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_brain_coral_fan/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_brain_coral_fan.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_brain_coral_fan/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_bubble_coral_fan"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_bubble_coral_fan/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_bubble_coral_fan/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_bubble_coral_fan/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_bubble_coral_fan/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_bubble_coral_fan/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_bubble_coral_fan.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dead_bubble_coral_fan.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_bubble_coral_fan/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_bubble_coral_fan/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_bubble_coral_fan.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_bubble_coral_fan/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_fire_coral_fan"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_fire_coral_fan/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_fire_coral_fan/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_fire_coral_fan/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_fire_coral_fan/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_fire_coral_fan/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_fire_coral_fan.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dead_fire_coral_fan.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_fire_coral_fan/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_fire_coral_fan/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_fire_coral_fan.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_fire_coral_fan/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_horn_coral_fan"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_horn_coral_fan/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_horn_coral_fan/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_horn_coral_fan/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_horn_coral_fan/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_horn_coral_fan/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_horn_coral_fan.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dead_horn_coral_fan.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_horn_coral_fan/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_horn_coral_fan/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_horn_coral_fan.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_horn_coral_fan/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "turtle_egg"
    {
        token outputs:surface.connect = </Blocks/Looks/turtle_egg/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/turtle_egg/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/turtle_egg/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/turtle_egg/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/turtle_egg/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/turtle_egg.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/turtle_egg.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.917647, 0.894118, 0.760784)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/turtle_egg/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/turtle_egg/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/turtle_egg.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/turtle_egg/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "turtle_egg_slightly_cracked"
    {
        token outputs:surface.connect = </Blocks/Looks/turtle_egg_slightly_cracked/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/turtle_egg_slightly_cracked/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/turtle_egg_slightly_cracked/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/turtle_egg_slightly_cracked/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/turtle_egg_slightly_cracked/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/turtle_egg_slightly_cracked.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/turtle_egg_slightly_cracked.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.917647, 0.894118, 0.760784)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/turtle_egg_slightly_cracked/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/turtle_egg_slightly_cracked/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/turtle_egg_slightly_cracked.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/turtle_egg_slightly_cracked/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "turtle_egg_very_cracked"
    {
        token outputs:surface.connect = </Blocks/Looks/turtle_egg_very_cracked/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/turtle_egg_very_cracked/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/turtle_egg_very_cracked/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/turtle_egg_very_cracked/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/turtle_egg_very_cracked/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/turtle_egg_very_cracked.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/turtle_egg_very_cracked.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.917647, 0.894118, 0.760784)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/turtle_egg_very_cracked/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/turtle_egg_very_cracked/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/turtle_egg_very_cracked.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/turtle_egg_very_cracked/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "conduit"
    {
        token outputs:surface.connect = </Blocks/Looks/conduit/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/conduit/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/conduit/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/conduit/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/conduit/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/conduit.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.886275, 0.741176) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/conduit.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/conduit_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/conduit.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.886275, 0.741176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/conduit/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/conduit/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/conduit/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/conduit.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/conduit/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/conduit/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.886275, 0.741176, 1.0)
            float outputs:rgb
        }
    }

    def Material "dead_tube_coral"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_tube_coral/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_tube_coral/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_tube_coral/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_tube_coral/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_tube_coral/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_tube_coral.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dead_tube_coral.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_tube_coral/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_tube_coral/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_tube_coral.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_tube_coral/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_brain_coral"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_brain_coral/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_brain_coral/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_brain_coral/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_brain_coral/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_brain_coral/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_brain_coral.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dead_brain_coral.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_brain_coral/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_brain_coral/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_brain_coral.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_brain_coral/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_bubble_coral"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_bubble_coral/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_bubble_coral/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_bubble_coral/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_bubble_coral/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_bubble_coral/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_bubble_coral.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dead_bubble_coral.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_bubble_coral/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_bubble_coral/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_bubble_coral.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_bubble_coral/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_fire_coral"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_fire_coral/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_fire_coral/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_fire_coral/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_fire_coral/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_fire_coral/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_fire_coral.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dead_fire_coral.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_fire_coral/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_fire_coral/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_fire_coral.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_fire_coral/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "dead_horn_coral"
    {
        token outputs:surface.connect = </Blocks/Looks/dead_horn_coral/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/dead_horn_coral/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/dead_horn_coral/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/dead_horn_coral/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/dead_horn_coral/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/dead_horn_coral.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/dead_horn_coral.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.521569, 0.494118, 0.47451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/dead_horn_coral/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/dead_horn_coral/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/dead_horn_coral.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/dead_horn_coral/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cornflower"
    {
        token outputs:surface.connect = </Blocks/Looks/cornflower/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cornflower/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cornflower/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cornflower/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cornflower/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cornflower.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/cornflower.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cornflower/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cornflower/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cornflower.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cornflower/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lily_of_the_valley"
    {
        token outputs:surface.connect = </Blocks/Looks/lily_of_the_valley/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lily_of_the_valley/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lily_of_the_valley/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lily_of_the_valley/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lily_of_the_valley/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lily_of_the_valley.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/lily_of_the_valley.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lily_of_the_valley/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lily_of_the_valley/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lily_of_the_valley.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lily_of_the_valley/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "wither_rose"
    {
        token outputs:surface.connect = </Blocks/Looks/wither_rose/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/wither_rose/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/wither_rose/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/wither_rose/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/wither_rose/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/wither_rose.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/wither_rose.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/wither_rose/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/wither_rose/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/wither_rose.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/wither_rose/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bamboo_large_leaves"
    {
        token outputs:surface.connect = </Blocks/Looks/bamboo_large_leaves/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bamboo_large_leaves/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bamboo_large_leaves/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bamboo_large_leaves/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bamboo_large_leaves/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bamboo_large_leaves.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/bamboo_large_leaves.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.380392, 0.576471, 0.141176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bamboo_large_leaves/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bamboo_large_leaves/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bamboo_large_leaves.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bamboo_large_leaves/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bamboo_singleleaf"
    {
        token outputs:surface.connect = </Blocks/Looks/bamboo_singleleaf/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bamboo_singleleaf/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bamboo_singleleaf/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bamboo_singleleaf/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bamboo_singleleaf/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bamboo_singleleaf.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/bamboo_singleleaf.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.380392, 0.576471, 0.141176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bamboo_singleleaf/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bamboo_singleleaf/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bamboo_singleleaf.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bamboo_singleleaf/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bamboo_small_leaves"
    {
        token outputs:surface.connect = </Blocks/Looks/bamboo_small_leaves/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bamboo_small_leaves/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bamboo_small_leaves/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bamboo_small_leaves/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bamboo_small_leaves/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bamboo_small_leaves.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/bamboo_small_leaves.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.380392, 0.576471, 0.141176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bamboo_small_leaves/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bamboo_small_leaves/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bamboo_small_leaves.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bamboo_small_leaves/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bamboo_stage0"
    {
        token outputs:surface.connect = </Blocks/Looks/bamboo_stage0/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bamboo_stage0/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bamboo_stage0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bamboo_stage0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bamboo_stage0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bamboo_stage0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/bamboo_stage0.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.482353, 0.603922, 0.160784)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bamboo_stage0/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bamboo_stage0/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bamboo_stage0.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bamboo_stage0/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bamboo_stalk"
    {
        token outputs:surface.connect = </Blocks/Looks/bamboo_stalk/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bamboo_stalk/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bamboo_stalk/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bamboo_stalk/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bamboo_stalk/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bamboo_stalk.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/bamboo_stalk.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.380392, 0.576471, 0.141176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bamboo_stalk/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bamboo_stalk/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bamboo_stalk.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bamboo_stalk/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lantern"
    {
        token outputs:surface.connect = </Blocks/Looks/lantern/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lantern/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lantern/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lantern/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lantern/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lantern.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.819608, 0.682353) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/lantern.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/lantern_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0.8 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/lantern.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.15 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.819608, 0.682353)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lantern/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lantern/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.15
            float inputs:metallic = 0.8
            color3f inputs:emissiveColor.connect = </Blocks/Looks/lantern/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lantern.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lantern/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lantern/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.819608, 0.682353, 1.0)
            float outputs:rgb
        }
    }

    def Material "sweet_berry_bush_stage0"
    {
        token outputs:surface.connect = </Blocks/Looks/sweet_berry_bush_stage0/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sweet_berry_bush_stage0/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sweet_berry_bush_stage0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sweet_berry_bush_stage0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sweet_berry_bush_stage0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sweet_berry_bush_stage0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/sweet_berry_bush_stage0.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.380392, 0.235294)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sweet_berry_bush_stage0/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sweet_berry_bush_stage0/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sweet_berry_bush_stage0.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sweet_berry_bush_stage0/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sweet_berry_bush_stage1"
    {
        token outputs:surface.connect = </Blocks/Looks/sweet_berry_bush_stage1/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sweet_berry_bush_stage1/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sweet_berry_bush_stage1/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sweet_berry_bush_stage1/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sweet_berry_bush_stage1/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sweet_berry_bush_stage1.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/sweet_berry_bush_stage1.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.380392, 0.235294)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sweet_berry_bush_stage1/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sweet_berry_bush_stage1/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sweet_berry_bush_stage1.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sweet_berry_bush_stage1/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sweet_berry_bush_stage2"
    {
        token outputs:surface.connect = </Blocks/Looks/sweet_berry_bush_stage2/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sweet_berry_bush_stage2/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sweet_berry_bush_stage2/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sweet_berry_bush_stage2/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sweet_berry_bush_stage2/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sweet_berry_bush_stage2.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/sweet_berry_bush_stage2.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.380392, 0.235294)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sweet_berry_bush_stage2/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sweet_berry_bush_stage2/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sweet_berry_bush_stage2.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sweet_berry_bush_stage2/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "sweet_berry_bush_stage3"
    {
        token outputs:surface.connect = </Blocks/Looks/sweet_berry_bush_stage3/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/sweet_berry_bush_stage3/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/sweet_berry_bush_stage3/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/sweet_berry_bush_stage3/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/sweet_berry_bush_stage3/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/sweet_berry_bush_stage3.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/sweet_berry_bush_stage3.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.380392, 0.235294)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/sweet_berry_bush_stage3/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/sweet_berry_bush_stage3/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/sweet_berry_bush_stage3.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/sweet_berry_bush_stage3/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "barrel_top"
    {
        token outputs:surface.connect = </Blocks/Looks/barrel_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/barrel_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/barrel_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/barrel_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/barrel_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/barrel_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.52549, 0.392157, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/barrel_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/barrel_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/barrel_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/barrel_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "barrel_side"
    {
        token outputs:surface.connect = </Blocks/Looks/barrel_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/barrel_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/barrel_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/barrel_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/barrel_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/barrel_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.52549, 0.392157, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/barrel_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/barrel_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/barrel_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/barrel_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "barrel_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/barrel_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/barrel_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/barrel_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/barrel_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/barrel_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/barrel_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.52549, 0.392157, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/barrel_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/barrel_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/barrel_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/barrel_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "barrel_top_open"
    {
        token outputs:surface.connect = </Blocks/Looks/barrel_top_open/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/barrel_top_open/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/barrel_top_open/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/barrel_top_open/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/barrel_top_open/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/barrel_top_open.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.52549, 0.392157, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/barrel_top_open/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/barrel_top_open/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/barrel_top_open.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/barrel_top_open/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bell_top"
    {
        token outputs:surface.connect = </Blocks/Looks/bell_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bell_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bell_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bell_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bell_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bell_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/bell_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.776471, 0.619608, 0.211765)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bell_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bell_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bell_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bell_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bell_side"
    {
        token outputs:surface.connect = </Blocks/Looks/bell_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bell_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bell_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bell_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bell_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bell_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/bell_side.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.776471, 0.619608, 0.211765)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bell_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bell_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bell_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bell_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bell_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/bell_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bell_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bell_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bell_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bell_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bell_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/bell_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.776471, 0.619608, 0.211765)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bell_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bell_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bell_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bell_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blast_furnace_top"
    {
        token outputs:surface.connect = </Blocks/Looks/blast_furnace_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blast_furnace_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blast_furnace_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blast_furnace_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blast_furnace_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blast_furnace_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.462745, 0.466667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blast_furnace_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blast_furnace_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blast_furnace_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blast_furnace_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blast_furnace_side"
    {
        token outputs:surface.connect = </Blocks/Looks/blast_furnace_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blast_furnace_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blast_furnace_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blast_furnace_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blast_furnace_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blast_furnace_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.462745, 0.466667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blast_furnace_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blast_furnace_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blast_furnace_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blast_furnace_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blast_furnace_front"
    {
        token outputs:surface.connect = </Blocks/Looks/blast_furnace_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blast_furnace_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blast_furnace_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blast_furnace_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blast_furnace_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blast_furnace_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.462745, 0.466667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blast_furnace_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blast_furnace_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blast_furnace_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blast_furnace_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blast_furnace_front_on"
    {
        token outputs:surface.connect = </Blocks/Looks/blast_furnace_front_on/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blast_furnace_front_on/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blast_furnace_front_on/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blast_furnace_front_on/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blast_furnace_front_on/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blast_furnace_front_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.992157, 0.992157) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/blast_furnace_front_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 866.667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/blast_furnace_front_on_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.992157, 0.992157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blast_furnace_front_on/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blast_furnace_front_on/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/blast_furnace_front_on/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blast_furnace_front_on.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blast_furnace_front_on/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blast_furnace_front_on/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.992157, 0.992157, 1.0)
            float outputs:rgb
        }
    }

    def Material "composter_top"
    {
        token outputs:surface.connect = </Blocks/Looks/composter_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/composter_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/composter_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/composter_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/composter_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/composter_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.466667, 0.298039, 0.152941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/composter_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/composter_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/composter_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/composter_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "composter_side"
    {
        token outputs:surface.connect = </Blocks/Looks/composter_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/composter_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/composter_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/composter_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/composter_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/composter_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.466667, 0.298039, 0.152941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/composter_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/composter_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/composter_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/composter_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "composter_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/composter_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/composter_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/composter_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/composter_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/composter_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/composter_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.466667, 0.298039, 0.152941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/composter_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/composter_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/composter_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/composter_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "composter_compost"
    {
        token outputs:surface.connect = </Blocks/Looks/composter_compost/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/composter_compost/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/composter_compost/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/composter_compost/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/composter_compost/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/composter_compost.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.466667, 0.298039, 0.152941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/composter_compost/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/composter_compost/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/composter_compost.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/composter_compost/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "composter_ready"
    {
        token outputs:surface.connect = </Blocks/Looks/composter_ready/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/composter_ready/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/composter_ready/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/composter_ready/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/composter_ready/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/composter_ready.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.466667, 0.298039, 0.152941)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/composter_ready/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/composter_ready/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/composter_ready.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/composter_ready/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "campfire_fire"
    {
        token outputs:surface.connect = </Blocks/Looks/campfire_fire/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/campfire_fire/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/campfire_fire/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/campfire_fire/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/campfire_fire/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/campfire_fire.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.796078, 0.443137) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/campfire_fire.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/campfire_fire_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/campfire_fire.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.796078, 0.443137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/campfire_fire/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/campfire_fire/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/campfire_fire/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/campfire_fire.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/campfire_fire/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/campfire_fire/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.796078, 0.443137, 1.0)
            float outputs:rgb
        }
    }

    def Material "campfire_log"
    {
        token outputs:surface.connect = </Blocks/Looks/campfire_log/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/campfire_log/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/campfire_log/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/campfire_log/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/campfire_log/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/campfire_log.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/campfire_log.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.698039, 0.388235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/campfire_log/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/campfire_log/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/campfire_log.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/campfire_log/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "campfire_log_lit"
    {
        token outputs:surface.connect = </Blocks/Looks/campfire_log_lit/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/campfire_log_lit/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/campfire_log_lit/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/campfire_log_lit/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/campfire_log_lit/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/campfire_log_lit.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.796078, 0.443137) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/campfire_log_lit.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/campfire_log_lit_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/campfire_log_lit.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.796078, 0.443137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/campfire_log_lit/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/campfire_log_lit/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/campfire_log_lit/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/campfire_log_lit.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/campfire_log_lit/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/campfire_log_lit/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.796078, 0.443137, 1.0)
            float outputs:rgb
        }
    }

    def Material "cartography_table_top"
    {
        token outputs:surface.connect = </Blocks/Looks/cartography_table_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cartography_table_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cartography_table_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cartography_table_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cartography_table_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cartography_table_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cartography_table_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cartography_table_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cartography_table_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cartography_table_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cartography_table_side1"
    {
        token outputs:surface.connect = </Blocks/Looks/cartography_table_side1/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cartography_table_side1/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cartography_table_side1/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cartography_table_side1/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cartography_table_side1/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cartography_table_side1.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cartography_table_side1/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cartography_table_side1/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cartography_table_side1.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cartography_table_side1/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cartography_table_side2"
    {
        token outputs:surface.connect = </Blocks/Looks/cartography_table_side2/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cartography_table_side2/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cartography_table_side2/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cartography_table_side2/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cartography_table_side2/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cartography_table_side2.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cartography_table_side2/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cartography_table_side2/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cartography_table_side2.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cartography_table_side2/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cartography_table_side3"
    {
        token outputs:surface.connect = </Blocks/Looks/cartography_table_side3/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cartography_table_side3/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cartography_table_side3/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cartography_table_side3/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cartography_table_side3/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cartography_table_side3.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cartography_table_side3/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cartography_table_side3/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cartography_table_side3.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cartography_table_side3/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "fletching_table_top"
    {
        token outputs:surface.connect = </Blocks/Looks/fletching_table_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/fletching_table_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/fletching_table_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/fletching_table_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/fletching_table_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/fletching_table_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/fletching_table_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/fletching_table_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/fletching_table_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/fletching_table_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "fletching_table_side"
    {
        token outputs:surface.connect = </Blocks/Looks/fletching_table_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/fletching_table_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/fletching_table_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/fletching_table_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/fletching_table_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/fletching_table_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/fletching_table_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/fletching_table_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/fletching_table_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/fletching_table_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "fletching_table_front"
    {
        token outputs:surface.connect = </Blocks/Looks/fletching_table_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/fletching_table_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/fletching_table_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/fletching_table_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/fletching_table_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/fletching_table_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/fletching_table_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/fletching_table_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/fletching_table_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/fletching_table_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "grindstone_side"
    {
        token outputs:surface.connect = </Blocks/Looks/grindstone_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/grindstone_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/grindstone_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/grindstone_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/grindstone_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/grindstone_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.556863, 0.556863, 0.556863)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/grindstone_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/grindstone_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/grindstone_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/grindstone_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "grindstone_pivot"
    {
        token outputs:surface.connect = </Blocks/Looks/grindstone_pivot/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/grindstone_pivot/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/grindstone_pivot/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/grindstone_pivot/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/grindstone_pivot/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/grindstone_pivot.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.556863, 0.556863, 0.556863)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/grindstone_pivot/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/grindstone_pivot/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/grindstone_pivot.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/grindstone_pivot/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "grindstone_round"
    {
        token outputs:surface.connect = </Blocks/Looks/grindstone_round/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/grindstone_round/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/grindstone_round/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/grindstone_round/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/grindstone_round/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/grindstone_round.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.556863, 0.556863, 0.556863)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/grindstone_round/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/grindstone_round/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/grindstone_round.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/grindstone_round/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jigsaw_top"
    {
        token outputs:surface.connect = </Blocks/Looks/jigsaw_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jigsaw_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jigsaw_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jigsaw_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jigsaw_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jigsaw_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.4, 0.368627, 0.372549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jigsaw_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jigsaw_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jigsaw_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jigsaw_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jigsaw_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/jigsaw_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jigsaw_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jigsaw_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jigsaw_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jigsaw_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jigsaw_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.4, 0.368627, 0.372549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jigsaw_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jigsaw_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jigsaw_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jigsaw_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "jigsaw_side"
    {
        token outputs:surface.connect = </Blocks/Looks/jigsaw_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jigsaw_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jigsaw_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jigsaw_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jigsaw_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jigsaw_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.4, 0.368627, 0.372549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jigsaw_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jigsaw_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jigsaw_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jigsaw_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lectern_top"
    {
        token outputs:surface.connect = </Blocks/Looks/lectern_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lectern_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lectern_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lectern_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lectern_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lectern_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.686275, 0.545098, 0.333333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lectern_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lectern_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lectern_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lectern_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lectern_sides"
    {
        token outputs:surface.connect = </Blocks/Looks/lectern_sides/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lectern_sides/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lectern_sides/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lectern_sides/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lectern_sides/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lectern_sides.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.686275, 0.545098, 0.333333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lectern_sides/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lectern_sides/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lectern_sides.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lectern_sides/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lectern_base"
    {
        token outputs:surface.connect = </Blocks/Looks/lectern_base/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lectern_base/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lectern_base/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lectern_base/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lectern_base/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lectern_base.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.686275, 0.545098, 0.333333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lectern_base/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lectern_base/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lectern_base.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lectern_base/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lectern_front"
    {
        token outputs:surface.connect = </Blocks/Looks/lectern_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lectern_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lectern_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lectern_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lectern_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lectern_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.686275, 0.545098, 0.333333)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lectern_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lectern_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lectern_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lectern_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "loom_top"
    {
        token outputs:surface.connect = </Blocks/Looks/loom_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/loom_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/loom_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/loom_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/loom_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/loom_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.462745, 0.466667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/loom_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/loom_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/loom_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/loom_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "loom_side"
    {
        token outputs:surface.connect = </Blocks/Looks/loom_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/loom_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/loom_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/loom_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/loom_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/loom_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.462745, 0.466667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/loom_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/loom_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/loom_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/loom_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "loom_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/loom_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/loom_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/loom_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/loom_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/loom_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/loom_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.462745, 0.466667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/loom_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/loom_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/loom_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/loom_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "loom_front"
    {
        token outputs:surface.connect = </Blocks/Looks/loom_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/loom_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/loom_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/loom_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/loom_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/loom_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.462745, 0.466667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/loom_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/loom_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/loom_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/loom_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "scaffolding_top"
    {
        token outputs:surface.connect = </Blocks/Looks/scaffolding_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/scaffolding_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/scaffolding_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/scaffolding_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/scaffolding_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/scaffolding_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/scaffolding_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.701961, 0.552941, 0.329412)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/scaffolding_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/scaffolding_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/scaffolding_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/scaffolding_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "scaffolding_side"
    {
        token outputs:surface.connect = </Blocks/Looks/scaffolding_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/scaffolding_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/scaffolding_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/scaffolding_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/scaffolding_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/scaffolding_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/scaffolding_side.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.701961, 0.552941, 0.329412)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/scaffolding_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/scaffolding_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/scaffolding_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/scaffolding_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "scaffolding_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/scaffolding_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/scaffolding_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/scaffolding_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/scaffolding_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/scaffolding_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/scaffolding_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/scaffolding_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.701961, 0.552941, 0.329412)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/scaffolding_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/scaffolding_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/scaffolding_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/scaffolding_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "smoker_top"
    {
        token outputs:surface.connect = </Blocks/Looks/smoker_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/smoker_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/smoker_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/smoker_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/smoker_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/smoker_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.462745, 0.466667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/smoker_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/smoker_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/smoker_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/smoker_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "smoker_side"
    {
        token outputs:surface.connect = </Blocks/Looks/smoker_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/smoker_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/smoker_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/smoker_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/smoker_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/smoker_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.462745, 0.466667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/smoker_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/smoker_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/smoker_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/smoker_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "smoker_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/smoker_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/smoker_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/smoker_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/smoker_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/smoker_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/smoker_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.462745, 0.466667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/smoker_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/smoker_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/smoker_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/smoker_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "smoker_front"
    {
        token outputs:surface.connect = </Blocks/Looks/smoker_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/smoker_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/smoker_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/smoker_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/smoker_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/smoker_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.462745, 0.466667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/smoker_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/smoker_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/smoker_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/smoker_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "smoker_front_on"
    {
        token outputs:surface.connect = </Blocks/Looks/smoker_front_on/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/smoker_front_on/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/smoker_front_on/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/smoker_front_on/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/smoker_front_on/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/smoker_front_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.992157, 0.992157) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/smoker_front_on.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 866.667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/smoker_front_on_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.992157, 0.992157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/smoker_front_on/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/smoker_front_on/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/smoker_front_on/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/smoker_front_on.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/smoker_front_on/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/smoker_front_on/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.992157, 0.992157, 1.0)
            float outputs:rgb
        }
    }

    def Material "smithing_table_top"
    {
        token outputs:surface.connect = </Blocks/Looks/smithing_table_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/smithing_table_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/smithing_table_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/smithing_table_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/smithing_table_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/smithing_table_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/smithing_table_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/smithing_table_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/smithing_table_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/smithing_table_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "smithing_table_side"
    {
        token outputs:surface.connect = </Blocks/Looks/smithing_table_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/smithing_table_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/smithing_table_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/smithing_table_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/smithing_table_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/smithing_table_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/smithing_table_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/smithing_table_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/smithing_table_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/smithing_table_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "smithing_table_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/smithing_table_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/smithing_table_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/smithing_table_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/smithing_table_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/smithing_table_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/smithing_table_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/smithing_table_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/smithing_table_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/smithing_table_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/smithing_table_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "smithing_table_front"
    {
        token outputs:surface.connect = </Blocks/Looks/smithing_table_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/smithing_table_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/smithing_table_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/smithing_table_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/smithing_table_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/smithing_table_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/smithing_table_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/smithing_table_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/smithing_table_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/smithing_table_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stonecutter_top"
    {
        token outputs:surface.connect = </Blocks/Looks/stonecutter_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stonecutter_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stonecutter_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stonecutter_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stonecutter_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stonecutter_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.490196, 0.47451, 0.458824)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stonecutter_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stonecutter_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stonecutter_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stonecutter_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stonecutter_side"
    {
        token outputs:surface.connect = </Blocks/Looks/stonecutter_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stonecutter_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stonecutter_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stonecutter_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stonecutter_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stonecutter_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.490196, 0.47451, 0.458824)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stonecutter_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stonecutter_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stonecutter_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stonecutter_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stonecutter_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/stonecutter_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stonecutter_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stonecutter_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stonecutter_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stonecutter_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stonecutter_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.490196, 0.47451, 0.458824)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stonecutter_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stonecutter_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stonecutter_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stonecutter_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stonecutter_saw"
    {
        token outputs:surface.connect = </Blocks/Looks/stonecutter_saw/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stonecutter_saw/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stonecutter_saw/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stonecutter_saw/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stonecutter_saw/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stonecutter_saw.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.490196, 0.47451, 0.458824)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stonecutter_saw/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stonecutter_saw/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stonecutter_saw.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stonecutter_saw/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bee_nest_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/bee_nest_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bee_nest_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bee_nest_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bee_nest_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bee_nest_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bee_nest_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.823529, 0.678431, 0.317647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bee_nest_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bee_nest_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bee_nest_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bee_nest_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bee_nest_front"
    {
        token outputs:surface.connect = </Blocks/Looks/bee_nest_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bee_nest_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bee_nest_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bee_nest_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bee_nest_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bee_nest_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.823529, 0.678431, 0.317647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bee_nest_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bee_nest_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bee_nest_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bee_nest_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bee_nest_front_honey"
    {
        token outputs:surface.connect = </Blocks/Looks/bee_nest_front_honey/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bee_nest_front_honey/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bee_nest_front_honey/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bee_nest_front_honey/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bee_nest_front_honey/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bee_nest_front_honey.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.823529, 0.678431, 0.317647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bee_nest_front_honey/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bee_nest_front_honey/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bee_nest_front_honey.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bee_nest_front_honey/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bee_nest_side"
    {
        token outputs:surface.connect = </Blocks/Looks/bee_nest_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bee_nest_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bee_nest_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bee_nest_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bee_nest_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bee_nest_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.823529, 0.678431, 0.317647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bee_nest_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bee_nest_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bee_nest_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bee_nest_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "bee_nest_top"
    {
        token outputs:surface.connect = </Blocks/Looks/bee_nest_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/bee_nest_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/bee_nest_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/bee_nest_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/bee_nest_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/bee_nest_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.823529, 0.678431, 0.317647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/bee_nest_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/bee_nest_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/bee_nest_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/bee_nest_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "beehive_end"
    {
        token outputs:surface.connect = </Blocks/Looks/beehive_end/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/beehive_end/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/beehive_end/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/beehive_end/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/beehive_end/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/beehive_end.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.823529, 0.678431, 0.317647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/beehive_end/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/beehive_end/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/beehive_end.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/beehive_end/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "beehive_front"
    {
        token outputs:surface.connect = </Blocks/Looks/beehive_front/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/beehive_front/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/beehive_front/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/beehive_front/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/beehive_front/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/beehive_front.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.823529, 0.678431, 0.317647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/beehive_front/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/beehive_front/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/beehive_front.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/beehive_front/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "beehive_front_honey"
    {
        token outputs:surface.connect = </Blocks/Looks/beehive_front_honey/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/beehive_front_honey/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/beehive_front_honey/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/beehive_front_honey/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/beehive_front_honey/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/beehive_front_honey.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.823529, 0.678431, 0.317647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/beehive_front_honey/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/beehive_front_honey/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/beehive_front_honey.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/beehive_front_honey/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "beehive_side"
    {
        token outputs:surface.connect = </Blocks/Looks/beehive_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/beehive_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/beehive_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/beehive_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/beehive_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/beehive_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.823529, 0.678431, 0.317647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/beehive_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/beehive_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/beehive_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/beehive_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "honey_block_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/honey_block_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/honey_block_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/honey_block_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/honey_block_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/honey_block_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/honey_block_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/honey_block_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.984314, 0.733333, 0.254902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/honey_block_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/honey_block_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/honey_block_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/honey_block_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "honey_block_side"
    {
        token outputs:surface.connect = </Blocks/Looks/honey_block_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/honey_block_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/honey_block_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/honey_block_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/honey_block_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/honey_block_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/honey_block_side.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.984314, 0.733333, 0.254902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/honey_block_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/honey_block_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/honey_block_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/honey_block_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "honey_block_top"
    {
        token outputs:surface.connect = </Blocks/Looks/honey_block_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/honey_block_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/honey_block_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/honey_block_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/honey_block_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/honey_block_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/honey_block_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.984314, 0.733333, 0.254902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/honey_block_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/honey_block_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/honey_block_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/honey_block_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "honeycomb_block"
    {
        token outputs:surface.connect = </Blocks/Looks/honeycomb_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/honeycomb_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/honeycomb_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/honeycomb_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/honeycomb_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/honeycomb_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.4 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.901961, 0.607843, 0.207843)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/honeycomb_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/honeycomb_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.4
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/honeycomb_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/honeycomb_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "quartz_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/quartz_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/quartz_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/quartz_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/quartz_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/quartz_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/quartz_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.18 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.866667, 0.843137)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/quartz_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/quartz_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.18
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/quartz_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/quartz_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "soul_soil"
    {
        token outputs:surface.connect = </Blocks/Looks/soul_soil/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/soul_soil/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/soul_soil/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/soul_soil/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/soul_soil/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/soul_soil.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.333333, 0.254902, 0.203922)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/soul_soil/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/soul_soil/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/soul_soil.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/soul_soil/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "basalt_top"
    {
        token outputs:surface.connect = </Blocks/Looks/basalt_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/basalt_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/basalt_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/basalt_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/basalt_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/basalt_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.882353, 0.866667, 0.788235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/basalt_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/basalt_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/basalt_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/basalt_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "basalt_side"
    {
        token outputs:surface.connect = </Blocks/Looks/basalt_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/basalt_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/basalt_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/basalt_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/basalt_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/basalt_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.882353, 0.866667, 0.788235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/basalt_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/basalt_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/basalt_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/basalt_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "polished_basalt_top"
    {
        token outputs:surface.connect = </Blocks/Looks/polished_basalt_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/polished_basalt_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/polished_basalt_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/polished_basalt_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/polished_basalt_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/polished_basalt_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.882353, 0.866667, 0.788235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/polished_basalt_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/polished_basalt_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/polished_basalt_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/polished_basalt_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "polished_basalt_side"
    {
        token outputs:surface.connect = </Blocks/Looks/polished_basalt_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/polished_basalt_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/polished_basalt_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/polished_basalt_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/polished_basalt_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/polished_basalt_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.882353, 0.866667, 0.788235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/polished_basalt_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/polished_basalt_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/polished_basalt_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/polished_basalt_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "soul_torch"
    {
        token outputs:surface.connect = </Blocks/Looks/soul_torch/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/soul_torch/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/soul_torch/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/soul_torch/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/soul_torch/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/soul_torch.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.545098, 0.984314, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/soul_torch.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 666.667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/soul_torch_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/soul_torch.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.545098, 0.984314, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/soul_torch/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/soul_torch/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/soul_torch/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/soul_torch.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/soul_torch/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/soul_torch/uv_reader.outputs:result>
            float4 inputs:scale = (0.545098, 0.984314, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "soul_fire_0"
    {
        token outputs:surface.connect = </Blocks/Looks/soul_fire_0/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/soul_fire_0/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/soul_fire_0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/soul_fire_0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/soul_fire_0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/soul_fire_0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.639216, 0) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/soul_fire_0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/soul_fire_0_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/soul_fire_0.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.639216, 0)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/soul_fire_0/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/soul_fire_0/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/soul_fire_0/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/soul_fire_0.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/soul_fire_0/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/soul_fire_0/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.639216, 0, 1.0)
            float outputs:rgb
        }
    }

    def Material "soul_campfire_fire"
    {
        token outputs:surface.connect = </Blocks/Looks/soul_campfire_fire/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/soul_campfire_fire/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/soul_campfire_fire/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/soul_campfire_fire/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/soul_campfire_fire/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/soul_campfire_fire.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/soul_campfire_fire.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.698039, 0.388235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/soul_campfire_fire/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/soul_campfire_fire/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/soul_campfire_fire.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/soul_campfire_fire/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "soul_campfire_log_lit"
    {
        token outputs:surface.connect = </Blocks/Looks/soul_campfire_log_lit/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/soul_campfire_log_lit/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/soul_campfire_log_lit/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/soul_campfire_log_lit/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/soul_campfire_log_lit/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/soul_campfire_log_lit.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/soul_campfire_log_lit.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.878431, 0.698039, 0.388235)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/soul_campfire_log_lit/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/soul_campfire_log_lit/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/soul_campfire_log_lit.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/soul_campfire_log_lit/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crimson_stem_top"
    {
        token outputs:surface.connect = </Blocks/Looks/crimson_stem_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crimson_stem_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crimson_stem_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crimson_stem_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crimson_stem_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crimson_stem_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.435294, 0.392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crimson_stem_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crimson_stem_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crimson_stem_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crimson_stem_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crimson_stem"
    {
        token outputs:surface.connect = </Blocks/Looks/crimson_stem/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crimson_stem/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crimson_stem/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crimson_stem/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crimson_stem/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crimson_stem.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.435294, 0.392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crimson_stem/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crimson_stem/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crimson_stem.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crimson_stem/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crimson_nylium"
    {
        token outputs:surface.connect = </Blocks/Looks/crimson_nylium/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crimson_nylium/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crimson_nylium/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crimson_nylium/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crimson_nylium/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crimson_nylium.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.388235, 0.266667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crimson_nylium/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crimson_nylium/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crimson_nylium.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crimson_nylium/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crimson_nylium_side"
    {
        token outputs:surface.connect = </Blocks/Looks/crimson_nylium_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crimson_nylium_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crimson_nylium_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crimson_nylium_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crimson_nylium_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crimson_nylium_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.388235, 0.266667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crimson_nylium_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crimson_nylium_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crimson_nylium_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crimson_nylium_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crimson_fungus"
    {
        token outputs:surface.connect = </Blocks/Looks/crimson_fungus/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crimson_fungus/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crimson_fungus/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crimson_fungus/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crimson_fungus/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crimson_fungus.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/crimson_fungus.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crimson_fungus/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crimson_fungus/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crimson_fungus.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crimson_fungus/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "nether_sprouts"
    {
        token outputs:surface.connect = </Blocks/Looks/nether_sprouts/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/nether_sprouts/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/nether_sprouts/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/nether_sprouts/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/nether_sprouts/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/nether_sprouts.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/nether_sprouts.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/nether_sprouts/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/nether_sprouts/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/nether_sprouts.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/nether_sprouts/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crimson_roots"
    {
        token outputs:surface.connect = </Blocks/Looks/crimson_roots/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crimson_roots/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crimson_roots/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crimson_roots/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crimson_roots/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crimson_roots.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/crimson_roots.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crimson_roots/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crimson_roots/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crimson_roots.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crimson_roots/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crimson_roots_pot"
    {
        token outputs:surface.connect = </Blocks/Looks/crimson_roots_pot/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crimson_roots_pot/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crimson_roots_pot/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crimson_roots_pot/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crimson_roots_pot/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crimson_roots_pot.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/crimson_roots_pot.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crimson_roots_pot/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crimson_roots_pot/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crimson_roots_pot.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crimson_roots_pot/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crimson_planks"
    {
        token outputs:surface.connect = </Blocks/Looks/crimson_planks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crimson_planks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crimson_planks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crimson_planks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crimson_planks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crimson_planks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.611765, 0.505882, 0.286275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crimson_planks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crimson_planks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crimson_planks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crimson_planks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crimson_trapdoor"
    {
        token outputs:surface.connect = </Blocks/Looks/crimson_trapdoor/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crimson_trapdoor/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crimson_trapdoor/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crimson_trapdoor/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crimson_trapdoor/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crimson_trapdoor.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/crimson_trapdoor.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.423529, 0.203922, 0.290196)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crimson_trapdoor/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crimson_trapdoor/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crimson_trapdoor.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crimson_trapdoor/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crimson_door_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/crimson_door_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crimson_door_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crimson_door_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crimson_door_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crimson_door_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crimson_door_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/crimson_door_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.466667, 0.219608, 0.317647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crimson_door_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crimson_door_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crimson_door_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crimson_door_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crimson_door_top"
    {
        token outputs:surface.connect = </Blocks/Looks/crimson_door_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crimson_door_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crimson_door_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crimson_door_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crimson_door_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crimson_door_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/crimson_door_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.466667, 0.219608, 0.317647)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crimson_door_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crimson_door_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crimson_door_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crimson_door_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_crimson_stem_top"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_crimson_stem_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_crimson_stem_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_crimson_stem_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_crimson_stem_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_crimson_stem_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_crimson_stem_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.658824, 0.360784, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_crimson_stem_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_crimson_stem_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_crimson_stem_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_crimson_stem_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_crimson_stem"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_crimson_stem/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_crimson_stem/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_crimson_stem/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_crimson_stem/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_crimson_stem/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_crimson_stem.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.658824, 0.360784, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_crimson_stem/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_crimson_stem/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_crimson_stem.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_crimson_stem/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "weeping_vines"
    {
        token outputs:surface.connect = </Blocks/Looks/weeping_vines/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/weeping_vines/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/weeping_vines/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/weeping_vines/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/weeping_vines/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/weeping_vines.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/weeping_vines.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.552941, 0.129412, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/weeping_vines/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/weeping_vines/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/weeping_vines.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/weeping_vines/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "weeping_vines_plant"
    {
        token outputs:surface.connect = </Blocks/Looks/weeping_vines_plant/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/weeping_vines_plant/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/weeping_vines_plant/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/weeping_vines_plant/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/weeping_vines_plant/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/weeping_vines_plant.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/weeping_vines_plant.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.552941, 0.129412, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/weeping_vines_plant/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/weeping_vines_plant/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/weeping_vines_plant.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/weeping_vines_plant/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "warped_stem_top"
    {
        token outputs:surface.connect = </Blocks/Looks/warped_stem_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/warped_stem_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/warped_stem_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/warped_stem_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/warped_stem_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/warped_stem_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.435294, 0.392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/warped_stem_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/warped_stem_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/warped_stem_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/warped_stem_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "warped_stem"
    {
        token outputs:surface.connect = </Blocks/Looks/warped_stem/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/warped_stem/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/warped_stem/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/warped_stem/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/warped_stem/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/warped_stem.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.462745, 0.435294, 0.392157)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/warped_stem/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/warped_stem/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/warped_stem.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/warped_stem/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "warped_nylium"
    {
        token outputs:surface.connect = </Blocks/Looks/warped_nylium/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/warped_nylium/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/warped_nylium/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/warped_nylium/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/warped_nylium/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/warped_nylium.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.388235, 0.266667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/warped_nylium/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/warped_nylium/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/warped_nylium.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/warped_nylium/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "warped_nylium_side"
    {
        token outputs:surface.connect = </Blocks/Looks/warped_nylium_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/warped_nylium_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/warped_nylium_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/warped_nylium_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/warped_nylium_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/warped_nylium_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.388235, 0.266667)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/warped_nylium_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/warped_nylium_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/warped_nylium_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/warped_nylium_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "warped_fungus"
    {
        token outputs:surface.connect = </Blocks/Looks/warped_fungus/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/warped_fungus/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/warped_fungus/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/warped_fungus/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/warped_fungus/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/warped_fungus.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/warped_fungus.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/warped_fungus/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/warped_fungus/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/warped_fungus.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/warped_fungus/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "warped_wart_block"
    {
        token outputs:surface.connect = </Blocks/Looks/warped_wart_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/warped_wart_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/warped_wart_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/warped_wart_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/warped_wart_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/warped_wart_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.466667, 0.0470588, 0.0509804)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/warped_wart_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/warped_wart_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/warped_wart_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/warped_wart_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "warped_roots"
    {
        token outputs:surface.connect = </Blocks/Looks/warped_roots/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/warped_roots/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/warped_roots/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/warped_roots/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/warped_roots/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/warped_roots.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/warped_roots.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/warped_roots/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/warped_roots/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/warped_roots.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/warped_roots/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "warped_roots_pot"
    {
        token outputs:surface.connect = </Blocks/Looks/warped_roots_pot/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/warped_roots_pot/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/warped_roots_pot/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/warped_roots_pot/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/warped_roots_pot/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/warped_roots_pot.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/warped_roots_pot.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.807843, 0.101961, 0.0196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/warped_roots_pot/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/warped_roots_pot/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/warped_roots_pot.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/warped_roots_pot/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "warped_planks"
    {
        token outputs:surface.connect = </Blocks/Looks/warped_planks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/warped_planks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/warped_planks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/warped_planks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/warped_planks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/warped_planks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.611765, 0.505882, 0.286275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/warped_planks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/warped_planks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/warped_planks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/warped_planks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "warped_trapdoor"
    {
        token outputs:surface.connect = </Blocks/Looks/warped_trapdoor/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/warped_trapdoor/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/warped_trapdoor/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/warped_trapdoor/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/warped_trapdoor/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/warped_trapdoor.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/warped_trapdoor.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.188235, 0.482353, 0.454902)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/warped_trapdoor/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/warped_trapdoor/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/warped_trapdoor.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/warped_trapdoor/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "warped_door_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/warped_door_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/warped_door_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/warped_door_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/warped_door_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/warped_door_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/warped_door_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/warped_door_bottom.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.184314, 0.505882, 0.478431)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/warped_door_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/warped_door_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/warped_door_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/warped_door_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "warped_door_top"
    {
        token outputs:surface.connect = </Blocks/Looks/warped_door_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/warped_door_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/warped_door_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/warped_door_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/warped_door_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/warped_door_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/warped_door_top.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.184314, 0.505882, 0.478431)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/warped_door_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/warped_door_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/warped_door_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/warped_door_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_warped_stem_top"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_warped_stem_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_warped_stem_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_warped_stem_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_warped_stem_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_warped_stem_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_warped_stem_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.658824, 0.360784, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_warped_stem_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_warped_stem_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_warped_stem_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_warped_stem_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "stripped_warped_stem"
    {
        token outputs:surface.connect = </Blocks/Looks/stripped_warped_stem/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/stripped_warped_stem/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/stripped_warped_stem/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/stripped_warped_stem/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/stripped_warped_stem/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/stripped_warped_stem.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.658824, 0.360784, 0.231373)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/stripped_warped_stem/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/stripped_warped_stem/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 0.5
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/stripped_warped_stem.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/stripped_warped_stem/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "twisting_vines"
    {
        token outputs:surface.connect = </Blocks/Looks/twisting_vines/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/twisting_vines/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/twisting_vines/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/twisting_vines/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/twisting_vines/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/twisting_vines.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/twisting_vines.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.552941, 0.129412, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/twisting_vines/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/twisting_vines/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/twisting_vines.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/twisting_vines/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "twisting_vines_plant"
    {
        token outputs:surface.connect = </Blocks/Looks/twisting_vines_plant/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/twisting_vines_plant/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/twisting_vines_plant/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/twisting_vines_plant/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/twisting_vines_plant/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/twisting_vines_plant.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/twisting_vines_plant.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.552941, 0.129412, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/twisting_vines_plant/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/twisting_vines_plant/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/twisting_vines_plant.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/twisting_vines_plant/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "ancient_debris_top"
    {
        token outputs:surface.connect = </Blocks/Looks/ancient_debris_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/ancient_debris_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/ancient_debris_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/ancient_debris_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/ancient_debris_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/ancient_debris_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/ancient_debris_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/ancient_debris_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/ancient_debris_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/ancient_debris_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "ancient_debris_side"
    {
        token outputs:surface.connect = </Blocks/Looks/ancient_debris_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/ancient_debris_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/ancient_debris_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/ancient_debris_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/ancient_debris_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/ancient_debris_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/ancient_debris_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/ancient_debris_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/ancient_debris_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/ancient_debris_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "crying_obsidian"
    {
        token outputs:surface.connect = </Blocks/Looks/crying_obsidian/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/crying_obsidian/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/crying_obsidian/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/crying_obsidian/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/crying_obsidian/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/crying_obsidian.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.545098, 0.184314, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/crying_obsidian.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 666.667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/crying_obsidian_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.545098, 0.184314, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/crying_obsidian/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/crying_obsidian/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/crying_obsidian/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/crying_obsidian.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crying_obsidian/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/crying_obsidian/uv_reader.outputs:result>
            float4 inputs:scale = (0.545098, 0.184314, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "respawn_anchor_top"
    {
        token outputs:surface.connect = </Blocks/Looks/respawn_anchor_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/respawn_anchor_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/respawn_anchor_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/respawn_anchor_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/respawn_anchor_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/respawn_anchor_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.486275, 0.0705882, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/respawn_anchor_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 200 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/respawn_anchor_top_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.0705882, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/respawn_anchor_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/respawn_anchor_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/respawn_anchor_top/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/respawn_anchor_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_top/uv_reader.outputs:result>
            float4 inputs:scale = (0.486275, 0.0705882, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "respawn_anchor_top_off"
    {
        token outputs:surface.connect = </Blocks/Looks/respawn_anchor_top_off/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/respawn_anchor_top_off/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/respawn_anchor_top_off/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/respawn_anchor_top_off/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/respawn_anchor_top_off/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/respawn_anchor_top_off.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.372549, 0.054902, 0.768627)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/respawn_anchor_top_off/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/respawn_anchor_top_off/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/respawn_anchor_top_off/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/respawn_anchor_top_off.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_top_off/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "respawn_anchor_side0"
    {
        token outputs:surface.connect = </Blocks/Looks/respawn_anchor_side0/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/respawn_anchor_side0/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/respawn_anchor_side0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/respawn_anchor_side0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/respawn_anchor_side0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/respawn_anchor_side0.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.372549, 0.054902, 0.768627)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/respawn_anchor_side0/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/respawn_anchor_side0/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/respawn_anchor_side0/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/respawn_anchor_side0.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_side0/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "respawn_anchor_side1"
    {
        token outputs:surface.connect = </Blocks/Looks/respawn_anchor_side1/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/respawn_anchor_side1/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/respawn_anchor_side1/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/respawn_anchor_side1/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/respawn_anchor_side1/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/respawn_anchor_side1.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.486275, 0.0705882, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/respawn_anchor_side1.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 200 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/respawn_anchor_side1_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.0705882, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/respawn_anchor_side1/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/respawn_anchor_side1/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/respawn_anchor_side1/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/respawn_anchor_side1.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_side1/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_side1/uv_reader.outputs:result>
            float4 inputs:scale = (0.486275, 0.0705882, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "respawn_anchor_side2"
    {
        token outputs:surface.connect = </Blocks/Looks/respawn_anchor_side2/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/respawn_anchor_side2/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/respawn_anchor_side2/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/respawn_anchor_side2/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/respawn_anchor_side2/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/respawn_anchor_side2.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.486275, 0.0705882, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/respawn_anchor_side2.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 466.667 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/respawn_anchor_side2_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.0705882, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/respawn_anchor_side2/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/respawn_anchor_side2/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/respawn_anchor_side2/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/respawn_anchor_side2.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_side2/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_side2/uv_reader.outputs:result>
            float4 inputs:scale = (0.486275, 0.0705882, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "respawn_anchor_side3"
    {
        token outputs:surface.connect = </Blocks/Looks/respawn_anchor_side3/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/respawn_anchor_side3/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/respawn_anchor_side3/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/respawn_anchor_side3/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/respawn_anchor_side3/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/respawn_anchor_side3.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.486275, 0.0705882, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/respawn_anchor_side3.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 733.333 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/respawn_anchor_side3_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.0705882, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/respawn_anchor_side3/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/respawn_anchor_side3/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/respawn_anchor_side3/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/respawn_anchor_side3.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_side3/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_side3/uv_reader.outputs:result>
            float4 inputs:scale = (0.486275, 0.0705882, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "respawn_anchor_side4"
    {
        token outputs:surface.connect = </Blocks/Looks/respawn_anchor_side4/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/respawn_anchor_side4/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/respawn_anchor_side4/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/respawn_anchor_side4/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/respawn_anchor_side4/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/respawn_anchor_side4.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (0.486275, 0.0705882, 1) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/respawn_anchor_side4.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/respawn_anchor_side4_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.0705882, 1)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/respawn_anchor_side4/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/respawn_anchor_side4/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/respawn_anchor_side4/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/respawn_anchor_side4.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_side4/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_side4/uv_reader.outputs:result>
            float4 inputs:scale = (0.486275, 0.0705882, 1, 1.0)
            float outputs:rgb
        }
    }

    def Material "respawn_anchor_bottom"
    {
        token outputs:surface.connect = </Blocks/Looks/respawn_anchor_bottom/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/respawn_anchor_bottom/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/respawn_anchor_bottom/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/respawn_anchor_bottom/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/respawn_anchor_bottom/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/respawn_anchor_bottom.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.372549, 0.054902, 0.768627)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/respawn_anchor_bottom/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/respawn_anchor_bottom/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/respawn_anchor_bottom/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/respawn_anchor_bottom.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/respawn_anchor_bottom/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lodestone_top"
    {
        token outputs:surface.connect = </Blocks/Looks/lodestone_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lodestone_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lodestone_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lodestone_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lodestone_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lodestone_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lodestone_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lodestone_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lodestone_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lodestone_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "lodestone_side"
    {
        token outputs:surface.connect = </Blocks/Looks/lodestone_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/lodestone_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/lodestone_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/lodestone_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/lodestone_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/lodestone_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.509804, 0.329412, 0.196078)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/lodestone_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/lodestone_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/lodestone_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/lodestone_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "netherite_block"
    {
        token outputs:surface.connect = </Blocks/Looks/netherite_block/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/netherite_block/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/netherite_block/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/netherite_block/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/netherite_block/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/netherite_block.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/netherite_block/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/netherite_block/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/netherite_block.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/netherite_block/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "nether_gold_ore"
    {
        token outputs:surface.connect = </Blocks/Looks/nether_gold_ore/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/nether_gold_ore/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/nether_gold_ore/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/nether_gold_ore/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/nether_gold_ore/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/nether_gold_ore.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/nether_gold_ore/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/nether_gold_ore/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/nether_gold_ore.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/nether_gold_ore/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "gilded_blackstone"
    {
        token outputs:surface.connect = </Blocks/Looks/gilded_blackstone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/gilded_blackstone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/gilded_blackstone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/gilded_blackstone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/gilded_blackstone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/gilded_blackstone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/gilded_blackstone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/gilded_blackstone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/gilded_blackstone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/gilded_blackstone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blackstone_top"
    {
        token outputs:surface.connect = </Blocks/Looks/blackstone_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blackstone_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blackstone_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blackstone_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blackstone_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blackstone_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blackstone_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blackstone_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blackstone_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blackstone_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "blackstone"
    {
        token outputs:surface.connect = </Blocks/Looks/blackstone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/blackstone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/blackstone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/blackstone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/blackstone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/blackstone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/blackstone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/blackstone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/blackstone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/blackstone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chiseled_polished_blackstone"
    {
        token outputs:surface.connect = </Blocks/Looks/chiseled_polished_blackstone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chiseled_polished_blackstone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chiseled_polished_blackstone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chiseled_polished_blackstone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chiseled_polished_blackstone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chiseled_polished_blackstone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chiseled_polished_blackstone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chiseled_polished_blackstone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chiseled_polished_blackstone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chiseled_polished_blackstone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cracked_polished_blackstone_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/cracked_polished_blackstone_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cracked_polished_blackstone_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cracked_polished_blackstone_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cracked_polished_blackstone_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cracked_polished_blackstone_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cracked_polished_blackstone_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cracked_polished_blackstone_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cracked_polished_blackstone_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cracked_polished_blackstone_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cracked_polished_blackstone_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "polished_blackstone"
    {
        token outputs:surface.connect = </Blocks/Looks/polished_blackstone/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/polished_blackstone/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/polished_blackstone/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/polished_blackstone/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/polished_blackstone/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/polished_blackstone.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/polished_blackstone/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/polished_blackstone/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/polished_blackstone.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/polished_blackstone/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "polished_blackstone_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/polished_blackstone_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/polished_blackstone_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/polished_blackstone_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/polished_blackstone_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/polished_blackstone_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/polished_blackstone_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.486275, 0.486275, 0.486275)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/polished_blackstone_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/polished_blackstone_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/polished_blackstone_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/polished_blackstone_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chiseled_nether_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/chiseled_nether_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chiseled_nether_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chiseled_nether_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chiseled_nether_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chiseled_nether_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chiseled_nether_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.0901961, 0.109804)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chiseled_nether_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chiseled_nether_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chiseled_nether_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chiseled_nether_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "cracked_nether_bricks"
    {
        token outputs:surface.connect = </Blocks/Looks/cracked_nether_bricks/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/cracked_nether_bricks/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/cracked_nether_bricks/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/cracked_nether_bricks/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/cracked_nether_bricks/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/cracked_nether_bricks.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.196078, 0.0901961, 0.109804)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/cracked_nether_bricks/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/cracked_nether_bricks/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/cracked_nether_bricks.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/cracked_nether_bricks/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "shroomlight"
    {
        token outputs:surface.connect = </Blocks/Looks/shroomlight/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/shroomlight/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/shroomlight/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/shroomlight/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/shroomlight/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/shroomlight.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            color3f inputs:emissive_color = (1, 0.85098, 0.627451) (
                displayGroup = "Emissive"
                displayName = "Emissive Color"
            )
            asset inputs:emissive_color_texture = @textures/shroomlight.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Color map"
            )
            float inputs:emissive_intensity = 1000 (
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
            )
            asset inputs:emissive_mask_texture = @textures/shroomlight_e.png@ (
                colorSpace = "sRGB"
                displayGroup = "Emissive"
                displayName = "Emissive Mask map"
            )
            bool inputs:enable_emission = 1 (
                displayGroup = "Emissive"
                displayName = "Enable Emission"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (1, 0.85098, 0.627451)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/shroomlight/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/shroomlight/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            color3f inputs:emissiveColor.connect = </Blocks/Looks/shroomlight/emissive_texture.outputs:rgb>
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/shroomlight.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shroomlight/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
        def Shader "emissive_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/shroomlight/uv_reader.outputs:result>
            float4 inputs:scale = (1, 0.85098, 0.627451, 1.0)
            float outputs:rgb
        }
    }

    def Material "jigsaw_lock"
    {
        token outputs:surface.connect = </Blocks/Looks/jigsaw_lock/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/jigsaw_lock/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/jigsaw_lock/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/jigsaw_lock/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/jigsaw_lock/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/jigsaw_lock.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.4, 0.368627, 0.372549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/jigsaw_lock/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/jigsaw_lock/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/jigsaw_lock.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/jigsaw_lock/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "target_top"
    {
        token outputs:surface.connect = </Blocks/Looks/target_top/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/target_top/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/target_top/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/target_top/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/target_top/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/target_top.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.858824, 0.266667, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/target_top/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/target_top/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/target_top.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/target_top/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "target_side"
    {
        token outputs:surface.connect = </Blocks/Looks/target_side/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/target_side/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/target_side/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/target_side/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/target_side/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/target_side.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.858824, 0.266667, 0.101961)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/target_side/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/target_side/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/target_side.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/target_side/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }

    def Material "chain"
    {
        token outputs:surface.connect = </Blocks/Looks/chain/PreviewSurface.outputs:surface>
        token outputs:displacement.connect = </Blocks/Looks/chain/PreviewSurface.outputs:displacement>
        token outputs:mdl:displacement.connect = </Blocks/Looks/chain/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Blocks/Looks/chain/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Blocks/Looks/chain/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./Blockworld.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Blockworld"
            asset inputs:diffuse_texture = @textures/chain.png@ (
                colorSpace = "sRGB"
                displayGroup = "Albedo"
                displayName = "Albedo Map"
            )
            bool inputs:enable_opacity = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity"
            )
            bool inputs:enable_opacity_texture = 1 (
                displayGroup = "Opacity"
                displayName = "Enable Opacity Texture"
            )
            float inputs:metallic_constant = 0 (
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "raw"
                displayGroup = "Normal"
                displayName = "Normal Map"
            )
            int inputs:opacity_mode = 0 (
                displayGroup = "Opacity"
                displayName = "Opacity Mono Source"
                renderType = "::base::mono_mode"
                sdrMetadata = {
                    string __SDR__enum_value = "mono_average"
                    string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                }
            )
            asset inputs:opacity_texture = @textures/chain.png@ (
                colorSpace = "raw"
                displayGroup = "Opacity"
                displayName = "Opacity Map"
            )
            bool inputs:thin_walled = 1 (
                displayName = "Thin-walled Material"
            )
            token outputs:out
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            int inputs:useSpecularWorkflow = 0
            color3f inputs:diffuseColor = (0.243137, 0.266667, 0.32549)
            color3f inputs:diffuseColor.connect = </Blocks/Looks/chain/diffuse_texture.outputs:rgb>
            float inputs:opacity.connect = </Blocks/Looks/chain/diffuse_texture.outputs:a>
            float inputs:opacityThreshold = 0.5
            float inputs:roughness = 1
            float inputs:metallic = 0
            token outputs:surface
            token outputs:out
        }
        def Shader "uv_reader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            float2 inputs:fallback = (0, 0)
            token inputs:varname = "st"
            float2 outputs:result
        }
        def Shader "diffuse_texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/chain.png@
            asset inputs:wrapS = "repeat"
            asset inputs:wrapT = "repeat"
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </Blocks/Looks/chain/uv_reader.outputs:result>
            float outputs:a
            color3f outputs:rgb
        }
    }
}
}

def DistantLight "Sun" (
    prepend apiSchemas = ["ShapingAPI"]
    kind = "model"
)
{
    float angle = 1
    float intensity = 30
    float shaping:cone:angle = 180
    float shaping:cone:softness
    float shaping:focus
    color3f shaping:focusTint
    asset shaping:ies:file
    float3 xformOp:rotateZYX = (290, 345, 0)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]
}

def DomeLight "DomeLight" (
    prepend apiSchemas = ["ShapingAPI"]
)
{
    float intensity = 6
    float shaping:cone:angle = 180
    float shaping:cone:softness
    float shaping:focus
    color3f shaping:focusTint
    asset shaping:ies:file
    asset texture:file = @textures/_domelight.png@
    token texture:format = "latlong"
    float3 xformOp:rotateZYX = (270, 0, 0)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]
}

