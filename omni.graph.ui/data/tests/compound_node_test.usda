#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (500, 500, 500)
                double3 target = (-0.0000039780385918675165, 0.00000795607684267452, -0.000003978038364493841)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:dynamicDiffuseGI:probeCounts" = (6, 6, 6)
            float3 "rtx:dynamicDiffuseGI:probeGridOrigin" = (-210, -250, -10)
            float3 "rtx:dynamicDiffuseGI:volumeSize" = (600, 440, 300)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:lightspeed:material:overrideAlbedo" = (0.5, 0.5, 0.5)
            float3 "rtx:lightspeed:material:overrideEmissiveColor" = (0.5, 0.5, 0.5)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    def Scope "Compounds"
    {
        def OmniGraphCompoundNodeType "TestCompound"
        {
            prepend rel omni:graph:asset = </World/Compounds/TestCompound/Graph>
            token[] omni:graph:categories = ["Compounds", "debug", "other"]
            string omni:graph:description = "This is a description"
            custom rel omni:graph:input:input = </World/Compounds/TestCompound/Graph/magnitude.inputs:input>
            custom rel omni:graph:input:input_01 = </World/Compounds/TestCompound/Graph/magnitude_01.inputs:input>
            token omni:graph:namespace = "local.nodes"
            custom rel omni:graph:output:sum = </World/Compounds/TestCompound/Graph/add.outputs:sum>
            custom rel omni:graph:output:sum_01 = </World/Compounds/TestCompound/Graph/add_02.outputs:sum>
            token[] omni:graph:tags = ["taga", "tagb"]
            string omni:graph:uiName = "Test Compound"

            def OmniGraph "Graph"
            {
                token evaluationMode = "Automatic"
                token evaluator:type = "push"
                token fabricCacheBacking = "Shared"
                int2 fileFormatVersion = (1, 5)
                token pipelineStage = "pipelineStageSimulation"

                def OmniGraphNode "add" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom token inputs:a
                    prepend token inputs:a.connect = </World/Compounds/TestCompound/Graph/magnitude_01.outputs:magnitude>
                    custom token inputs:b
                    prepend token inputs:b.connect = </World/Compounds/TestCompound/Graph/magnitude_01.outputs:magnitude>
                    token node:type = "omni.graph.nodes.Add"
                    int node:typeVersion = 1
                    custom token outputs:sum
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (562, 15)
                }

                def OmniGraphNode "add_02" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom token inputs:a
                    prepend token inputs:a.connect = </World/Compounds/TestCompound/Graph/magnitude.outputs:magnitude>
                    custom token inputs:b
                    prepend token inputs:b.connect = </World/Compounds/TestCompound/Graph/magnitude.outputs:magnitude>
                    token node:type = "omni.graph.nodes.Add"
                    int node:typeVersion = 1
                    custom token outputs:sum
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (560, 167)
                }

                def OmniGraphNode "magnitude" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom token inputs:input
                    token node:type = "omni.graph.nodes.Magnitude"
                    int node:typeVersion = 1
                    custom token outputs:magnitude
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (288, 153)
                }

                def OmniGraphNode "magnitude_01" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom token inputs:input
                    token node:type = "omni.graph.nodes.Magnitude"
                    int node:typeVersion = 1
                    custom token outputs:magnitude
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (290, -10)
                }
            }
        }
    }
}

